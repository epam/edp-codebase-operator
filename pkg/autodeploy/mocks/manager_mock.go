// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/epam/edp-codebase-operator/v2/api/v1"

	context "context"

	json "encoding/json"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/epam/edp-cd-pipeline-operator/v2/api/v1"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// GetAppPayloadForAllLatestStrategy provides a mock function with given fields: ctx, pipeline
func (_m *MockManager) GetAppPayloadForAllLatestStrategy(ctx context.Context, pipeline *v1.CDPipeline) (json.RawMessage, error) {
	ret := _m.Called(ctx, pipeline)

	if len(ret) == 0 {
		panic("no return value specified for GetAppPayloadForAllLatestStrategy")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CDPipeline) (json.RawMessage, error)); ok {
		return rf(ctx, pipeline)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.CDPipeline) json.RawMessage); ok {
		r0 = rf(ctx, pipeline)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.CDPipeline) error); ok {
		r1 = rf(ctx, pipeline)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetAppPayloadForAllLatestStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppPayloadForAllLatestStrategy'
type MockManager_GetAppPayloadForAllLatestStrategy_Call struct {
	*mock.Call
}

// GetAppPayloadForAllLatestStrategy is a helper method to define mock.On call
//   - ctx context.Context
//   - pipeline *v1.CDPipeline
func (_e *MockManager_Expecter) GetAppPayloadForAllLatestStrategy(ctx interface{}, pipeline interface{}) *MockManager_GetAppPayloadForAllLatestStrategy_Call {
	return &MockManager_GetAppPayloadForAllLatestStrategy_Call{Call: _e.mock.On("GetAppPayloadForAllLatestStrategy", ctx, pipeline)}
}

func (_c *MockManager_GetAppPayloadForAllLatestStrategy_Call) Run(run func(ctx context.Context, pipeline *v1.CDPipeline)) *MockManager_GetAppPayloadForAllLatestStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1.CDPipeline))
	})
	return _c
}

func (_c *MockManager_GetAppPayloadForAllLatestStrategy_Call) Return(_a0 json.RawMessage, _a1 error) *MockManager_GetAppPayloadForAllLatestStrategy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetAppPayloadForAllLatestStrategy_Call) RunAndReturn(run func(context.Context, *v1.CDPipeline) (json.RawMessage, error)) *MockManager_GetAppPayloadForAllLatestStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// GetAppPayloadForCurrentWithStableStrategy provides a mock function with given fields: ctx, current, pipeline, stage
func (_m *MockManager) GetAppPayloadForCurrentWithStableStrategy(ctx context.Context, current apiv1.CodebaseTag, pipeline *v1.CDPipeline, stage *v1.Stage) (json.RawMessage, error) {
	ret := _m.Called(ctx, current, pipeline, stage)

	if len(ret) == 0 {
		panic("no return value specified for GetAppPayloadForCurrentWithStableStrategy")
	}

	var r0 json.RawMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, apiv1.CodebaseTag, *v1.CDPipeline, *v1.Stage) (json.RawMessage, error)); ok {
		return rf(ctx, current, pipeline, stage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, apiv1.CodebaseTag, *v1.CDPipeline, *v1.Stage) json.RawMessage); ok {
		r0 = rf(ctx, current, pipeline, stage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(json.RawMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, apiv1.CodebaseTag, *v1.CDPipeline, *v1.Stage) error); ok {
		r1 = rf(ctx, current, pipeline, stage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_GetAppPayloadForCurrentWithStableStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAppPayloadForCurrentWithStableStrategy'
type MockManager_GetAppPayloadForCurrentWithStableStrategy_Call struct {
	*mock.Call
}

// GetAppPayloadForCurrentWithStableStrategy is a helper method to define mock.On call
//   - ctx context.Context
//   - current apiv1.CodebaseTag
//   - pipeline *v1.CDPipeline
//   - stage *v1.Stage
func (_e *MockManager_Expecter) GetAppPayloadForCurrentWithStableStrategy(ctx interface{}, current interface{}, pipeline interface{}, stage interface{}) *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call {
	return &MockManager_GetAppPayloadForCurrentWithStableStrategy_Call{Call: _e.mock.On("GetAppPayloadForCurrentWithStableStrategy", ctx, current, pipeline, stage)}
}

func (_c *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call) Run(run func(ctx context.Context, current apiv1.CodebaseTag, pipeline *v1.CDPipeline, stage *v1.Stage)) *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(apiv1.CodebaseTag), args[2].(*v1.CDPipeline), args[3].(*v1.Stage))
	})
	return _c
}

func (_c *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call) Return(_a0 json.RawMessage, _a1 error) *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call) RunAndReturn(run func(context.Context, apiv1.CodebaseTag, *v1.CDPipeline, *v1.Stage) (json.RawMessage, error)) *MockManager_GetAppPayloadForCurrentWithStableStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
