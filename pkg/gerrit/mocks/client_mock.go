// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	logr "github.com/go-logr/logr"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CheckProjectExist provides a mock function with given fields: port, sshPrivateKey, host, user, appName, logger
func (_m *MockClient) CheckProjectExist(port int32, sshPrivateKey string, host string, user string, appName string, logger logr.Logger) (bool, error) {
	ret := _m.Called(port, sshPrivateKey, host, user, appName, logger)

	if len(ret) == 0 {
		panic("no return value specified for CheckProjectExist")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, string, logr.Logger) (bool, error)); ok {
		return rf(port, sshPrivateKey, host, user, appName, logger)
	}
	if rf, ok := ret.Get(0).(func(int32, string, string, string, string, logr.Logger) bool); ok {
		r0 = rf(port, sshPrivateKey, host, user, appName, logger)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int32, string, string, string, string, logr.Logger) error); ok {
		r1 = rf(port, sshPrivateKey, host, user, appName, logger)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CheckProjectExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckProjectExist'
type MockClient_CheckProjectExist_Call struct {
	*mock.Call
}

// CheckProjectExist is a helper method to define mock.On call
//   - port int32
//   - sshPrivateKey string
//   - host string
//   - user string
//   - appName string
//   - logger logr.Logger
func (_e *MockClient_Expecter) CheckProjectExist(port interface{}, sshPrivateKey interface{}, host interface{}, user interface{}, appName interface{}, logger interface{}) *MockClient_CheckProjectExist_Call {
	return &MockClient_CheckProjectExist_Call{Call: _e.mock.On("CheckProjectExist", port, sshPrivateKey, host, user, appName, logger)}
}

func (_c *MockClient_CheckProjectExist_Call) Run(run func(port int32, sshPrivateKey string, host string, user string, appName string, logger logr.Logger)) *MockClient_CheckProjectExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(logr.Logger))
	})
	return _c
}

func (_c *MockClient_CheckProjectExist_Call) Return(_a0 bool, _a1 error) *MockClient_CheckProjectExist_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CheckProjectExist_Call) RunAndReturn(run func(int32, string, string, string, string, logr.Logger) (bool, error)) *MockClient_CheckProjectExist_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: port, sshPrivateKey, host, user, appName, logger
func (_m *MockClient) CreateProject(port int32, sshPrivateKey string, host string, user string, appName string, logger logr.Logger) error {
	ret := _m.Called(port, sshPrivateKey, host, user, appName, logger)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, string, logr.Logger) error); ok {
		r0 = rf(port, sshPrivateKey, host, user, appName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockClient_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - port int32
//   - sshPrivateKey string
//   - host string
//   - user string
//   - appName string
//   - logger logr.Logger
func (_e *MockClient_Expecter) CreateProject(port interface{}, sshPrivateKey interface{}, host interface{}, user interface{}, appName interface{}, logger interface{}) *MockClient_CreateProject_Call {
	return &MockClient_CreateProject_Call{Call: _e.mock.On("CreateProject", port, sshPrivateKey, host, user, appName, logger)}
}

func (_c *MockClient_CreateProject_Call) Run(run func(port int32, sshPrivateKey string, host string, user string, appName string, logger logr.Logger)) *MockClient_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(logr.Logger))
	})
	return _c
}

func (_c *MockClient_CreateProject_Call) Return(_a0 error) *MockClient_CreateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateProject_Call) RunAndReturn(run func(int32, string, string, string, string, logr.Logger) error) *MockClient_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// SetHeadToBranch provides a mock function with given fields: port, sshPrivateKey, host, user, appName, branchName, logger
func (_m *MockClient) SetHeadToBranch(port int32, sshPrivateKey string, host string, user string, appName string, branchName string, logger logr.Logger) error {
	ret := _m.Called(port, sshPrivateKey, host, user, appName, branchName, logger)

	if len(ret) == 0 {
		panic("no return value specified for SetHeadToBranch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int32, string, string, string, string, string, logr.Logger) error); ok {
		r0 = rf(port, sshPrivateKey, host, user, appName, branchName, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_SetHeadToBranch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeadToBranch'
type MockClient_SetHeadToBranch_Call struct {
	*mock.Call
}

// SetHeadToBranch is a helper method to define mock.On call
//   - port int32
//   - sshPrivateKey string
//   - host string
//   - user string
//   - appName string
//   - branchName string
//   - logger logr.Logger
func (_e *MockClient_Expecter) SetHeadToBranch(port interface{}, sshPrivateKey interface{}, host interface{}, user interface{}, appName interface{}, branchName interface{}, logger interface{}) *MockClient_SetHeadToBranch_Call {
	return &MockClient_SetHeadToBranch_Call{Call: _e.mock.On("SetHeadToBranch", port, sshPrivateKey, host, user, appName, branchName, logger)}
}

func (_c *MockClient_SetHeadToBranch_Call) Run(run func(port int32, sshPrivateKey string, host string, user string, appName string, branchName string, logger logr.Logger)) *MockClient_SetHeadToBranch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int32), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(logr.Logger))
	})
	return _c
}

func (_c *MockClient_SetHeadToBranch_Call) Return(_a0 error) *MockClient_SetHeadToBranch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_SetHeadToBranch_Call) RunAndReturn(run func(int32, string, string, string, string, string, logr.Logger) error) *MockClient_SetHeadToBranch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
