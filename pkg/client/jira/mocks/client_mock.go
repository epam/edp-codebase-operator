// Code generated by mockery v2.43.0. DO NOT EDIT.

package mocks

import (
	context "context"

	go_jira "github.com/andygrunwald/go-jira"
	jira "github.com/epam/edp-codebase-operator/v2/pkg/client/jira"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// ApplyTagsToIssue provides a mock function with given fields: issue, tags
func (_m *MockClient) ApplyTagsToIssue(issue string, tags map[string]interface{}) error {
	ret := _m.Called(issue, tags)

	if len(ret) == 0 {
		panic("no return value specified for ApplyTagsToIssue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(issue, tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_ApplyTagsToIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplyTagsToIssue'
type MockClient_ApplyTagsToIssue_Call struct {
	*mock.Call
}

// ApplyTagsToIssue is a helper method to define mock.On call
//   - issue string
//   - tags map[string]interface{}
func (_e *MockClient_Expecter) ApplyTagsToIssue(issue interface{}, tags interface{}) *MockClient_ApplyTagsToIssue_Call {
	return &MockClient_ApplyTagsToIssue_Call{Call: _e.mock.On("ApplyTagsToIssue", issue, tags)}
}

func (_c *MockClient_ApplyTagsToIssue_Call) Run(run func(issue string, tags map[string]interface{})) *MockClient_ApplyTagsToIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockClient_ApplyTagsToIssue_Call) Return(_a0 error) *MockClient_ApplyTagsToIssue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_ApplyTagsToIssue_Call) RunAndReturn(run func(string, map[string]interface{}) error) *MockClient_ApplyTagsToIssue_Call {
	_c.Call.Return(run)
	return _c
}

// Connected provides a mock function with given fields:
func (_m *MockClient) Connected() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connected")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_Connected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connected'
type MockClient_Connected_Call struct {
	*mock.Call
}

// Connected is a helper method to define mock.On call
func (_e *MockClient_Expecter) Connected() *MockClient_Connected_Call {
	return &MockClient_Connected_Call{Call: _e.mock.On("Connected")}
}

func (_c *MockClient_Connected_Call) Run(run func()) *MockClient_Connected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Connected_Call) Return(_a0 bool, _a1 error) *MockClient_Connected_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_Connected_Call) RunAndReturn(run func() (bool, error)) *MockClient_Connected_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentValue provides a mock function with given fields: ctx, projectId, componentName
func (_m *MockClient) CreateComponentValue(ctx context.Context, projectId int, componentName string) error {
	ret := _m.Called(ctx, projectId, componentName)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, projectId, componentName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateComponentValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentValue'
type MockClient_CreateComponentValue_Call struct {
	*mock.Call
}

// CreateComponentValue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - componentName string
func (_e *MockClient_Expecter) CreateComponentValue(ctx interface{}, projectId interface{}, componentName interface{}) *MockClient_CreateComponentValue_Call {
	return &MockClient_CreateComponentValue_Call{Call: _e.mock.On("CreateComponentValue", ctx, projectId, componentName)}
}

func (_c *MockClient_CreateComponentValue_Call) Run(run func(ctx context.Context, projectId int, componentName string)) *MockClient_CreateComponentValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockClient_CreateComponentValue_Call) Return(_a0 error) *MockClient_CreateComponentValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateComponentValue_Call) RunAndReturn(run func(context.Context, int, string) error) *MockClient_CreateComponentValue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateFixVersionValue provides a mock function with given fields: ctx, projectId, versionName
func (_m *MockClient) CreateFixVersionValue(ctx context.Context, projectId int, versionName string) error {
	ret := _m.Called(ctx, projectId, versionName)

	if len(ret) == 0 {
		panic("no return value specified for CreateFixVersionValue")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, projectId, versionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateFixVersionValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFixVersionValue'
type MockClient_CreateFixVersionValue_Call struct {
	*mock.Call
}

// CreateFixVersionValue is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId int
//   - versionName string
func (_e *MockClient_Expecter) CreateFixVersionValue(ctx interface{}, projectId interface{}, versionName interface{}) *MockClient_CreateFixVersionValue_Call {
	return &MockClient_CreateFixVersionValue_Call{Call: _e.mock.On("CreateFixVersionValue", ctx, projectId, versionName)}
}

func (_c *MockClient_CreateFixVersionValue_Call) Run(run func(ctx context.Context, projectId int, versionName string)) *MockClient_CreateFixVersionValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockClient_CreateFixVersionValue_Call) Return(_a0 error) *MockClient_CreateFixVersionValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateFixVersionValue_Call) RunAndReturn(run func(context.Context, int, string) error) *MockClient_CreateFixVersionValue_Call {
	_c.Call.Return(run)
	return _c
}

// CreateIssueLink provides a mock function with given fields: issueId, title, url
func (_m *MockClient) CreateIssueLink(issueId string, title string, url string) error {
	ret := _m.Called(issueId, title, url)

	if len(ret) == 0 {
		panic("no return value specified for CreateIssueLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(issueId, title, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_CreateIssueLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateIssueLink'
type MockClient_CreateIssueLink_Call struct {
	*mock.Call
}

// CreateIssueLink is a helper method to define mock.On call
//   - issueId string
//   - title string
//   - url string
func (_e *MockClient_Expecter) CreateIssueLink(issueId interface{}, title interface{}, url interface{}) *MockClient_CreateIssueLink_Call {
	return &MockClient_CreateIssueLink_Call{Call: _e.mock.On("CreateIssueLink", issueId, title, url)}
}

func (_c *MockClient_CreateIssueLink_Call) Run(run func(issueId string, title string, url string)) *MockClient_CreateIssueLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_CreateIssueLink_Call) Return(_a0 error) *MockClient_CreateIssueLink_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateIssueLink_Call) RunAndReturn(run func(string, string, string) error) *MockClient_CreateIssueLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssue provides a mock function with given fields: ctx, issueId
func (_m *MockClient) GetIssue(ctx context.Context, issueId string) (*go_jira.Issue, error) {
	ret := _m.Called(ctx, issueId)

	if len(ret) == 0 {
		panic("no return value specified for GetIssue")
	}

	var r0 *go_jira.Issue
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*go_jira.Issue, error)); ok {
		return rf(ctx, issueId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *go_jira.Issue); ok {
		r0 = rf(ctx, issueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_jira.Issue)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, issueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetIssue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssue'
type MockClient_GetIssue_Call struct {
	*mock.Call
}

// GetIssue is a helper method to define mock.On call
//   - ctx context.Context
//   - issueId string
func (_e *MockClient_Expecter) GetIssue(ctx interface{}, issueId interface{}) *MockClient_GetIssue_Call {
	return &MockClient_GetIssue_Call{Call: _e.mock.On("GetIssue", ctx, issueId)}
}

func (_c *MockClient_GetIssue_Call) Run(run func(ctx context.Context, issueId string)) *MockClient_GetIssue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_GetIssue_Call) Return(_a0 *go_jira.Issue, _a1 error) *MockClient_GetIssue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetIssue_Call) RunAndReturn(run func(context.Context, string) (*go_jira.Issue, error)) *MockClient_GetIssue_Call {
	_c.Call.Return(run)
	return _c
}

// GetIssueTypeMeta provides a mock function with given fields: ctx, projectID, issueTypeID
func (_m *MockClient) GetIssueTypeMeta(ctx context.Context, projectID string, issueTypeID string) (map[string]jira.IssueTypeMeta, error) {
	ret := _m.Called(ctx, projectID, issueTypeID)

	if len(ret) == 0 {
		panic("no return value specified for GetIssueTypeMeta")
	}

	var r0 map[string]jira.IssueTypeMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string]jira.IssueTypeMeta, error)); ok {
		return rf(ctx, projectID, issueTypeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string]jira.IssueTypeMeta); ok {
		r0 = rf(ctx, projectID, issueTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]jira.IssueTypeMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, projectID, issueTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetIssueTypeMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIssueTypeMeta'
type MockClient_GetIssueTypeMeta_Call struct {
	*mock.Call
}

// GetIssueTypeMeta is a helper method to define mock.On call
//   - ctx context.Context
//   - projectID string
//   - issueTypeID string
func (_e *MockClient_Expecter) GetIssueTypeMeta(ctx interface{}, projectID interface{}, issueTypeID interface{}) *MockClient_GetIssueTypeMeta_Call {
	return &MockClient_GetIssueTypeMeta_Call{Call: _e.mock.On("GetIssueTypeMeta", ctx, projectID, issueTypeID)}
}

func (_c *MockClient_GetIssueTypeMeta_Call) Run(run func(ctx context.Context, projectID string, issueTypeID string)) *MockClient_GetIssueTypeMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetIssueTypeMeta_Call) Return(_a0 map[string]jira.IssueTypeMeta, _a1 error) *MockClient_GetIssueTypeMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetIssueTypeMeta_Call) RunAndReturn(run func(context.Context, string, string) (map[string]jira.IssueTypeMeta, error)) *MockClient_GetIssueTypeMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectInfo provides a mock function with given fields: issueId
func (_m *MockClient) GetProjectInfo(issueId string) (*go_jira.Project, error) {
	ret := _m.Called(issueId)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectInfo")
	}

	var r0 *go_jira.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*go_jira.Project, error)); ok {
		return rf(issueId)
	}
	if rf, ok := ret.Get(0).(func(string) *go_jira.Project); ok {
		r0 = rf(issueId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_jira.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(issueId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjectInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectInfo'
type MockClient_GetProjectInfo_Call struct {
	*mock.Call
}

// GetProjectInfo is a helper method to define mock.On call
//   - issueId string
func (_e *MockClient_Expecter) GetProjectInfo(issueId interface{}) *MockClient_GetProjectInfo_Call {
	return &MockClient_GetProjectInfo_Call{Call: _e.mock.On("GetProjectInfo", issueId)}
}

func (_c *MockClient_GetProjectInfo_Call) Run(run func(issueId string)) *MockClient_GetProjectInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockClient_GetProjectInfo_Call) Return(_a0 *go_jira.Project, _a1 error) *MockClient_GetProjectInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjectInfo_Call) RunAndReturn(run func(string) (*go_jira.Project, error)) *MockClient_GetProjectInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
