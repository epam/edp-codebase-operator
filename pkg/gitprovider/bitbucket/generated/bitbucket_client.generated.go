// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes = "api_key.Scopes"
	BasicScopes   = "basic.Scopes"
	Oauth2Scopes  = "oauth2.Scopes"
)

// Defines values for ApplicationPropertyAttributes.
const (
	Public   ApplicationPropertyAttributes = "public"
	ReadOnly ApplicationPropertyAttributes = "read_only"
)

// Defines values for BaseCommitSummaryMarkup.
const (
	BaseCommitSummaryMarkupCreole    BaseCommitSummaryMarkup = "creole"
	BaseCommitSummaryMarkupMarkdown  BaseCommitSummaryMarkup = "markdown"
	BaseCommitSummaryMarkupPlaintext BaseCommitSummaryMarkup = "plaintext"
)

// Defines values for BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission.
const (
	BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermissionAdmin      BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission = "admin"
	BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermissionCreateRepo BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission = "create-repo"
	BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermissionRead       BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission = "read"
	BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermissionWrite      BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission = "write"
)

// Defines values for BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission.
const (
	BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermissionAdmin BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission = "admin"
	BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermissionRead  BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission = "read"
	BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermissionWrite BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission = "write"
)

// Defines values for BranchMergeStrategies.
const (
	BranchMergeStrategiesFastForward       BranchMergeStrategies = "fast_forward"
	BranchMergeStrategiesMergeCommit       BranchMergeStrategies = "merge_commit"
	BranchMergeStrategiesRebaseFastForward BranchMergeStrategies = "rebase_fast_forward"
	BranchMergeStrategiesRebaseMerge       BranchMergeStrategies = "rebase_merge"
	BranchMergeStrategiesSquash            BranchMergeStrategies = "squash"
	BranchMergeStrategiesSquashFastForward BranchMergeStrategies = "squash_fast_forward"
)

// Defines values for BranchingModelBranchTypesKind.
const (
	BranchingModelBranchTypesKindBugfix  BranchingModelBranchTypesKind = "bugfix"
	BranchingModelBranchTypesKindFeature BranchingModelBranchTypesKind = "feature"
	BranchingModelBranchTypesKindHotfix  BranchingModelBranchTypesKind = "hotfix"
	BranchingModelBranchTypesKindRelease BranchingModelBranchTypesKind = "release"
)

// Defines values for BranchingModelSettingsBranchTypesKind.
const (
	BranchingModelSettingsBranchTypesKindBugfix  BranchingModelSettingsBranchTypesKind = "bugfix"
	BranchingModelSettingsBranchTypesKindFeature BranchingModelSettingsBranchTypesKind = "feature"
	BranchingModelSettingsBranchTypesKindHotfix  BranchingModelSettingsBranchTypesKind = "hotfix"
	BranchingModelSettingsBranchTypesKindRelease BranchingModelSettingsBranchTypesKind = "release"
)

// Defines values for BranchrestrictionBranchMatchKind.
const (
	BranchrestrictionBranchMatchKindBranchingModel BranchrestrictionBranchMatchKind = "branching_model"
	BranchrestrictionBranchMatchKindGlob           BranchrestrictionBranchMatchKind = "glob"
)

// Defines values for BranchrestrictionBranchType.
const (
	BranchrestrictionBranchTypeBugfix      BranchrestrictionBranchType = "bugfix"
	BranchrestrictionBranchTypeDevelopment BranchrestrictionBranchType = "development"
	BranchrestrictionBranchTypeFeature     BranchrestrictionBranchType = "feature"
	BranchrestrictionBranchTypeHotfix      BranchrestrictionBranchType = "hotfix"
	BranchrestrictionBranchTypeProduction  BranchrestrictionBranchType = "production"
	BranchrestrictionBranchTypeRelease     BranchrestrictionBranchType = "release"
)

// Defines values for BranchrestrictionKind.
const (
	AllowAutoMergeWhenBuildsPass             BranchrestrictionKind = "allow_auto_merge_when_builds_pass"
	Delete                                   BranchrestrictionKind = "delete"
	EnforceMergeChecks                       BranchrestrictionKind = "enforce_merge_checks"
	Force                                    BranchrestrictionKind = "force"
	Push                                     BranchrestrictionKind = "push"
	RequireAllCommentsResolved               BranchrestrictionKind = "require_all_comments_resolved"
	RequireAllDependenciesMerged             BranchrestrictionKind = "require_all_dependencies_merged"
	RequireApprovalsToMerge                  BranchrestrictionKind = "require_approvals_to_merge"
	RequireCommitsBehind                     BranchrestrictionKind = "require_commits_behind"
	RequireDefaultReviewerApprovalsToMerge   BranchrestrictionKind = "require_default_reviewer_approvals_to_merge"
	RequireNoChangesRequested                BranchrestrictionKind = "require_no_changes_requested"
	RequirePassingBuildsToMerge              BranchrestrictionKind = "require_passing_builds_to_merge"
	RequireReviewGroupApprovalsToMerge       BranchrestrictionKind = "require_review_group_approvals_to_merge"
	RequireTasksToBeCompleted                BranchrestrictionKind = "require_tasks_to_be_completed"
	ResetPullrequestApprovalsOnChange        BranchrestrictionKind = "reset_pullrequest_approvals_on_change"
	ResetPullrequestChangesRequestedOnChange BranchrestrictionKind = "reset_pullrequest_changes_requested_on_change"
	RestrictMerges                           BranchrestrictionKind = "restrict_merges"
	SmartResetPullrequestApprovals           BranchrestrictionKind = "smart_reset_pullrequest_approvals"
)

// Defines values for CommentContentMarkup.
const (
	CommentContentMarkupCreole    CommentContentMarkup = "creole"
	CommentContentMarkupMarkdown  CommentContentMarkup = "markdown"
	CommentContentMarkupPlaintext CommentContentMarkup = "plaintext"
)

// Defines values for CommitSummaryMarkup.
const (
	CommitSummaryMarkupCreole    CommitSummaryMarkup = "creole"
	CommitSummaryMarkupMarkdown  CommitSummaryMarkup = "markdown"
	CommitSummaryMarkupPlaintext CommitSummaryMarkup = "plaintext"
)

// Defines values for CommitCommentContentMarkup.
const (
	CommitCommentContentMarkupCreole    CommitCommentContentMarkup = "creole"
	CommitCommentContentMarkupMarkdown  CommitCommentContentMarkup = "markdown"
	CommitCommentContentMarkupPlaintext CommitCommentContentMarkup = "plaintext"
)

// Defines values for CommitFileAttributes.
const (
	CommitFileAttributesBinary        CommitFileAttributes = "binary"
	CommitFileAttributesExecutable    CommitFileAttributes = "executable"
	CommitFileAttributesLfs           CommitFileAttributes = "lfs"
	CommitFileAttributesLink          CommitFileAttributes = "link"
	CommitFileAttributesSubrepository CommitFileAttributes = "subrepository"
)

// Defines values for CommitstatusState.
const (
	CommitstatusStateFAILED     CommitstatusState = "FAILED"
	CommitstatusStateINPROGRESS CommitstatusState = "INPROGRESS"
	CommitstatusStateSTOPPED    CommitstatusState = "STOPPED"
	CommitstatusStateSUCCESSFUL CommitstatusState = "SUCCESSFUL"
)

// Defines values for DiffstatStatus.
const (
	Added    DiffstatStatus = "added"
	Modified DiffstatStatus = "modified"
	Removed  DiffstatStatus = "removed"
	Renamed  DiffstatStatus = "renamed"
)

// Defines values for EffectiveRepoBranchingModelBranchTypesKind.
const (
	EffectiveRepoBranchingModelBranchTypesKindBugfix  EffectiveRepoBranchingModelBranchTypesKind = "bugfix"
	EffectiveRepoBranchingModelBranchTypesKindFeature EffectiveRepoBranchingModelBranchTypesKind = "feature"
	EffectiveRepoBranchingModelBranchTypesKindHotfix  EffectiveRepoBranchingModelBranchTypesKind = "hotfix"
	EffectiveRepoBranchingModelBranchTypesKindRelease EffectiveRepoBranchingModelBranchTypesKind = "release"
)

// Defines values for HookEventEvent.
const (
	HookEventEventIssueCommentCreated              HookEventEvent = "issue:comment_created"
	HookEventEventIssueCreated                     HookEventEvent = "issue:created"
	HookEventEventIssueUpdated                     HookEventEvent = "issue:updated"
	HookEventEventProjectUpdated                   HookEventEvent = "project:updated"
	HookEventEventPullrequestApproved              HookEventEvent = "pullrequest:approved"
	HookEventEventPullrequestChangesRequestCreated HookEventEvent = "pullrequest:changes_request_created"
	HookEventEventPullrequestChangesRequestRemoved HookEventEvent = "pullrequest:changes_request_removed"
	HookEventEventPullrequestCommentCreated        HookEventEvent = "pullrequest:comment_created"
	HookEventEventPullrequestCommentDeleted        HookEventEvent = "pullrequest:comment_deleted"
	HookEventEventPullrequestCommentReopened       HookEventEvent = "pullrequest:comment_reopened"
	HookEventEventPullrequestCommentResolved       HookEventEvent = "pullrequest:comment_resolved"
	HookEventEventPullrequestCommentUpdated        HookEventEvent = "pullrequest:comment_updated"
	HookEventEventPullrequestCreated               HookEventEvent = "pullrequest:created"
	HookEventEventPullrequestFulfilled             HookEventEvent = "pullrequest:fulfilled"
	HookEventEventPullrequestPush                  HookEventEvent = "pullrequest:push"
	HookEventEventPullrequestRejected              HookEventEvent = "pullrequest:rejected"
	HookEventEventPullrequestUnapproved            HookEventEvent = "pullrequest:unapproved"
	HookEventEventPullrequestUpdated               HookEventEvent = "pullrequest:updated"
	HookEventEventRepoCommitCommentCreated         HookEventEvent = "repo:commit_comment_created"
	HookEventEventRepoCommitStatusCreated          HookEventEvent = "repo:commit_status_created"
	HookEventEventRepoCommitStatusUpdated          HookEventEvent = "repo:commit_status_updated"
	HookEventEventRepoCreated                      HookEventEvent = "repo:created"
	HookEventEventRepoDeleted                      HookEventEvent = "repo:deleted"
	HookEventEventRepoFork                         HookEventEvent = "repo:fork"
	HookEventEventRepoImported                     HookEventEvent = "repo:imported"
	HookEventEventRepoPush                         HookEventEvent = "repo:push"
	HookEventEventRepoTransfer                     HookEventEvent = "repo:transfer"
	HookEventEventRepoUpdated                      HookEventEvent = "repo:updated"
)

// Defines values for IssueContentMarkup.
const (
	IssueContentMarkupCreole    IssueContentMarkup = "creole"
	IssueContentMarkupMarkdown  IssueContentMarkup = "markdown"
	IssueContentMarkupPlaintext IssueContentMarkup = "plaintext"
)

// Defines values for IssueKind.
const (
	IssueKindBug         IssueKind = "bug"
	IssueKindEnhancement IssueKind = "enhancement"
	IssueKindProposal    IssueKind = "proposal"
	IssueKindTask        IssueKind = "task"
)

// Defines values for IssuePriority.
const (
	Blocker  IssuePriority = "blocker"
	Critical IssuePriority = "critical"
	Major    IssuePriority = "major"
	Minor    IssuePriority = "minor"
	Trivial  IssuePriority = "trivial"
)

// Defines values for IssueState.
const (
	Closed    IssueState = "closed"
	Duplicate IssueState = "duplicate"
	Invalid   IssueState = "invalid"
	New       IssueState = "new"
	OnHold    IssueState = "on hold"
	Open      IssueState = "open"
	Resolved  IssueState = "resolved"
	Submitted IssueState = "submitted"
	Wontfix   IssueState = "wontfix"
)

// Defines values for IssueChangeMessageMarkup.
const (
	IssueChangeMessageMarkupCreole    IssueChangeMessageMarkup = "creole"
	IssueChangeMessageMarkupMarkdown  IssueChangeMessageMarkup = "markdown"
	IssueChangeMessageMarkupPlaintext IssueChangeMessageMarkup = "plaintext"
)

// Defines values for IssueCommentContentMarkup.
const (
	IssueCommentContentMarkupCreole    IssueCommentContentMarkup = "creole"
	IssueCommentContentMarkupMarkdown  IssueCommentContentMarkup = "markdown"
	IssueCommentContentMarkupPlaintext IssueCommentContentMarkup = "plaintext"
)

// Defines values for IssueJobStatusStatus.
const (
	ACCEPTED IssueJobStatusStatus = "ACCEPTED"
	FAILURE  IssueJobStatusStatus = "FAILURE"
	RUNNING  IssueJobStatusStatus = "RUNNING"
	STARTED  IssueJobStatusStatus = "STARTED"
)

// Defines values for ParticipantRole.
const (
	PARTICIPANT ParticipantRole = "PARTICIPANT"
	REVIEWER    ParticipantRole = "REVIEWER"
)

// Defines values for ParticipantState.
const (
	Approved         ParticipantState = "approved"
	ChangesRequested ParticipantState = "changes_requested"
	LessThannil      ParticipantState = "<nil>"
)

// Defines values for PipelineRefTargetRefType.
const (
	PipelineRefTargetRefTypeBookmark    PipelineRefTargetRefType = "bookmark"
	PipelineRefTargetRefTypeBranch      PipelineRefTargetRefType = "branch"
	PipelineRefTargetRefTypeNamedBranch PipelineRefTargetRefType = "named_branch"
	PipelineRefTargetRefTypeTag         PipelineRefTargetRefType = "tag"
)

// Defines values for PipelineSchedulePostRequestBodyTargetRefType.
const (
	PipelineSchedulePostRequestBodyTargetRefTypeBranch PipelineSchedulePostRequestBodyTargetRefType = "branch"
)

// Defines values for PipelineSelectorType.
const (
	Bookmarks PipelineSelectorType = "bookmarks"
	Branches  PipelineSelectorType = "branches"
	Custom    PipelineSelectorType = "custom"
	Default   PipelineSelectorType = "default"
	Tags      PipelineSelectorType = "tags"
)

// Defines values for ProjectBranchingModelBranchTypesKind.
const (
	Bugfix  ProjectBranchingModelBranchTypesKind = "bugfix"
	Feature ProjectBranchingModelBranchTypesKind = "feature"
	Hotfix  ProjectBranchingModelBranchTypesKind = "hotfix"
	Release ProjectBranchingModelBranchTypesKind = "release"
)

// Defines values for ProjectGroupPermissionPermission.
const (
	ProjectGroupPermissionPermissionAdmin      ProjectGroupPermissionPermission = "admin"
	ProjectGroupPermissionPermissionCreateRepo ProjectGroupPermissionPermission = "create-repo"
	ProjectGroupPermissionPermissionNone       ProjectGroupPermissionPermission = "none"
	ProjectGroupPermissionPermissionRead       ProjectGroupPermissionPermission = "read"
	ProjectGroupPermissionPermissionWrite      ProjectGroupPermissionPermission = "write"
)

// Defines values for ProjectUserPermissionPermission.
const (
	ProjectUserPermissionPermissionAdmin      ProjectUserPermissionPermission = "admin"
	ProjectUserPermissionPermissionCreateRepo ProjectUserPermissionPermission = "create-repo"
	ProjectUserPermissionPermissionNone       ProjectUserPermissionPermission = "none"
	ProjectUserPermissionPermissionRead       ProjectUserPermissionPermission = "read"
	ProjectUserPermissionPermissionWrite      ProjectUserPermissionPermission = "write"
)

// Defines values for PullrequestRenderedDescriptionMarkup.
const (
	PullrequestRenderedDescriptionMarkupCreole    PullrequestRenderedDescriptionMarkup = "creole"
	PullrequestRenderedDescriptionMarkupMarkdown  PullrequestRenderedDescriptionMarkup = "markdown"
	PullrequestRenderedDescriptionMarkupPlaintext PullrequestRenderedDescriptionMarkup = "plaintext"
)

// Defines values for PullrequestRenderedReasonMarkup.
const (
	PullrequestRenderedReasonMarkupCreole    PullrequestRenderedReasonMarkup = "creole"
	PullrequestRenderedReasonMarkupMarkdown  PullrequestRenderedReasonMarkup = "markdown"
	PullrequestRenderedReasonMarkupPlaintext PullrequestRenderedReasonMarkup = "plaintext"
)

// Defines values for PullrequestRenderedTitleMarkup.
const (
	PullrequestRenderedTitleMarkupCreole    PullrequestRenderedTitleMarkup = "creole"
	PullrequestRenderedTitleMarkupMarkdown  PullrequestRenderedTitleMarkup = "markdown"
	PullrequestRenderedTitleMarkupPlaintext PullrequestRenderedTitleMarkup = "plaintext"
)

// Defines values for PullrequestState.
const (
	PullrequestStateDECLINED   PullrequestState = "DECLINED"
	PullrequestStateMERGED     PullrequestState = "MERGED"
	PullrequestStateOPEN       PullrequestState = "OPEN"
	PullrequestStateSUPERSEDED PullrequestState = "SUPERSEDED"
)

// Defines values for PullrequestSummaryMarkup.
const (
	PullrequestSummaryMarkupCreole    PullrequestSummaryMarkup = "creole"
	PullrequestSummaryMarkupMarkdown  PullrequestSummaryMarkup = "markdown"
	PullrequestSummaryMarkupPlaintext PullrequestSummaryMarkup = "plaintext"
)

// Defines values for PullrequestCommentContentMarkup.
const (
	PullrequestCommentContentMarkupCreole    PullrequestCommentContentMarkup = "creole"
	PullrequestCommentContentMarkupMarkdown  PullrequestCommentContentMarkup = "markdown"
	PullrequestCommentContentMarkupPlaintext PullrequestCommentContentMarkup = "plaintext"
)

// Defines values for PullrequestCommentTaskContentMarkup.
const (
	PullrequestCommentTaskContentMarkupCreole    PullrequestCommentTaskContentMarkup = "creole"
	PullrequestCommentTaskContentMarkupMarkdown  PullrequestCommentTaskContentMarkup = "markdown"
	PullrequestCommentTaskContentMarkupPlaintext PullrequestCommentTaskContentMarkup = "plaintext"
)

// Defines values for PullrequestCommentTaskState.
const (
	PullrequestCommentTaskStateRESOLVED   PullrequestCommentTaskState = "RESOLVED"
	PullrequestCommentTaskStateUNRESOLVED PullrequestCommentTaskState = "UNRESOLVED"
)

// Defines values for PullrequestEndpointBranchMergeStrategies.
const (
	PullrequestEndpointBranchMergeStrategiesFastForward       PullrequestEndpointBranchMergeStrategies = "fast_forward"
	PullrequestEndpointBranchMergeStrategiesMergeCommit       PullrequestEndpointBranchMergeStrategies = "merge_commit"
	PullrequestEndpointBranchMergeStrategiesRebaseFastForward PullrequestEndpointBranchMergeStrategies = "rebase_fast_forward"
	PullrequestEndpointBranchMergeStrategiesRebaseMerge       PullrequestEndpointBranchMergeStrategies = "rebase_merge"
	PullrequestEndpointBranchMergeStrategiesSquash            PullrequestEndpointBranchMergeStrategies = "squash"
	PullrequestEndpointBranchMergeStrategiesSquashFastForward PullrequestEndpointBranchMergeStrategies = "squash_fast_forward"
)

// Defines values for PullrequestMergeParametersMergeStrategy.
const (
	FastForward       PullrequestMergeParametersMergeStrategy = "fast_forward"
	MergeCommit       PullrequestMergeParametersMergeStrategy = "merge_commit"
	RebaseFastForward PullrequestMergeParametersMergeStrategy = "rebase_fast_forward"
	RebaseMerge       PullrequestMergeParametersMergeStrategy = "rebase_merge"
	Squash            PullrequestMergeParametersMergeStrategy = "squash"
	SquashFastForward PullrequestMergeParametersMergeStrategy = "squash_fast_forward"
)

// Defines values for PullrequestTaskContentMarkup.
const (
	PullrequestTaskContentMarkupCreole    PullrequestTaskContentMarkup = "creole"
	PullrequestTaskContentMarkupMarkdown  PullrequestTaskContentMarkup = "markdown"
	PullrequestTaskContentMarkupPlaintext PullrequestTaskContentMarkup = "plaintext"
)

// Defines values for PullrequestTaskState.
const (
	PullrequestTaskStateRESOLVED   PullrequestTaskState = "RESOLVED"
	PullrequestTaskStateUNRESOLVED PullrequestTaskState = "UNRESOLVED"
)

// Defines values for PullrequestTaskUpdateState.
const (
	PullrequestTaskUpdateStateRESOLVED   PullrequestTaskUpdateState = "RESOLVED"
	PullrequestTaskUpdateStateUNRESOLVED PullrequestTaskUpdateState = "UNRESOLVED"
)

// Defines values for ReportReportType.
const (
	ReportReportTypeBUG      ReportReportType = "BUG"
	ReportReportTypeCOVERAGE ReportReportType = "COVERAGE"
	ReportReportTypeSECURITY ReportReportType = "SECURITY"
	ReportReportTypeTEST     ReportReportType = "TEST"
)

// Defines values for ReportResult.
const (
	ReportResultFAILED  ReportResult = "FAILED"
	ReportResultPASSED  ReportResult = "PASSED"
	ReportResultPENDING ReportResult = "PENDING"
)

// Defines values for ReportAnnotationAnnotationType.
const (
	ReportAnnotationAnnotationTypeBUG           ReportAnnotationAnnotationType = "BUG"
	ReportAnnotationAnnotationTypeCODESMELL     ReportAnnotationAnnotationType = "CODE_SMELL"
	ReportAnnotationAnnotationTypeVULNERABILITY ReportAnnotationAnnotationType = "VULNERABILITY"
)

// Defines values for ReportAnnotationResult.
const (
	FAILED  ReportAnnotationResult = "FAILED"
	IGNORED ReportAnnotationResult = "IGNORED"
	PASSED  ReportAnnotationResult = "PASSED"
	SKIPPED ReportAnnotationResult = "SKIPPED"
)

// Defines values for ReportAnnotationSeverity.
const (
	CRITICAL ReportAnnotationSeverity = "CRITICAL"
	HIGH     ReportAnnotationSeverity = "HIGH"
	LOW      ReportAnnotationSeverity = "LOW"
	MEDIUM   ReportAnnotationSeverity = "MEDIUM"
)

// Defines values for ReportDataType.
const (
	BOOLEAN    ReportDataType = "BOOLEAN"
	DATE       ReportDataType = "DATE"
	DURATION   ReportDataType = "DURATION"
	LINK       ReportDataType = "LINK"
	NUMBER     ReportDataType = "NUMBER"
	PERCENTAGE ReportDataType = "PERCENTAGE"
	TEXT       ReportDataType = "TEXT"
)

// Defines values for RepositoryForkPolicy.
const (
	RepositoryForkPolicyAllowForks    RepositoryForkPolicy = "allow_forks"
	RepositoryForkPolicyNoForks       RepositoryForkPolicy = "no_forks"
	RepositoryForkPolicyNoPublicForks RepositoryForkPolicy = "no_public_forks"
)

// Defines values for RepositoryScm.
const (
	RepositoryScmGit RepositoryScm = "git"
)

// Defines values for RepositoryGroupPermissionPermission.
const (
	RepositoryGroupPermissionPermissionAdmin RepositoryGroupPermissionPermission = "admin"
	RepositoryGroupPermissionPermissionNone  RepositoryGroupPermissionPermission = "none"
	RepositoryGroupPermissionPermissionRead  RepositoryGroupPermissionPermission = "read"
	RepositoryGroupPermissionPermissionWrite RepositoryGroupPermissionPermission = "write"
)

// Defines values for RepositoryPermissionPermission.
const (
	RepositoryPermissionPermissionAdmin RepositoryPermissionPermission = "admin"
	RepositoryPermissionPermissionNone  RepositoryPermissionPermission = "none"
	RepositoryPermissionPermissionRead  RepositoryPermissionPermission = "read"
	RepositoryPermissionPermissionWrite RepositoryPermissionPermission = "write"
)

// Defines values for RepositoryUserPermissionPermission.
const (
	RepositoryUserPermissionPermissionAdmin RepositoryUserPermissionPermission = "admin"
	RepositoryUserPermissionPermissionNone  RepositoryUserPermissionPermission = "none"
	RepositoryUserPermissionPermissionRead  RepositoryUserPermissionPermission = "read"
	RepositoryUserPermissionPermissionWrite RepositoryUserPermissionPermission = "write"
)

// Defines values for SnippetScm.
const (
	SnippetScmGit SnippetScm = "git"
)

// Defines values for SnippetCommitSummaryMarkup.
const (
	SnippetCommitSummaryMarkupCreole    SnippetCommitSummaryMarkup = "creole"
	SnippetCommitSummaryMarkupMarkdown  SnippetCommitSummaryMarkup = "markdown"
	SnippetCommitSummaryMarkupPlaintext SnippetCommitSummaryMarkup = "plaintext"
)

// Defines values for TaskContentMarkup.
const (
	TaskContentMarkupCreole    TaskContentMarkup = "creole"
	TaskContentMarkupMarkdown  TaskContentMarkup = "markdown"
	TaskContentMarkupPlaintext TaskContentMarkup = "plaintext"
)

// Defines values for TaskState.
const (
	TaskStateRESOLVED   TaskState = "RESOLVED"
	TaskStateUNRESOLVED TaskState = "UNRESOLVED"
)

// Defines values for WebhookSubscriptionEvents.
const (
	WebhookSubscriptionEventsIssueCommentCreated              WebhookSubscriptionEvents = "issue:comment_created"
	WebhookSubscriptionEventsIssueCreated                     WebhookSubscriptionEvents = "issue:created"
	WebhookSubscriptionEventsIssueUpdated                     WebhookSubscriptionEvents = "issue:updated"
	WebhookSubscriptionEventsProjectUpdated                   WebhookSubscriptionEvents = "project:updated"
	WebhookSubscriptionEventsPullrequestApproved              WebhookSubscriptionEvents = "pullrequest:approved"
	WebhookSubscriptionEventsPullrequestChangesRequestCreated WebhookSubscriptionEvents = "pullrequest:changes_request_created"
	WebhookSubscriptionEventsPullrequestChangesRequestRemoved WebhookSubscriptionEvents = "pullrequest:changes_request_removed"
	WebhookSubscriptionEventsPullrequestCommentCreated        WebhookSubscriptionEvents = "pullrequest:comment_created"
	WebhookSubscriptionEventsPullrequestCommentDeleted        WebhookSubscriptionEvents = "pullrequest:comment_deleted"
	WebhookSubscriptionEventsPullrequestCommentReopened       WebhookSubscriptionEvents = "pullrequest:comment_reopened"
	WebhookSubscriptionEventsPullrequestCommentResolved       WebhookSubscriptionEvents = "pullrequest:comment_resolved"
	WebhookSubscriptionEventsPullrequestCommentUpdated        WebhookSubscriptionEvents = "pullrequest:comment_updated"
	WebhookSubscriptionEventsPullrequestCreated               WebhookSubscriptionEvents = "pullrequest:created"
	WebhookSubscriptionEventsPullrequestFulfilled             WebhookSubscriptionEvents = "pullrequest:fulfilled"
	WebhookSubscriptionEventsPullrequestPush                  WebhookSubscriptionEvents = "pullrequest:push"
	WebhookSubscriptionEventsPullrequestRejected              WebhookSubscriptionEvents = "pullrequest:rejected"
	WebhookSubscriptionEventsPullrequestUnapproved            WebhookSubscriptionEvents = "pullrequest:unapproved"
	WebhookSubscriptionEventsPullrequestUpdated               WebhookSubscriptionEvents = "pullrequest:updated"
	WebhookSubscriptionEventsRepoCommitCommentCreated         WebhookSubscriptionEvents = "repo:commit_comment_created"
	WebhookSubscriptionEventsRepoCommitStatusCreated          WebhookSubscriptionEvents = "repo:commit_status_created"
	WebhookSubscriptionEventsRepoCommitStatusUpdated          WebhookSubscriptionEvents = "repo:commit_status_updated"
	WebhookSubscriptionEventsRepoCreated                      WebhookSubscriptionEvents = "repo:created"
	WebhookSubscriptionEventsRepoDeleted                      WebhookSubscriptionEvents = "repo:deleted"
	WebhookSubscriptionEventsRepoFork                         WebhookSubscriptionEvents = "repo:fork"
	WebhookSubscriptionEventsRepoImported                     WebhookSubscriptionEvents = "repo:imported"
	WebhookSubscriptionEventsRepoPush                         WebhookSubscriptionEvents = "repo:push"
	WebhookSubscriptionEventsRepoTransfer                     WebhookSubscriptionEvents = "repo:transfer"
	WebhookSubscriptionEventsRepoUpdated                      WebhookSubscriptionEvents = "repo:updated"
)

// Defines values for WebhookSubscriptionSubjectType.
const (
	WebhookSubscriptionSubjectTypeRepository WebhookSubscriptionSubjectType = "repository"
	WebhookSubscriptionSubjectTypeWorkspace  WebhookSubscriptionSubjectType = "workspace"
)

// Defines values for WorkspaceForkingMode.
const (
	WorkspaceForkingModeAllowForks   WorkspaceForkingMode = "allow_forks"
	WorkspaceForkingModeInternalOnly WorkspaceForkingMode = "internal_only"
)

// Defines values for GetPullrequestsSelectedUserParamsState.
const (
	GetPullrequestsSelectedUserParamsStateDECLINED   GetPullrequestsSelectedUserParamsState = "DECLINED"
	GetPullrequestsSelectedUserParamsStateMERGED     GetPullrequestsSelectedUserParamsState = "MERGED"
	GetPullrequestsSelectedUserParamsStateOPEN       GetPullrequestsSelectedUserParamsState = "OPEN"
	GetPullrequestsSelectedUserParamsStateSUPERSEDED GetPullrequestsSelectedUserParamsState = "SUPERSEDED"
)

// Defines values for GetRepositoriesParamsRole.
const (
	GetRepositoriesParamsRoleAdmin       GetRepositoriesParamsRole = "admin"
	GetRepositoriesParamsRoleContributor GetRepositoriesParamsRole = "contributor"
	GetRepositoriesParamsRoleMember      GetRepositoriesParamsRole = "member"
	GetRepositoriesParamsRoleOwner       GetRepositoriesParamsRole = "owner"
)

// Defines values for GetRepositoriesWorkspaceParamsRole.
const (
	GetRepositoriesWorkspaceParamsRoleAdmin       GetRepositoriesWorkspaceParamsRole = "admin"
	GetRepositoriesWorkspaceParamsRoleContributor GetRepositoriesWorkspaceParamsRole = "contributor"
	GetRepositoriesWorkspaceParamsRoleMember      GetRepositoriesWorkspaceParamsRole = "member"
	GetRepositoriesWorkspaceParamsRoleOwner       GetRepositoriesWorkspaceParamsRole = "owner"
)

// Defines values for GetRepositoriesWorkspaceRepoSlugForksParamsRole.
const (
	GetRepositoriesWorkspaceRepoSlugForksParamsRoleAdmin       GetRepositoriesWorkspaceRepoSlugForksParamsRole = "admin"
	GetRepositoriesWorkspaceRepoSlugForksParamsRoleContributor GetRepositoriesWorkspaceRepoSlugForksParamsRole = "contributor"
	GetRepositoriesWorkspaceRepoSlugForksParamsRoleMember      GetRepositoriesWorkspaceRepoSlugForksParamsRole = "member"
	GetRepositoriesWorkspaceRepoSlugForksParamsRoleOwner       GetRepositoriesWorkspaceRepoSlugForksParamsRole = "owner"
)

// Defines values for GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState.
const (
	GetRepositoriesWorkspaceRepoSlugPullrequestsParamsStateDECLINED   GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState = "DECLINED"
	GetRepositoriesWorkspaceRepoSlugPullrequestsParamsStateMERGED     GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState = "MERGED"
	GetRepositoriesWorkspaceRepoSlugPullrequestsParamsStateOPEN       GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState = "OPEN"
	GetRepositoriesWorkspaceRepoSlugPullrequestsParamsStateSUPERSEDED GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState = "SUPERSEDED"
)

// Defines values for GetRepositoriesWorkspaceRepoSlugSrcParamsFormat.
const (
	GetRepositoriesWorkspaceRepoSlugSrcParamsFormatMeta GetRepositoriesWorkspaceRepoSlugSrcParamsFormat = "meta"
)

// Defines values for GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat.
const (
	GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormatMeta     GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat = "meta"
	GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormatRendered GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat = "rendered"
)

// Defines values for GetSnippetsParamsRole.
const (
	GetSnippetsParamsRoleContributor GetSnippetsParamsRole = "contributor"
	GetSnippetsParamsRoleMember      GetSnippetsParamsRole = "member"
	GetSnippetsParamsRoleOwner       GetSnippetsParamsRole = "owner"
)

// Defines values for GetSnippetsWorkspaceParamsRole.
const (
	GetSnippetsWorkspaceParamsRoleContributor GetSnippetsWorkspaceParamsRole = "contributor"
	GetSnippetsWorkspaceParamsRoleMember      GetSnippetsWorkspaceParamsRole = "member"
	GetSnippetsWorkspaceParamsRoleOwner       GetSnippetsWorkspaceParamsRole = "owner"
)

// Defines values for GetWorkspacesParamsRole.
const (
	Collaborator GetWorkspacesParamsRole = "collaborator"
	Member       GetWorkspacesParamsRole = "member"
	Owner        GetWorkspacesParamsRole = "owner"
)

// Defines values for GetWorkspacesWorkspacePullrequestsSelectedUserParamsState.
const (
	GetWorkspacesWorkspacePullrequestsSelectedUserParamsStateDECLINED   GetWorkspacesWorkspacePullrequestsSelectedUserParamsState = "DECLINED"
	GetWorkspacesWorkspacePullrequestsSelectedUserParamsStateMERGED     GetWorkspacesWorkspacePullrequestsSelectedUserParamsState = "MERGED"
	GetWorkspacesWorkspacePullrequestsSelectedUserParamsStateOPEN       GetWorkspacesWorkspacePullrequestsSelectedUserParamsState = "OPEN"
	GetWorkspacesWorkspacePullrequestsSelectedUserParamsStateSUPERSEDED GetWorkspacesWorkspacePullrequestsSelectedUserParamsState = "SUPERSEDED"
)

// Account defines model for account.
type Account struct {
	CreatedOn   *time.Time `json:"created_on,omitempty"`
	DisplayName *string    `json:"display_name,omitempty"`

	// Links Links related to an Account.
	Links                *AccountLinks          `json:"links,omitempty"`
	Type                 string                 `json:"type"`
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// AccountLinks Links related to an Account.
type AccountLinks struct {
	// Avatar A link to a resource related to this object.
	Avatar               *Link                  `json:"avatar,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ApplicationProperty An application property. It is a caller defined JSON object that Bitbucket will store and return.
// The `_attributes` field at its top level can be used to control who is allowed to read and update the property.
// The keys of the JSON object must match an allowed pattern. For details,
// see [Application properties](/cloud/bitbucket/application-properties/).
type ApplicationProperty struct {
	Attributes           *[]ApplicationPropertyAttributes `json:"_attributes,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// ApplicationPropertyAttributes defines model for ApplicationProperty.Attributes.
type ApplicationPropertyAttributes string

// Author defines model for author.
type Author struct {
	// Raw The raw author value from the repository. This may be the only value available if the author does not match a user in Bitbucket.
	Raw                  *string                `json:"raw,omitempty"`
	Type                 string                 `json:"type"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BaseCommit defines model for base_commit.
type BaseCommit struct {
	Author  *Author       `json:"author,omitempty"`
	Date    *time.Time    `json:"date,omitempty"`
	Hash    *string       `json:"hash,omitempty"`
	Message *string       `json:"message,omitempty"`
	Parents *[]BaseCommit `json:"parents,omitempty"`
	Summary *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *BaseCommitSummaryMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"summary,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BaseCommitSummaryMarkup The type of markup language the raw content is to be interpreted in.
type BaseCommitSummaryMarkup string

// BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchema defines model for bitbucket.apps.permissions.serializers.ProjectPermissionUpdateSchema.
type BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchema struct {
	Permission BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission `json:"permission"`
}

// BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission defines model for BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchema.Permission.
type BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchemaPermission string

// BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchema defines model for bitbucket.apps.permissions.serializers.RepoPermissionUpdateSchema.
type BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchema struct {
	Permission BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission `json:"permission"`
}

// BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission defines model for BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchema.Permission.
type BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchemaPermission string

// Branch defines model for branch.
type Branch struct {
	// DefaultMergeStrategy The default merge strategy for pull requests targeting this branch.
	DefaultMergeStrategy *string `json:"default_merge_strategy,omitempty"`
	Links                *struct {
		// Commits A link to a resource related to this object.
		Commits *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commits,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`

	// MergeStrategies Available merge strategies for pull requests targeting this branch.
	MergeStrategies *[]BranchMergeStrategies `json:"merge_strategies,omitempty"`

	// Name The name of the ref.
	Name                 *string                `json:"name,omitempty"`
	Target               *Commit                `json:"target,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BranchMergeStrategies defines model for Branch.MergeStrategies.
type BranchMergeStrategies string

// BranchingModel defines model for branching_model.
type BranchingModel struct {
	// BranchTypes The active branch types.
	BranchTypes *[]struct {
		// Kind The kind of branch.
		Kind BranchingModelBranchTypesKind `json:"kind"`

		// Prefix The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
		Prefix string `json:"prefix"`
	} `json:"branch_types,omitempty"`
	Development *struct {
		Branch *Branch `json:"branch,omitempty"`

		// Name Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"development,omitempty"`
	Production *struct {
		Branch *Branch `json:"branch,omitempty"`

		// Name Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"production,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BranchingModelBranchTypesKind The kind of branch.
type BranchingModelBranchTypesKind string

// BranchingModelSettings defines model for branching_model_settings.
type BranchingModelSettings struct {
	BranchTypes *[]struct {
		// Enabled Whether the branch type is enabled or not. A disabled branch type may contain an invalid `prefix`.
		Enabled *bool `json:"enabled,omitempty"`

		// Kind The kind of the branch type.
		Kind BranchingModelSettingsBranchTypesKind `json:"kind"`

		// Prefix The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The `prefix` of an enabled branch type must be a valid branch prefix.Additionally, it cannot be blank, empty or `null`. The `prefix` for a disabled branch type can be empty or invalid.
		Prefix *string `json:"prefix,omitempty"`
	} `json:"branch_types,omitempty"`
	Development *struct {
		// IsValid Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
		IsValid *bool `json:"is_valid,omitempty"`

		// Name The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.
		Name *string `json:"name,omitempty"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.
		UseMainbranch *bool `json:"use_mainbranch,omitempty"`
	} `json:"development,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Production *struct {
		// Enabled Indicates if branch is enabled or not.
		Enabled *bool `json:"enabled,omitempty"`

		// IsValid Indicates if the configured branch is valid, that is, if the configured branch actually exists currently. Is always `true` when `use_mainbranch` is `true` (even if the main branch does not exist). This field is read-only. This field is ignored when updating/creating settings.
		IsValid *bool `json:"is_valid,omitempty"`

		// Name The configured branch. It must be `null` when `use_mainbranch` is `true`. Otherwise it must be a non-empty value. It is possible for the configured branch to not exist (e.g. it was deleted after the settings are set). In this case `is_valid` will be `false`. The branch must exist when updating/setting the `name` or an error will occur.
		Name *string `json:"name,omitempty"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`). When `true` the `name` must be `null` or not provided. When `false` the `name` must contain a non-empty branch name.
		UseMainbranch *bool `json:"use_mainbranch,omitempty"`
	} `json:"production,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BranchingModelSettingsBranchTypesKind The kind of the branch type.
type BranchingModelSettingsBranchTypesKind string

// Branchrestriction defines model for branchrestriction.
type Branchrestriction struct {
	// BranchMatchKind Indicates how the restriction is matched against a branch. The default is `glob`.
	BranchMatchKind BranchrestrictionBranchMatchKind `json:"branch_match_kind"`

	// BranchType Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository.
	BranchType *BranchrestrictionBranchType `json:"branch_type,omitempty"`
	Groups     *[]Group                     `json:"groups,omitempty"`

	// Id The branch restriction status' id.
	Id *int `json:"id,omitempty"`

	// Kind The type of restriction that is being applied.
	Kind  BranchrestrictionKind `json:"kind"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`

	// Pattern Apply the restriction to branches that match this pattern. Active when `branch_match_kind` is `glob`. Will be empty when `branch_match_kind` is `branching_model`.
	Pattern string     `json:"pattern"`
	Type    string     `json:"type"`
	Users   *[]Account `json:"users,omitempty"`

	// Value Value with kind-specific semantics:
	//
	// * `require_approvals_to_merge` uses it to require a minimum number of approvals on a PR.
	//
	// * `require_default_reviewer_approvals_to_merge` uses it to require a minimum number of approvals from default reviewers on a PR.
	//
	// * `require_passing_builds_to_merge` uses it to require a minimum number of passing builds.
	//
	// * `require_commits_behind` uses it to require the current branch is up to a maximum number of commits behind it destination.
	Value                *int                   `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// BranchrestrictionBranchMatchKind Indicates how the restriction is matched against a branch. The default is `glob`.
type BranchrestrictionBranchMatchKind string

// BranchrestrictionBranchType Apply the restriction to branches of this type. Active when `branch_match_kind` is `branching_model`. The branch type will be calculated using the branching model configured for the repository.
type BranchrestrictionBranchType string

// BranchrestrictionKind The type of restriction that is being applied.
type BranchrestrictionKind string

// Comment defines model for comment.
type Comment struct {
	Content *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *CommentContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Deleted   *bool      `json:"deleted,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Inline    *struct {
		// From The comment's anchor line in the old version of the file.
		From *int `json:"from,omitempty"`

		// Path The path of the file this comment is anchored to.
		Path string `json:"path"`

		// To The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.
		To *int `json:"to,omitempty"`
	} `json:"inline,omitempty"`
	Links *struct {
		// Code A link to a resource related to this object.
		Code *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"code,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Parent               *Comment               `json:"parent,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommentContentMarkup The type of markup language the raw content is to be interpreted in.
type CommentContentMarkup string

// CommentResolution The resolution object for a Comment.
type CommentResolution struct {
	// CreatedOn The ISO8601 timestamp the resolution was created.
	CreatedOn            *time.Time             `json:"created_on,omitempty"`
	Type                 string                 `json:"type"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Commit defines model for commit.
type Commit struct {
	Author       *Author        `json:"author,omitempty"`
	Date         *time.Time     `json:"date,omitempty"`
	Hash         *string        `json:"hash,omitempty"`
	Message      *string        `json:"message,omitempty"`
	Parents      *[]BaseCommit  `json:"parents,omitempty"`
	Participants *[]Participant `json:"participants,omitempty"`
	Repository   *Repository    `json:"repository,omitempty"`
	Summary      *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *CommitSummaryMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"summary,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommitSummaryMarkup The type of markup language the raw content is to be interpreted in.
type CommitSummaryMarkup string

// CommitComment defines model for commit_comment.
type CommitComment struct {
	Commit  *Commit `json:"commit,omitempty"`
	Content *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *CommitCommentContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Deleted   *bool      `json:"deleted,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Inline    *struct {
		// From The comment's anchor line in the old version of the file.
		From *int `json:"from,omitempty"`

		// Path The path of the file this comment is anchored to.
		Path string `json:"path"`

		// To The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.
		To *int `json:"to,omitempty"`
	} `json:"inline,omitempty"`
	Links *struct {
		// Code A link to a resource related to this object.
		Code *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"code,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Parent               *Comment               `json:"parent,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommitCommentContentMarkup The type of markup language the raw content is to be interpreted in.
type CommitCommentContentMarkup string

// CommitFile A file object, representing a file at a commit in a repository
type CommitFile struct {
	Attributes *CommitFileAttributes `json:"attributes,omitempty"`
	Commit     *Commit               `json:"commit,omitempty"`

	// EscapedPath The escaped version of the path as it appears in a diff. If the path does not require escaping this will be the same as path.
	EscapedPath *string `json:"escaped_path,omitempty"`

	// Path The path in the repository
	Path                 *string                `json:"path,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommitFileAttributes defines model for CommitFile.Attributes.
type CommitFileAttributes string

// Commitstatus defines model for commitstatus.
type Commitstatus struct {
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Description A description of the build (e.g. "Unit tests in Bamboo")
	Description *string `json:"description,omitempty"`

	// Key An identifier for the status that's unique to
	//         its type (current "build" is the only supported type) and the vendor,
	//         e.g. BB-DEPLOY
	Key   *string `json:"key,omitempty"`
	Links *struct {
		// Commit A link to a resource related to this object.
		Commit *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commit,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`

	// Name An identifier for the build itself, e.g. BB-DEPLOY-1
	Name *string `json:"name,omitempty"`

	// Refname
	// The name of the ref that pointed to this commit at the time the status
	// object was created. Note that this the ref may since have moved off of
	// the commit. This optional field can be useful for build systems whose
	// build triggers and configuration are branch-dependent (e.g. a Pipeline
	// build).
	// It is legitimate for this field to not be set, or even apply (e.g. a
	// static linting job).
	Refname *string `json:"refname,omitempty"`

	// State Provides some indication of the status of this commit
	State     *CommitstatusState `json:"state,omitempty"`
	Type      string             `json:"type"`
	UpdatedOn *time.Time         `json:"updated_on,omitempty"`

	// Url A URL linking back to the vendor or build system, for providing more information about whatever process produced this status. Accepts context variables `repository` and `commit` that Bitbucket will evaluate at runtime whenever at runtime. For example, one could use https://foo.com/builds/{repository.full_name} which Bitbucket will turn into https://foo.com/builds/foo/bar at render time.
	Url *string `json:"url,omitempty"`

	// Uuid The commit status' id.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CommitstatusState Provides some indication of the status of this commit
type CommitstatusState string

// Component defines model for component.
type Component struct {
	Id    *int `json:"id,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DefaultReviewerAndType Object containing a user that is a default reviewer and the type of reviewer
type DefaultReviewerAndType struct {
	ReviewerType         *string                `json:"reviewer_type,omitempty"`
	Type                 string                 `json:"type"`
	User                 *User                  `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeployKey defines model for deploy_key.
type DeployKey struct {
	AddedOn *time.Time `json:"added_on,omitempty"`

	// Comment The comment parsed from the deploy key (if present)
	Comment *string `json:"comment,omitempty"`

	// Key The deploy key value.
	Key *string `json:"key,omitempty"`

	// Label The user-defined label for the deploy key
	Label    *string    `json:"label,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links    *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Owner                *Account               `json:"owner,omitempty"`
	Repository           *Repository            `json:"repository,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Deployment defines model for deployment.
type Deployment struct {
	Environment *DeploymentEnvironment `json:"environment,omitempty"`
	Release     *DeploymentRelease     `json:"release,omitempty"`
	State       *DeploymentState       `json:"state,omitempty"`
	Type        string                 `json:"type"`

	// Uuid The UUID identifying the deployment.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeploymentEnvironment defines model for deployment_environment.
type DeploymentEnvironment struct {
	// Name The name of the environment.
	Name *string `json:"name,omitempty"`
	Type string  `json:"type"`

	// Uuid The UUID identifying the environment.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeploymentRelease defines model for deployment_release.
type DeploymentRelease struct {
	Commit *Commit `json:"commit,omitempty"`

	// CreatedOn The timestamp when the release was created.
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Name The name of the release.
	Name *string `json:"name,omitempty"`
	Type string  `json:"type"`

	// Url Link to the pipeline that produced the release.
	Url *string `json:"url,omitempty"`

	// Uuid The UUID identifying the release.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeploymentState defines model for deployment_state.
type DeploymentState struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeploymentVariable defines model for deployment_variable.
type DeploymentVariable struct {
	// Key The unique name of the variable.
	Key *string `json:"key,omitempty"`

	// Secured If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
	Secured *bool  `json:"secured,omitempty"`
	Type    string `json:"type"`

	// Uuid The UUID identifying the variable.
	Uuid *string `json:"uuid,omitempty"`

	// Value The value of the variable. If the variable is secured, this will be empty.
	Value                *string                `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Diffstat A diffstat object that includes a summary of changes made to a file between two commits.
type Diffstat struct {
	LinesAdded   *int `json:"lines_added,omitempty"`
	LinesRemoved *int `json:"lines_removed,omitempty"`

	// New A file object, representing a file at a commit in a repository
	New *CommitFile `json:"new,omitempty"`

	// Old A file object, representing a file at a commit in a repository
	Old                  *CommitFile            `json:"old,omitempty"`
	Status               *DiffstatStatus        `json:"status,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DiffstatStatus defines model for Diffstat.Status.
type DiffstatStatus string

// EffectiveRepoBranchingModel defines model for effective_repo_branching_model.
type EffectiveRepoBranchingModel struct {
	// BranchTypes The active branch types.
	BranchTypes *[]struct {
		// Kind The kind of branch.
		Kind EffectiveRepoBranchingModelBranchTypesKind `json:"kind"`

		// Prefix The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
		Prefix string `json:"prefix"`
	} `json:"branch_types,omitempty"`
	Development *struct {
		Branch *Branch `json:"branch,omitempty"`

		// Name Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"development,omitempty"`
	Production *struct {
		Branch *Branch `json:"branch,omitempty"`

		// Name Name of the target branch. Will be listed here even when the target branch does not exist. Will be `null` if targeting the main branch and the repository is empty.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"production,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EffectiveRepoBranchingModelBranchTypesKind The kind of branch.
type EffectiveRepoBranchingModelBranchTypesKind string

// Error Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.
type Error struct {
	Error *struct {
		// Data Optional structured data that is endpoint-specific.
		Data    *map[string]interface{} `json:"data,omitempty"`
		Message string                  `json:"message"`
	} `json:"error,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ExportOptions Options for issue export.
type ExportOptions struct {
	IncludeAttachments   *bool                  `json:"include_attachments,omitempty"`
	ProjectKey           *string                `json:"project_key,omitempty"`
	ProjectName          *string                `json:"project_name,omitempty"`
	SendEmail            *bool                  `json:"send_email,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Group defines model for group.
type Group struct {
	// FullSlug The concatenation of the workspace's slug and the group's slug,
	// separated with a colon (e.g. `acme:developers`)
	FullSlug *string `json:"full_slug,omitempty"`
	Links    *struct {
		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name  *string  `json:"name,omitempty"`
	Owner *Account `json:"owner,omitempty"`

	// Slug The "sluggified" version of the group's name. This contains only ASCII
	// characters and can therefore be slightly different than the name
	Slug                 *string                `json:"slug,omitempty"`
	Type                 string                 `json:"type"`
	Workspace            *Workspace             `json:"workspace,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// HookEvent An event, associated with a resource or subject type.
type HookEvent struct {
	// Category The category this event belongs to.
	Category *string `json:"category,omitempty"`

	// Description More detailed description of the webhook event type.
	Description *string `json:"description,omitempty"`

	// Event The event identifier.
	Event *HookEventEvent `json:"event,omitempty"`

	// Label Summary of the webhook event type.
	Label *string `json:"label,omitempty"`
}

// HookEventEvent The event identifier.
type HookEventEvent string

// Issue defines model for issue.
type Issue struct {
	Assignee  *Account   `json:"assignee,omitempty"`
	Component *Component `json:"component,omitempty"`
	Content   *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *IssueContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	EditedOn  *time.Time `json:"edited_on,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Kind      *IssueKind `json:"kind,omitempty"`
	Links     *struct {
		// Attachments A link to a resource related to this object.
		Attachments *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"attachments,omitempty"`

		// Comments A link to a resource related to this object.
		Comments *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"comments,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`

		// Vote A link to a resource related to this object.
		Vote *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"vote,omitempty"`

		// Watch A link to a resource related to this object.
		Watch *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"watch,omitempty"`
	} `json:"links,omitempty"`
	Milestone            *Milestone             `json:"milestone,omitempty"`
	Priority             *IssuePriority         `json:"priority,omitempty"`
	Reporter             *Account               `json:"reporter,omitempty"`
	Repository           *Repository            `json:"repository,omitempty"`
	State                *IssueState            `json:"state,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	Version              *Version               `json:"version,omitempty"`
	Votes                *int                   `json:"votes,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IssueContentMarkup The type of markup language the raw content is to be interpreted in.
type IssueContentMarkup string

// IssueKind defines model for Issue.Kind.
type IssueKind string

// IssuePriority defines model for Issue.Priority.
type IssuePriority string

// IssueState defines model for Issue.State.
type IssueState string

// IssueAttachment defines model for issue_attachment.
type IssueAttachment struct {
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IssueChange An issue change.
type IssueChange struct {
	Changes *struct {
		Assignee *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"assignee,omitempty"`
		Component *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"component,omitempty"`
		Content *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"content,omitempty"`
		Kind *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"kind,omitempty"`
		Milestone *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"milestone,omitempty"`
		Priority *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"priority,omitempty"`
		State *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"state,omitempty"`
		Title *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"title,omitempty"`
		Version *struct {
			New *string `json:"new,omitempty"`
			Old *string `json:"old,omitempty"`
		} `json:"version,omitempty"`
	} `json:"changes,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Issue     *Issue     `json:"issue,omitempty"`
	Links     *struct {
		// Issue A link to a resource related to this object.
		Issue *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"issue,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Message *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *IssueChangeMessageMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"message,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Type                 string                 `json:"type"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IssueChangeMessageMarkup The type of markup language the raw content is to be interpreted in.
type IssueChangeMessageMarkup string

// IssueComment defines model for issue_comment.
type IssueComment struct {
	Content *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *IssueCommentContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Deleted   *bool      `json:"deleted,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Inline    *struct {
		// From The comment's anchor line in the old version of the file.
		From *int `json:"from,omitempty"`

		// Path The path of the file this comment is anchored to.
		Path string `json:"path"`

		// To The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.
		To *int `json:"to,omitempty"`
	} `json:"inline,omitempty"`
	Issue *Issue `json:"issue,omitempty"`
	Links *struct {
		// Code A link to a resource related to this object.
		Code *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"code,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Parent               *Comment               `json:"parent,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// IssueCommentContentMarkup The type of markup language the raw content is to be interpreted in.
type IssueCommentContentMarkup string

// IssueJobStatus The status of an import or export job
type IssueJobStatus struct {
	// Count The total number of issues already imported/exported
	Count *int `json:"count,omitempty"`

	// Pct The percentage of issues already imported/exported
	Pct *float32 `json:"pct,omitempty"`

	// Phase The phase of the import/export job
	Phase *string `json:"phase,omitempty"`

	// Status The status of the import/export job
	Status *IssueJobStatusStatus `json:"status,omitempty"`

	// Total The total number of issues being imported/exported
	Total *int    `json:"total,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// IssueJobStatusStatus The status of the import/export job
type IssueJobStatusStatus string

// Link A link to a resource related to this object.
type Link struct {
	Href *string `json:"href,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Milestone defines model for milestone.
type Milestone struct {
	Id    *int `json:"id,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Object Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.
type Object struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PaginatedAccounts A paginated list of accounts.
type PaginatedAccounts struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int       `json:"size,omitempty"`
	Values *[]Account `json:"values,omitempty"`
}

// PaginatedAnnotations A paginated list of annotations.
type PaginatedAnnotations struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]ReportAnnotation `json:"values,omitempty"`
}

// PaginatedBranches A paginated list of branches.
type PaginatedBranches struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int      `json:"size,omitempty"`
	Values *[]Branch `json:"values,omitempty"`
}

// PaginatedBranchrestrictions A paginated list of branch restriction rules.
type PaginatedBranchrestrictions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                 `json:"size,omitempty"`
	Values *[]Branchrestriction `json:"values,omitempty"`
}

// PaginatedChangeset A paginated list of commits.
type PaginatedChangeset struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int          `json:"size,omitempty"`
	Values *[]BaseCommit `json:"values,omitempty"`
}

// PaginatedCommitComments A paginated list of commit comments.
type PaginatedCommitComments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int             `json:"size,omitempty"`
	Values *[]CommitComment `json:"values,omitempty"`
}

// PaginatedCommitstatuses A paginated list of commit status objects.
type PaginatedCommitstatuses struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int            `json:"size,omitempty"`
	Values *[]Commitstatus `json:"values,omitempty"`
}

// PaginatedComponents A paginated list of issue tracker components.
type PaginatedComponents struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]Component `json:"values,omitempty"`
}

// PaginatedDefaultReviewerAndType A paginated list of default reviewers with reviewer type.
type PaginatedDefaultReviewerAndType struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                      `json:"size,omitempty"`
	Values *[]DefaultReviewerAndType `json:"values,omitempty"`
}

// PaginatedDeployKeys A paginated list of deploy keys.
type PaginatedDeployKeys struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]DeployKey `json:"values,omitempty"`
}

// PaginatedDeploymentVariable A paged list of deployment variables.
type PaginatedDeploymentVariable struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]DeploymentVariable `json:"values,omitempty"`
}

// PaginatedDeployments A paged list of deployments
type PaginatedDeployments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]Deployment `json:"values,omitempty"`
}

// PaginatedDiffstats A paginated list of diffstats.
type PaginatedDiffstats struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 500 with 5000 being the maximum allowed value.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int        `json:"size,omitempty"`
	Values *[]Diffstat `json:"values,omitempty"`
}

// PaginatedEnvironments A paged list of environments
type PaginatedEnvironments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]DeploymentEnvironment `json:"values,omitempty"`
}

// PaginatedFiles A paginated list of commit_file objects.
type PaginatedFiles struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int          `json:"size,omitempty"`
	Values *[]CommitFile `json:"values,omitempty"`
}

// PaginatedHookEvents A paginated list of webhook types available to subscribe on.
type PaginatedHookEvents struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]HookEvent `json:"values,omitempty"`
}

// PaginatedIssueAttachments A paginated list of issue attachments.
type PaginatedIssueAttachments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int               `json:"size,omitempty"`
	Values *[]IssueAttachment `json:"values,omitempty"`
}

// PaginatedIssueComments A paginated list of issue comments.
type PaginatedIssueComments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int            `json:"size,omitempty"`
	Values *[]IssueComment `json:"values,omitempty"`
}

// PaginatedIssues A paginated list of issues.
type PaginatedIssues struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int     `json:"size,omitempty"`
	Values *[]Issue `json:"values,omitempty"`
}

// PaginatedLogEntries A paginated list of issue changes.
type PaginatedLogEntries struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int           `json:"size,omitempty"`
	Values *[]IssueChange `json:"values,omitempty"`
}

// PaginatedMilestones A paginated list of issue tracker milestones.
type PaginatedMilestones struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]Milestone `json:"values,omitempty"`
}

// PaginatedPipelineCaches A paged list of pipeline caches
type PaginatedPipelineCaches struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineCache `json:"values,omitempty"`
}

// PaginatedPipelineKnownHosts A paged list of known hosts.
type PaginatedPipelineKnownHosts struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineKnownHost `json:"values,omitempty"`
}

// PaginatedPipelineScheduleExecutions A paged list of the executions of a schedule.
type PaginatedPipelineScheduleExecutions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineScheduleExecution `json:"values,omitempty"`
}

// PaginatedPipelineSchedules A paged list of schedules
type PaginatedPipelineSchedules struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineSchedule `json:"values,omitempty"`
}

// PaginatedPipelineSteps A paged list of pipeline steps.
type PaginatedPipelineSteps struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineStep `json:"values,omitempty"`
}

// PaginatedPipelineVariables A paged list of variables.
type PaginatedPipelineVariables struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]PipelineVariable `json:"values,omitempty"`
}

// PaginatedPipelines A paged list of pipelines
type PaginatedPipelines struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]Pipeline `json:"values,omitempty"`
}

// PaginatedProjectDeployKeys A paginated list of project deploy keys.
type PaginatedProjectDeployKeys struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                `json:"size,omitempty"`
	Values *[]ProjectDeployKey `json:"values,omitempty"`
}

// PaginatedProjectGroupPermissions A paginated list of project group permissions.
type PaginatedProjectGroupPermissions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                      `json:"size,omitempty"`
	Values *[]ProjectGroupPermission `json:"values,omitempty"`
}

// PaginatedProjectUserPermissions A paginated list of project user permissions.
type PaginatedProjectUserPermissions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                     `json:"size,omitempty"`
	Values *[]ProjectUserPermission `json:"values,omitempty"`
}

// PaginatedProjects A paginated list of projects
type PaginatedProjects struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int       `json:"size,omitempty"`
	Values *[]Project `json:"values,omitempty"`
}

// PaginatedPullrequestComments A paginated list of pullrequest comments.
type PaginatedPullrequestComments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                  `json:"size,omitempty"`
	Values *[]PullrequestComment `json:"values,omitempty"`
}

// PaginatedPullrequests A paginated list of pullrequests.
type PaginatedPullrequests struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int           `json:"size,omitempty"`
	Values *[]Pullrequest `json:"values,omitempty"`
}

// PaginatedRefs A paginated list of refs.
type PaginatedRefs struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int   `json:"size,omitempty"`
	Values *[]Ref `json:"values,omitempty"`
}

// PaginatedReports A paginated list of reports.
type PaginatedReports struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size *int `json:"size,omitempty"`

	// Values The values of the current page.
	Values *[]Report `json:"values,omitempty"`
}

// PaginatedRepositories A paginated list of repositories.
type PaginatedRepositories struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int          `json:"size,omitempty"`
	Values *[]Repository `json:"values,omitempty"`
}

// PaginatedRepositoryGroupPermissions A paginated list of repository group permissions.
type PaginatedRepositoryGroupPermissions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                         `json:"size,omitempty"`
	Values *[]RepositoryGroupPermission `json:"values,omitempty"`
}

// PaginatedRepositoryPermissions A paginated list of repository permissions.
type PaginatedRepositoryPermissions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                    `json:"size,omitempty"`
	Values *[]RepositoryPermission `json:"values,omitempty"`
}

// PaginatedRepositoryUserPermissions A paginated list of repository user permissions.
type PaginatedRepositoryUserPermissions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                        `json:"size,omitempty"`
	Values *[]RepositoryUserPermission `json:"values,omitempty"`
}

// PaginatedSnippetComments A paginated list of snippet comments.
type PaginatedSnippetComments struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int              `json:"size,omitempty"`
	Values *[]SnippetComment `json:"values,omitempty"`
}

// PaginatedSnippetCommit A paginated list of snippet commits.
type PaginatedSnippetCommit struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int             `json:"size,omitempty"`
	Values *[]SnippetCommit `json:"values,omitempty"`
}

// PaginatedSnippets A paginated list of snippets.
type PaginatedSnippets struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int       `json:"size,omitempty"`
	Values *[]Snippet `json:"values,omitempty"`
}

// PaginatedSshUserKeys A paginated list of SSH keys.
type PaginatedSshUserKeys struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int             `json:"size,omitempty"`
	Values *[]SshAccountKey `json:"values,omitempty"`
}

// PaginatedTags A paginated list of tags.
type PaginatedTags struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int   `json:"size,omitempty"`
	Values *[]Tag `json:"values,omitempty"`
}

// PaginatedTasks A paginated list of tasks.
type PaginatedTasks struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                      `json:"size,omitempty"`
	Values *[]PullrequestCommentTask `json:"values,omitempty"`
}

// PaginatedTreeentries A paginated list of commit_file and/or commit_directory objects.
type PaginatedTreeentries struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]Treeentry `json:"values,omitempty"`
}

// PaginatedVersions A paginated list of issue tracker versions.
type PaginatedVersions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int       `json:"size,omitempty"`
	Values *[]Version `json:"values,omitempty"`
}

// PaginatedWebhookSubscriptions A paginated list of webhook subscriptions
type PaginatedWebhookSubscriptions struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                   `json:"size,omitempty"`
	Values *[]WebhookSubscription `json:"values,omitempty"`
}

// PaginatedWorkspaceMemberships A paginated list of workspace memberships.
type PaginatedWorkspaceMemberships struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int                   `json:"size,omitempty"`
	Values *[]WorkspaceMembership `json:"values,omitempty"`
}

// PaginatedWorkspaces A paginated list of workspaces.
type PaginatedWorkspaces struct {
	// Next Link to the next page if it exists. The last page of a collection does not have this value. Use this link to navigate the result set and refrain from constructing your own URLs.
	Next *string `json:"next,omitempty"`

	// Page Page number of the current results. This is an optional element that is not provided in all responses.
	Page *int `json:"page,omitempty"`

	// Pagelen Current number of objects on the existing page. The default value is 10 with 100 being the maximum allowed value. Individual APIs may enforce different values.
	Pagelen *int `json:"pagelen,omitempty"`

	// Previous Link to previous page if it exists. A collections first page does not have this value. This is an optional element that is not provided in all responses. Some result sets strictly support forward navigation and never provide previous links. Clients must anticipate that backwards navigation is not always available. Use this link to navigate the result set and refrain from constructing your own URLs.
	Previous *string `json:"previous,omitempty"`

	// Size Total number of objects in the response. This is an optional element that is not provided in all responses, as it can be expensive to compute.
	Size   *int         `json:"size,omitempty"`
	Values *[]Workspace `json:"values,omitempty"`
}

// Participant defines model for participant.
type Participant struct {
	Approved *bool `json:"approved,omitempty"`

	// ParticipatedOn The ISO8601 timestamp of the participant's action. For approvers, this is the time of their approval. For commenters and pull request reviewers who are not approvers, this is the time they last commented, or null if they have not commented.
	ParticipatedOn       *time.Time             `json:"participated_on,omitempty"`
	Role                 *ParticipantRole       `json:"role,omitempty"`
	State                *ParticipantState      `json:"state,omitempty"`
	Type                 string                 `json:"type"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ParticipantRole defines model for Participant.Role.
type ParticipantRole string

// ParticipantState defines model for Participant.State.
type ParticipantState string

// Pipeline defines model for pipeline.
type Pipeline struct {
	// BuildNumber The build number of the pipeline.
	BuildNumber *int `json:"build_number,omitempty"`

	// BuildSecondsUsed The number of build seconds used by this pipeline.
	BuildSecondsUsed *int `json:"build_seconds_used,omitempty"`

	// CompletedOn The timestamp when the Pipeline was completed. This is not set if the pipeline is still in progress.
	CompletedOn *time.Time `json:"completed_on,omitempty"`

	// ConfigurationSources An ordered list of sources of the pipeline configuration
	ConfigurationSources *[]PipelineConfigurationSource `json:"configuration_sources,omitempty"`

	// CreatedOn The timestamp when the pipeline was created.
	CreatedOn  *time.Time              `json:"created_on,omitempty"`
	Creator    *Account                `json:"creator,omitempty"`
	Links      *PipelinesPipelineLinks `json:"links,omitempty"`
	Repository *Repository             `json:"repository,omitempty"`
	State      *PipelineState          `json:"state,omitempty"`
	Target     *PipelineTarget         `json:"target,omitempty"`
	Trigger    *PipelineTrigger        `json:"trigger,omitempty"`
	Type       string                  `json:"type"`

	// Uuid The UUID identifying the pipeline.
	Uuid *string `json:"uuid,omitempty"`

	// Variables The variables for the pipeline.
	Variables            *[]PipelineVariable    `json:"variables,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineBuildNumber defines model for pipeline_build_number.
type PipelineBuildNumber struct {
	// Next The next number that will be used as build number.
	Next                 *int                   `json:"next,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineCache defines model for pipeline_cache.
type PipelineCache struct {
	// CreatedOn The timestamp when the cache was created.
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// FileSizeBytes The size of the file containing the archive of the cache.
	FileSizeBytes *int `json:"file_size_bytes,omitempty"`

	// KeyHash The key hash of the cache version.
	KeyHash *string `json:"key_hash,omitempty"`

	// Name The name of the cache.
	Name *string `json:"name,omitempty"`

	// Path The path where the cache contents were retrieved from.
	Path *string `json:"path,omitempty"`

	// PipelineUuid The UUID of the pipeline that created the cache.
	PipelineUuid *string `json:"pipeline_uuid,omitempty"`

	// StepUuid The uuid of the step that created the cache.
	StepUuid *string `json:"step_uuid,omitempty"`
	Type     string  `json:"type"`

	// Uuid The UUID identifying the pipeline cache.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineCacheContentUri A representation of the location of pipeline cache content.
type PipelineCacheContentUri struct {
	// Uri The uri for pipeline cache content.
	Uri *string `json:"uri,omitempty"`
}

// PipelineCommand An executable pipeline command.
type PipelineCommand struct {
	// Command The executable command.
	Command *string `json:"command,omitempty"`

	// Name The name of the command.
	Name *string `json:"name,omitempty"`
}

// PipelineConfigurationSource Information about the source of the pipeline configuration
type PipelineConfigurationSource struct {
	// Source Identifier of the configuration source
	Source string `json:"source"`

	// Uri Link to the configuration source view or its immediate content
	Uri string `json:"uri"`
}

// PipelineImage The definition of a Docker image that can be used for a Bitbucket Pipelines step execution context.
type PipelineImage struct {
	// Email The email needed to authenticate with the Docker registry. Only required when using a private Docker image.
	Email *string `json:"email,omitempty"`

	// Name The name of the image. If the image is hosted on DockerHub the short name can be used, otherwise the fully qualified name is required here.
	Name *string `json:"name,omitempty"`

	// Password The password needed to authenticate with the Docker registry. Only required when using a private Docker image.
	Password *string `json:"password,omitempty"`

	// Username The username needed to authenticate with the Docker registry. Only required when using a private Docker image.
	Username *string `json:"username,omitempty"`
}

// PipelineKnownHost defines model for pipeline_known_host.
type PipelineKnownHost struct {
	// Hostname The hostname of the known host.
	Hostname  *string               `json:"hostname,omitempty"`
	PublicKey *PipelineSshPublicKey `json:"public_key,omitempty"`
	Type      string                `json:"type"`

	// Uuid The UUID identifying the known host.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineRefTarget defines model for pipeline_ref_target.
type PipelineRefTarget struct {
	Commit *Commit `json:"commit,omitempty"`

	// RefName The name of the reference.
	RefName *string `json:"ref_name,omitempty"`

	// RefType The type of reference (branch/tag).
	RefType              *PipelineRefTargetRefType `json:"ref_type,omitempty"`
	Selector             *PipelineSelector         `json:"selector,omitempty"`
	Type                 string                    `json:"type"`
	AdditionalProperties map[string]interface{}    `json:"-"`
}

// PipelineRefTargetRefType The type of reference (branch/tag).
type PipelineRefTargetRefType string

// PipelineSchedule defines model for pipeline_schedule.
type PipelineSchedule struct {
	// CreatedOn The timestamp when the schedule was created.
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// CronPattern The cron expression with second precision (7 fields) that the schedule applies. For example, for expression: 0 0 12 * * ? *, will execute at 12pm UTC every day.
	CronPattern *string `json:"cron_pattern,omitempty"`

	// Enabled Whether the schedule is enabled.
	Enabled *bool              `json:"enabled,omitempty"`
	Target  *PipelineRefTarget `json:"target,omitempty"`
	Type    string             `json:"type"`

	// UpdatedOn The timestamp when the schedule was updated.
	UpdatedOn *time.Time `json:"updated_on,omitempty"`

	// Uuid The UUID identifying the schedule.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineScheduleExecution defines model for pipeline_schedule_execution.
type PipelineScheduleExecution struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineSchedulePostRequestBody defines model for pipeline_schedule_post_request_body.
type PipelineSchedulePostRequestBody struct {
	// CronPattern The cron expression with second precision (7 fields) that the schedule applies. For example, for expression: 0 0 12 * * ? *, will execute at 12pm UTC every day.
	CronPattern string `json:"cron_pattern"`

	// Enabled Whether the schedule is enabled.
	Enabled *bool `json:"enabled,omitempty"`

	// Target The target on which the schedule will be executed.
	Target struct {
		// RefName The name of the reference.
		RefName string `json:"ref_name"`

		// RefType The type of reference (branch only).
		RefType  PipelineSchedulePostRequestBodyTargetRefType `json:"ref_type"`
		Selector PipelineSelector                             `json:"selector"`
	} `json:"target"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineSchedulePostRequestBodyTargetRefType The type of reference (branch only).
type PipelineSchedulePostRequestBodyTargetRefType string

// PipelineSchedulePutRequestBody defines model for pipeline_schedule_put_request_body.
type PipelineSchedulePutRequestBody struct {
	// Enabled Whether the schedule is enabled.
	Enabled              *bool                  `json:"enabled,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineSelector defines model for pipeline_selector.
type PipelineSelector struct {
	// Pattern The name of the matching pipeline definition.
	Pattern *string `json:"pattern,omitempty"`

	// Type The type of selector.
	Type                 PipelineSelectorType   `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineSelectorType The type of selector.
type PipelineSelectorType string

// PipelineSshKeyPair defines model for pipeline_ssh_key_pair.
type PipelineSshKeyPair struct {
	// PrivateKey The SSH private key. This value will be empty when retrieving the SSH key pair.
	PrivateKey *string `json:"private_key,omitempty"`

	// PublicKey The SSH public key.
	PublicKey            *string                `json:"public_key,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineSshPublicKey defines model for pipeline_ssh_public_key.
type PipelineSshPublicKey struct {
	// Key The base64 encoded public key.
	Key *string `json:"key,omitempty"`

	// KeyType The type of the public key.
	KeyType *string `json:"key_type,omitempty"`

	// Md5Fingerprint The MD5 fingerprint of the public key.
	Md5Fingerprint *string `json:"md5_fingerprint,omitempty"`

	// Sha256Fingerprint The SHA-256 fingerprint of the public key.
	Sha256Fingerprint    *string                `json:"sha256_fingerprint,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineState defines model for pipeline_state.
type PipelineState struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineStep defines model for pipeline_step.
type PipelineStep struct {
	// CompletedOn The timestamp when the step execution was completed. This is not set if the step is still in progress.
	CompletedOn *time.Time `json:"completed_on,omitempty"`

	// Image The definition of a Docker image that can be used for a Bitbucket Pipelines step execution context.
	Image *PipelineImage `json:"image,omitempty"`

	// ScriptCommands The list of build commands. These commands are executed in the build container.
	ScriptCommands *[]PipelineCommand `json:"script_commands,omitempty"`

	// SetupCommands The list of commands that are executed as part of the setup phase of the build. These commands are executed outside the build container.
	SetupCommands *[]PipelineCommand `json:"setup_commands,omitempty"`

	// StartedOn The timestamp when the step execution was started. This is not set when the step hasn't executed yet.
	StartedOn *time.Time         `json:"started_on,omitempty"`
	State     *PipelineStepState `json:"state,omitempty"`
	Type      string             `json:"type"`

	// Uuid The UUID identifying the step.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineStepState defines model for pipeline_step_state.
type PipelineStepState struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineTarget defines model for pipeline_target.
type PipelineTarget struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineTrigger defines model for pipeline_trigger.
type PipelineTrigger struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineVariable defines model for pipeline_variable.
type PipelineVariable struct {
	// Key The unique name of the variable.
	Key *string `json:"key,omitempty"`

	// Secured If true, this variable will be treated as secured. The value will never be exposed in the logs or the REST API.
	Secured *bool  `json:"secured,omitempty"`
	Type    string `json:"type"`

	// Uuid The UUID identifying the variable.
	Uuid *string `json:"uuid,omitempty"`

	// Value The value of the variable. If the variable is secured, this will be empty.
	Value                *string                `json:"value,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelinesConfig defines model for pipelines_config.
type PipelinesConfig struct {
	// Enabled Whether Pipelines is enabled for the repository.
	Enabled              *bool                  `json:"enabled,omitempty"`
	Repository           *Repository            `json:"repository,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelinesLinksSectionHref defines model for pipelines_links_section_href.
type PipelinesLinksSectionHref struct {
	// Href A link
	Href                 *string                `json:"href,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelinesPipelineLinks defines model for pipelines_pipeline_links.
type PipelinesPipelineLinks struct {
	Self                 *PipelinesLinksSectionHref `json:"self,omitempty"`
	Steps                *PipelinesLinksSectionHref `json:"steps,omitempty"`
	Type                 string                     `json:"type"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// Project defines model for project.
type Project struct {
	CreatedOn   *time.Time `json:"created_on,omitempty"`
	Description *string    `json:"description,omitempty"`

	// HasPubliclyVisibleRepos
	// Indicates whether the project contains publicly visible repositories.
	// Note that private projects cannot contain public repositories.
	HasPubliclyVisibleRepos *bool `json:"has_publicly_visible_repos,omitempty"`

	// IsPrivate
	// Indicates whether the project is publicly accessible, or whether it is
	// private to the team and consequently only visible to team members.
	// Note that private projects cannot contain public repositories.
	IsPrivate *bool `json:"is_private,omitempty"`

	// Key The project's key.
	Key   *string `json:"key,omitempty"`
	Links *struct {
		// Avatar A link to a resource related to this object.
		Avatar *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"avatar,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`
	} `json:"links,omitempty"`

	// Name The name of the project.
	Name      *string    `json:"name,omitempty"`
	Owner     *Team      `json:"owner,omitempty"`
	Type      string     `json:"type"`
	UpdatedOn *time.Time `json:"updated_on,omitempty"`

	// Uuid The project's immutable id.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProjectBranchingModel defines model for project_branching_model.
type ProjectBranchingModel struct {
	// BranchTypes The active branch types.
	BranchTypes *[]struct {
		// Kind The kind of branch.
		Kind ProjectBranchingModelBranchTypesKind `json:"kind"`

		// Prefix The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
		Prefix string `json:"prefix"`
	} `json:"branch_types,omitempty"`
	Development *struct {
		// Name Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"development,omitempty"`
	Production *struct {
		// Name Name of the target branch. If inherited by a repository, it will default to the main branch if the specified branch does not exist.
		Name string `json:"name"`

		// UseMainbranch Indicates if the setting points at an explicit branch (`false`) or tracks the main branch (`true`).
		UseMainbranch bool `json:"use_mainbranch"`
	} `json:"production,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProjectBranchingModelBranchTypesKind The kind of branch.
type ProjectBranchingModelBranchTypesKind string

// ProjectDeployKey defines model for project_deploy_key.
type ProjectDeployKey struct {
	AddedOn *time.Time `json:"added_on,omitempty"`

	// Comment The comment parsed from the deploy key (if present)
	Comment   *string  `json:"comment,omitempty"`
	CreatedBy *Account `json:"created_by,omitempty"`

	// Key The deploy key value.
	Key *string `json:"key,omitempty"`

	// Label The user-defined label for the deploy key
	Label    *string    `json:"label,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links    *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Project              *Project               `json:"project,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ProjectGroupPermission A group's permission for a given project.
type ProjectGroupPermission struct {
	Group *Group `json:"group,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Permission           *ProjectGroupPermissionPermission `json:"permission,omitempty"`
	Project              *Project                          `json:"project,omitempty"`
	Type                 string                            `json:"type"`
	AdditionalProperties map[string]interface{}            `json:"-"`
}

// ProjectGroupPermissionPermission defines model for ProjectGroupPermission.Permission.
type ProjectGroupPermissionPermission string

// ProjectUserPermission A user's direct permission for a given project.
type ProjectUserPermission struct {
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Permission           *ProjectUserPermissionPermission `json:"permission,omitempty"`
	Project              *Project                         `json:"project,omitempty"`
	Type                 string                           `json:"type"`
	User                 *User                            `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}           `json:"-"`
}

// ProjectUserPermissionPermission defines model for ProjectUserPermission.Permission.
type ProjectUserPermissionPermission string

// Pullrequest defines model for pullrequest.
type Pullrequest struct {
	Author *Account `json:"author,omitempty"`

	// CloseSourceBranch A boolean flag indicating if merging the pull request closes the source branch.
	CloseSourceBranch *bool    `json:"close_source_branch,omitempty"`
	ClosedBy          *Account `json:"closed_by,omitempty"`

	// CommentCount The number of comments for a specific pull request.
	CommentCount *int `json:"comment_count,omitempty"`

	// CreatedOn The ISO8601 timestamp the request was created.
	CreatedOn   *time.Time           `json:"created_on,omitempty"`
	Destination *PullrequestEndpoint `json:"destination,omitempty"`

	// Id The pull request's unique ID. Note that pull request IDs are only unique within their associated repository.
	Id    *int `json:"id,omitempty"`
	Links *struct {
		// Activity A link to a resource related to this object.
		Activity *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"activity,omitempty"`

		// Approve A link to a resource related to this object.
		Approve *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"approve,omitempty"`

		// Comments A link to a resource related to this object.
		Comments *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"comments,omitempty"`

		// Commits A link to a resource related to this object.
		Commits *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commits,omitempty"`

		// Decline A link to a resource related to this object.
		Decline *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"decline,omitempty"`

		// Diff A link to a resource related to this object.
		Diff *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"diff,omitempty"`

		// Diffstat A link to a resource related to this object.
		Diffstat *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"diffstat,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Merge A link to a resource related to this object.
		Merge *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"merge,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	MergeCommit *struct {
		Hash *string `json:"hash,omitempty"`
	} `json:"merge_commit,omitempty"`

	// Participants         The list of users that are collaborating on this pull request.
	//         Collaborators are user that:
	//
	//         * are added to the pull request as a reviewer (part of the reviewers
	//           list)
	//         * are not explicit reviewers, but have commented on the pull request
	//         * are not explicit reviewers, but have approved the pull request
	//
	//         Each user is wrapped in an object that indicates the user's role and
	//         whether they have approved the pull request. For performance reasons,
	//         the API only returns this list when an API requests a pull request by
	//         id.
	//
	Participants *[]Participant `json:"participants,omitempty"`

	// Reason Explains why a pull request was declined. This field is only applicable to pull requests in rejected state.
	Reason *string `json:"reason,omitempty"`

	// Rendered User provided pull request text, interpreted in a markup language and rendered in HTML
	Rendered *struct {
		Description *struct {
			// Html The user's content rendered as HTML.
			Html *string `json:"html,omitempty"`

			// Markup The type of markup language the raw content is to be interpreted in.
			Markup *PullrequestRenderedDescriptionMarkup `json:"markup,omitempty"`

			// Raw The text as it was typed by a user.
			Raw *string `json:"raw,omitempty"`
		} `json:"description,omitempty"`
		Reason *struct {
			// Html The user's content rendered as HTML.
			Html *string `json:"html,omitempty"`

			// Markup The type of markup language the raw content is to be interpreted in.
			Markup *PullrequestRenderedReasonMarkup `json:"markup,omitempty"`

			// Raw The text as it was typed by a user.
			Raw *string `json:"raw,omitempty"`
		} `json:"reason,omitempty"`
		Title *struct {
			// Html The user's content rendered as HTML.
			Html *string `json:"html,omitempty"`

			// Markup The type of markup language the raw content is to be interpreted in.
			Markup *PullrequestRenderedTitleMarkup `json:"markup,omitempty"`

			// Raw The text as it was typed by a user.
			Raw *string `json:"raw,omitempty"`
		} `json:"title,omitempty"`
	} `json:"rendered,omitempty"`

	// Reviewers The list of users that were added as reviewers on this pull request when it was created. For performance reasons, the API only includes this list on a pull request's `self` URL.
	Reviewers *[]Account           `json:"reviewers,omitempty"`
	Source    *PullrequestEndpoint `json:"source,omitempty"`

	// State The pull request's current status.
	State   *PullrequestState `json:"state,omitempty"`
	Summary *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *PullrequestSummaryMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"summary,omitempty"`

	// TaskCount The number of open tasks for a specific pull request.
	TaskCount *int `json:"task_count,omitempty"`

	// Title Title of the pull request.
	Title *string `json:"title,omitempty"`
	Type  string  `json:"type"`

	// UpdatedOn The ISO8601 timestamp the request was last updated.
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PullrequestRenderedDescriptionMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestRenderedDescriptionMarkup string

// PullrequestRenderedReasonMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestRenderedReasonMarkup string

// PullrequestRenderedTitleMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestRenderedTitleMarkup string

// PullrequestState The pull request's current status.
type PullrequestState string

// PullrequestSummaryMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestSummaryMarkup string

// PullrequestComment defines model for pullrequest_comment.
type PullrequestComment struct {
	Content *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *PullrequestCommentContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Deleted   *bool      `json:"deleted,omitempty"`
	Id        *int       `json:"id,omitempty"`
	Inline    *struct {
		// From The comment's anchor line in the old version of the file.
		From *int `json:"from,omitempty"`

		// Path The path of the file this comment is anchored to.
		Path string `json:"path"`

		// To The comment's anchor line in the new version of the file. If the 'from' line is also provided, this value will be removed.
		To *int `json:"to,omitempty"`
	} `json:"inline,omitempty"`
	Links *struct {
		// Code A link to a resource related to this object.
		Code *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"code,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Parent      *Comment     `json:"parent,omitempty"`
	Pending     *bool        `json:"pending,omitempty"`
	Pullrequest *Pullrequest `json:"pullrequest,omitempty"`

	// Resolution The resolution object for a Comment.
	Resolution           *CommentResolution     `json:"resolution,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	User                 *Account               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PullrequestCommentContentMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestCommentContentMarkup string

// PullrequestCommentTask defines model for pullrequest_comment_task.
type PullrequestCommentTask struct {
	Comment *Comment `json:"comment,omitempty"`
	Content struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *PullrequestCommentTaskContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content"`
	CreatedOn time.Time `json:"created_on"`
	Creator   Account   `json:"creator"`
	Id        *int      `json:"id,omitempty"`
	Links     *struct {
		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Pending    *bool    `json:"pending,omitempty"`
	ResolvedBy *Account `json:"resolved_by,omitempty"`

	// ResolvedOn The ISO8601 timestamp for when the task was resolved.
	ResolvedOn *time.Time                  `json:"resolved_on,omitempty"`
	State      PullrequestCommentTaskState `json:"state"`
	UpdatedOn  time.Time                   `json:"updated_on"`
}

// PullrequestCommentTaskContentMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestCommentTaskContentMarkup string

// PullrequestCommentTaskState defines model for PullrequestCommentTask.State.
type PullrequestCommentTaskState string

// PullrequestEndpoint defines model for pullrequest_endpoint.
type PullrequestEndpoint struct {
	Branch *struct {
		// DefaultMergeStrategy The default merge strategy, when this endpoint is the destination of the pull request.
		DefaultMergeStrategy *string `json:"default_merge_strategy,omitempty"`

		// MergeStrategies Available merge strategies, when this endpoint is the destination of the pull request.
		MergeStrategies *[]PullrequestEndpointBranchMergeStrategies `json:"merge_strategies,omitempty"`
		Name            *string                                     `json:"name,omitempty"`
	} `json:"branch,omitempty"`
	Commit *struct {
		Hash *string `json:"hash,omitempty"`
	} `json:"commit,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
}

// PullrequestEndpointBranchMergeStrategies defines model for PullrequestEndpoint.Branch.MergeStrategies.
type PullrequestEndpointBranchMergeStrategies string

// PullrequestMergeParameters The metadata that describes a pull request merge.
type PullrequestMergeParameters struct {
	// CloseSourceBranch Whether the source branch should be deleted. If this is not provided, we fallback to the value used when the pull request was created, which defaults to False
	CloseSourceBranch *bool `json:"close_source_branch,omitempty"`

	// MergeStrategy The merge strategy that will be used to merge the pull request.
	MergeStrategy *PullrequestMergeParametersMergeStrategy `json:"merge_strategy,omitempty"`

	// Message The commit message that will be used on the resulting commit. Note that the size of the message is limited to 128 KiB.
	Message              *string                `json:"message,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PullrequestMergeParametersMergeStrategy The merge strategy that will be used to merge the pull request.
type PullrequestMergeParametersMergeStrategy string

// PullrequestTask defines model for pullrequest_task.
type PullrequestTask struct {
	Content struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *PullrequestTaskContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content"`
	CreatedOn time.Time `json:"created_on"`
	Creator   Account   `json:"creator"`
	Id        *int      `json:"id,omitempty"`
	Links     *struct {
		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Pending    *bool    `json:"pending,omitempty"`
	ResolvedBy *Account `json:"resolved_by,omitempty"`

	// ResolvedOn The ISO8601 timestamp for when the task was resolved.
	ResolvedOn *time.Time           `json:"resolved_on,omitempty"`
	State      PullrequestTaskState `json:"state"`
	UpdatedOn  time.Time            `json:"updated_on"`
}

// PullrequestTaskContentMarkup The type of markup language the raw content is to be interpreted in.
type PullrequestTaskContentMarkup string

// PullrequestTaskState defines model for PullrequestTask.State.
type PullrequestTaskState string

// PullrequestTaskCreate A pullrequest task create
type PullrequestTaskCreate struct {
	Comment *Comment `json:"comment,omitempty"`

	// Content task raw content
	Content struct {
		// Raw The task contents
		Raw string `json:"raw"`
	} `json:"content"`
	Pending *bool `json:"pending,omitempty"`
}

// PullrequestTaskUpdate A pullrequest task update
type PullrequestTaskUpdate struct {
	// Content task raw content
	Content *struct {
		// Raw The task contents
		Raw string `json:"raw"`
	} `json:"content,omitempty"`
	State *PullrequestTaskUpdateState `json:"state,omitempty"`
}

// PullrequestTaskUpdateState defines model for PullrequestTaskUpdate.State.
type PullrequestTaskUpdateState string

// Ref A ref object, representing a branch or tag in a repository.
type Ref struct {
	Links *struct {
		// Commits A link to a resource related to this object.
		Commits *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commits,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`

	// Name The name of the ref.
	Name                 *string                `json:"name,omitempty"`
	Target               *Commit                `json:"target,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Report defines model for report.
type Report struct {
	// CreatedOn The timestamp when the report was created.
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Data An array of data fields to display information on the report. Maximum 10.
	Data *[]ReportData `json:"data,omitempty"`

	// Details A string to describe the purpose of the report.
	Details *string `json:"details,omitempty"`

	// ExternalId ID of the report provided by the report creator. It can be used to identify the report as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the report creator for updating or deleting this specific report. Needs to be unique.
	ExternalId *string `json:"external_id,omitempty"`

	// Link A URL linking to the results of the report in an external tool.
	Link *string `json:"link,omitempty"`

	// LogoUrl A URL to the report logo. If none is provided, the default insights logo will be used.
	LogoUrl *string `json:"logo_url,omitempty"`

	// RemoteLinkEnabled If enabled, a remote link is created in Jira for the issue associated with the commit the report belongs to.
	RemoteLinkEnabled *bool `json:"remote_link_enabled,omitempty"`

	// ReportType The type of the report.
	ReportType *ReportReportType `json:"report_type,omitempty"`

	// Reporter A string to describe the tool or company who created the report.
	Reporter *string `json:"reporter,omitempty"`

	// Result The state of the report. May be set to PENDING and later updated.
	Result *ReportResult `json:"result,omitempty"`

	// Title The title of the report.
	Title *string `json:"title,omitempty"`
	Type  string  `json:"type"`

	// UpdatedOn The timestamp when the report was updated.
	UpdatedOn *time.Time `json:"updated_on,omitempty"`

	// Uuid The UUID that can be used to identify the report.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportReportType The type of the report.
type ReportReportType string

// ReportResult The state of the report. May be set to PENDING and later updated.
type ReportResult string

// ReportAnnotation defines model for report_annotation.
type ReportAnnotation struct {
	// AnnotationType The type of the report.
	AnnotationType *ReportAnnotationAnnotationType `json:"annotation_type,omitempty"`

	// CreatedOn The timestamp when the report was created.
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Details The details to show to users when clicking on the annotation.
	Details *string `json:"details,omitempty"`

	// ExternalId ID of the annotation provided by the annotation creator. It can be used to identify the annotation as an alternative to it's generated uuid. It is not used by Bitbucket, but only by the annotation creator for updating or deleting this specific annotation. Needs to be unique.
	ExternalId *string `json:"external_id,omitempty"`

	// Line The line number that the annotation should belong to. If no line number is provided, then it will default to 0 and in a pull request it will appear at the top of the file specified by the path field.
	Line *int `json:"line,omitempty"`

	// Link A URL linking to the annotation in an external tool.
	Link *string `json:"link,omitempty"`

	// Path The path of the file on which this annotation should be placed. This is the path of the file relative to the git repository. If no path is provided, then it will appear in the overview modal on all pull requests where the tip of the branch is the given commit, regardless of which files were modified.
	Path *string `json:"path,omitempty"`

	// Result The state of the report. May be set to PENDING and later updated.
	Result *ReportAnnotationResult `json:"result,omitempty"`

	// Severity The severity of the annotation.
	Severity *ReportAnnotationSeverity `json:"severity,omitempty"`

	// Summary The message to display to users.
	Summary *string `json:"summary,omitempty"`
	Type    string  `json:"type"`

	// UpdatedOn The timestamp when the report was updated.
	UpdatedOn *time.Time `json:"updated_on,omitempty"`

	// Uuid The UUID that can be used to identify the annotation.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ReportAnnotationAnnotationType The type of the report.
type ReportAnnotationAnnotationType string

// ReportAnnotationResult The state of the report. May be set to PENDING and later updated.
type ReportAnnotationResult string

// ReportAnnotationSeverity The severity of the annotation.
type ReportAnnotationSeverity string

// ReportData A key-value element that will be displayed along with the report.
type ReportData struct {
	// Title A string describing what this data field represents.
	Title *string `json:"title,omitempty"`

	// Type The type of data contained in the value field. If not provided, then the value will be detected as a boolean, number or string.
	Type *ReportDataType `json:"type,omitempty"`

	// Value The value of the data element.
	Value *map[string]interface{} `json:"value,omitempty"`
}

// ReportDataType The type of data contained in the value field. If not provided, then the value will be detected as a boolean, number or string.
type ReportDataType string

// Repository defines model for repository.
type Repository struct {
	CreatedOn   *time.Time `json:"created_on,omitempty"`
	Description *string    `json:"description,omitempty"`

	// ForkPolicy
	// Controls the rules for forking this repository.
	//
	// * **allow_forks**: unrestricted forking
	// * **no_public_forks**: restrict forking to private forks (forks cannot
	//   be made public later)
	// * **no_forks**: deny all forking
	ForkPolicy *RepositoryForkPolicy `json:"fork_policy,omitempty"`

	// FullName The concatenation of the repository owner's username and the slugified name, e.g. "evzijst/interruptingcow". This is the same string used in Bitbucket URLs.
	FullName *string `json:"full_name,omitempty"`

	// HasIssues
	// The issue tracker for this repository is enabled. Issue Tracker
	// features are not supported for repositories in workspaces
	// administered through admin.atlassian.com.
	HasIssues *bool `json:"has_issues,omitempty"`

	// HasWiki
	// The wiki for this repository is enabled. Wiki
	// features are not supported for repositories in workspaces
	// administered through admin.atlassian.com.
	HasWiki   *bool   `json:"has_wiki,omitempty"`
	IsPrivate *bool   `json:"is_private,omitempty"`
	Language  *string `json:"language,omitempty"`
	Links     *struct {
		// Avatar A link to a resource related to this object.
		Avatar *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"avatar,omitempty"`
		Clone *[]struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"clone,omitempty"`

		// Commits A link to a resource related to this object.
		Commits *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commits,omitempty"`

		// Downloads A link to a resource related to this object.
		Downloads *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"downloads,omitempty"`

		// Forks A link to a resource related to this object.
		Forks *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"forks,omitempty"`

		// Hooks A link to a resource related to this object.
		Hooks *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"hooks,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Pullrequests A link to a resource related to this object.
		Pullrequests *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"pullrequests,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`

		// Watchers A link to a resource related to this object.
		Watchers *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"watchers,omitempty"`
	} `json:"links,omitempty"`
	Mainbranch *Branch        `json:"mainbranch,omitempty"`
	Name       *string        `json:"name,omitempty"`
	Owner      *Account       `json:"owner,omitempty"`
	Parent     *Repository    `json:"parent,omitempty"`
	Project    *Project       `json:"project,omitempty"`
	Scm        *RepositoryScm `json:"scm,omitempty"`
	Size       *int           `json:"size,omitempty"`
	Type       string         `json:"type"`
	UpdatedOn  *time.Time     `json:"updated_on,omitempty"`

	// Uuid The repository's immutable id. This can be used as a substitute for the slug segment in URLs. Doing this guarantees your URLs will survive renaming of the repository by its owner, or even transfer of the repository to a different user.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// RepositoryForkPolicy
// Controls the rules for forking this repository.
//
//   - **allow_forks**: unrestricted forking
//   - **no_public_forks**: restrict forking to private forks (forks cannot
//     be made public later)
//   - **no_forks**: deny all forking
type RepositoryForkPolicy string

// RepositoryScm defines model for Repository.Scm.
type RepositoryScm string

// RepositoryGroupPermission A group's permission for a given repository.
type RepositoryGroupPermission struct {
	Group *Group `json:"group,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Permission           *RepositoryGroupPermissionPermission `json:"permission,omitempty"`
	Repository           *Repository                          `json:"repository,omitempty"`
	Type                 string                               `json:"type"`
	AdditionalProperties map[string]interface{}               `json:"-"`
}

// RepositoryGroupPermissionPermission defines model for RepositoryGroupPermission.Permission.
type RepositoryGroupPermissionPermission string

// RepositoryInheritanceState A json object representing the repository's inheritance state values
type RepositoryInheritanceState struct {
	OverrideSettings     *map[string]interface{} `json:"override_settings,omitempty"`
	Type                 string                  `json:"type"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// RepositoryPermission A user's permission for a given repository.
type RepositoryPermission struct {
	Permission           *RepositoryPermissionPermission `json:"permission,omitempty"`
	Repository           *Repository                     `json:"repository,omitempty"`
	Type                 string                          `json:"type"`
	User                 *User                           `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// RepositoryPermissionPermission defines model for RepositoryPermission.Permission.
type RepositoryPermissionPermission string

// RepositoryUserPermission A user's direct permission for a given repository.
type RepositoryUserPermission struct {
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Permission           *RepositoryUserPermissionPermission `json:"permission,omitempty"`
	Repository           *Repository                         `json:"repository,omitempty"`
	Type                 string                              `json:"type"`
	User                 *User                               `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}              `json:"-"`
}

// RepositoryUserPermissionPermission defines model for RepositoryUserPermission.Permission.
type RepositoryUserPermissionPermission string

// SearchCodeSearchResult defines model for search_code_search_result.
type SearchCodeSearchResult struct {
	ContentMatchCount *int64                `json:"content_match_count,omitempty"`
	ContentMatches    *[]SearchContentMatch `json:"content_matches,omitempty"`

	// File A file object, representing a file at a commit in a repository
	File        *CommitFile      `json:"file,omitempty"`
	PathMatches *[]SearchSegment `json:"path_matches,omitempty"`
	Type        *string          `json:"type,omitempty"`
}

// SearchContentMatch defines model for search_content_match.
type SearchContentMatch struct {
	Lines *[]SearchLine `json:"lines,omitempty"`
}

// SearchLine defines model for search_line.
type SearchLine struct {
	Line     *int32           `json:"line,omitempty"`
	Segments *[]SearchSegment `json:"segments,omitempty"`
}

// SearchResultPage defines model for search_result_page.
type SearchResultPage struct {
	Next             *string                   `json:"next,omitempty"`
	Page             *int32                    `json:"page,omitempty"`
	Pagelen          *int32                    `json:"pagelen,omitempty"`
	Previous         *string                   `json:"previous,omitempty"`
	QuerySubstituted *bool                     `json:"query_substituted,omitempty"`
	Size             *int64                    `json:"size,omitempty"`
	Values           *[]SearchCodeSearchResult `json:"values,omitempty"`
}

// SearchSegment defines model for search_segment.
type SearchSegment struct {
	Match *bool   `json:"match,omitempty"`
	Text  *string `json:"text,omitempty"`
}

// Snippet defines model for snippet.
type Snippet struct {
	CreatedOn *time.Time `json:"created_on,omitempty"`
	Creator   *Account   `json:"creator,omitempty"`
	Id        *int       `json:"id,omitempty"`
	IsPrivate *bool      `json:"is_private,omitempty"`
	Owner     *Account   `json:"owner,omitempty"`

	// Scm The DVCS used to store the snippet.
	Scm                  *SnippetScm            `json:"scm,omitempty"`
	Title                *string                `json:"title,omitempty"`
	Type                 string                 `json:"type"`
	UpdatedOn            *time.Time             `json:"updated_on,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SnippetScm The DVCS used to store the snippet.
type SnippetScm string

// SnippetComment defines model for snippet_comment.
type SnippetComment struct {
	Links *struct {
		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Snippet              *Snippet               `json:"snippet,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SnippetCommit defines model for snippet_commit.
type SnippetCommit struct {
	Author *Author    `json:"author,omitempty"`
	Date   *time.Time `json:"date,omitempty"`
	Hash   *string    `json:"hash,omitempty"`
	Links  *struct {
		// Diff A link to a resource related to this object.
		Diff *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"diff,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Message *string       `json:"message,omitempty"`
	Parents *[]BaseCommit `json:"parents,omitempty"`
	Snippet *Snippet      `json:"snippet,omitempty"`
	Summary *struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *SnippetCommitSummaryMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"summary,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SnippetCommitSummaryMarkup The type of markup language the raw content is to be interpreted in.
type SnippetCommitSummaryMarkup string

// SshAccountKey defines model for ssh_account_key.
type SshAccountKey struct {
	// Comment The comment parsed from the SSH key (if present)
	Comment   *string    `json:"comment,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Key The SSH public key value in OpenSSH format.
	Key *string `json:"key,omitempty"`

	// Label The user-defined label for the SSH key
	Label    *string    `json:"label,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links    *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Owner *Account `json:"owner,omitempty"`
	Type  string   `json:"type"`

	// Uuid The SSH key's immutable ID.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SshKey defines model for ssh_key.
type SshKey struct {
	// Comment The comment parsed from the SSH key (if present)
	Comment   *string    `json:"comment,omitempty"`
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// Key The SSH public key value in OpenSSH format.
	Key *string `json:"key,omitempty"`

	// Label The user-defined label for the SSH key
	Label    *string    `json:"label,omitempty"`
	LastUsed *time.Time `json:"last_used,omitempty"`
	Links    *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Type string `json:"type"`

	// Uuid The SSH key's immutable ID.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SubjectTypes The mapping of resource/subject types pointing to their individual event types.
type SubjectTypes struct {
	Repository *struct {
		// Events A link to a resource related to this object.
		Events *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"events,omitempty"`
	} `json:"repository,omitempty"`
	Workspace *struct {
		// Events A link to a resource related to this object.
		Events *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"events,omitempty"`
	} `json:"workspace,omitempty"`
}

// Tag defines model for tag.
type Tag struct {
	// Date The date that the tag was created, if available
	Date  *time.Time `json:"date,omitempty"`
	Links *struct {
		// Commits A link to a resource related to this object.
		Commits *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"commits,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`

	// Message The message associated with the tag, if available.
	Message *string `json:"message,omitempty"`

	// Name The name of the ref.
	Name                 *string                `json:"name,omitempty"`
	Tagger               *Author                `json:"tagger,omitempty"`
	Target               *Commit                `json:"target,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Task A task object.
type Task struct {
	Content struct {
		// Html The user's content rendered as HTML.
		Html *string `json:"html,omitempty"`

		// Markup The type of markup language the raw content is to be interpreted in.
		Markup *TaskContentMarkup `json:"markup,omitempty"`

		// Raw The text as it was typed by a user.
		Raw *string `json:"raw,omitempty"`
	} `json:"content"`
	CreatedOn  time.Time `json:"created_on"`
	Creator    Account   `json:"creator"`
	Id         *int      `json:"id,omitempty"`
	Pending    *bool     `json:"pending,omitempty"`
	ResolvedBy *Account  `json:"resolved_by,omitempty"`

	// ResolvedOn The ISO8601 timestamp for when the task was resolved.
	ResolvedOn *time.Time `json:"resolved_on,omitempty"`
	State      TaskState  `json:"state"`
	UpdatedOn  time.Time  `json:"updated_on"`
}

// TaskContentMarkup The type of markup language the raw content is to be interpreted in.
type TaskContentMarkup string

// TaskState defines model for Task.State.
type TaskState string

// Team defines model for team.
type Team struct {
	CreatedOn            *time.Time             `json:"created_on,omitempty"`
	DisplayName          *string                `json:"display_name,omitempty"`
	Links                *TeamLinks             `json:"links,omitempty"`
	Type                 string                 `json:"type"`
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TeamLinks defines model for team_links.
type TeamLinks struct {
	// Avatar A link to a resource related to this object.
	Avatar *Link `json:"avatar,omitempty"`

	// Html A link to a resource related to this object.
	Html *Link `json:"html,omitempty"`

	// Members A link to a resource related to this object.
	Members *Link `json:"members,omitempty"`

	// Projects A link to a resource related to this object.
	Projects *Link `json:"projects,omitempty"`

	// Repositories A link to a resource related to this object.
	Repositories *Link `json:"repositories,omitempty"`

	// Self A link to a resource related to this object.
	Self                 *Link                  `json:"self,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Treeentry Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.
type Treeentry struct {
	Commit *Commit `json:"commit,omitempty"`

	// Path The path in the repository
	Path                 *string                `json:"path,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// User defines model for user.
type User struct {
	// AccountId The user's Atlassian account ID.
	AccountId *string `json:"account_id,omitempty"`

	// AccountStatus The status of the account. Currently the only possible value is "active", but more values may be added in the future.
	AccountStatus *string    `json:"account_status,omitempty"`
	CreatedOn     *time.Time `json:"created_on,omitempty"`
	DisplayName   *string    `json:"display_name,omitempty"`
	Has2faEnabled *bool      `json:"has_2fa_enabled,omitempty"`
	IsStaff       *bool      `json:"is_staff,omitempty"`
	Links         *UserLinks `json:"links,omitempty"`

	// Nickname Account name defined by the owner. Should be used instead of the "username" field. Note that "nickname" cannot be used in place of "username" in URLs and queries, as "nickname" is not guaranteed to be unique.
	Nickname             *string                `json:"nickname,omitempty"`
	Type                 string                 `json:"type"`
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// UserLinks defines model for user_links.
type UserLinks struct {
	// Avatar A link to a resource related to this object.
	Avatar *Link `json:"avatar,omitempty"`

	// Html A link to a resource related to this object.
	Html *Link `json:"html,omitempty"`

	// Repositories A link to a resource related to this object.
	Repositories *Link `json:"repositories,omitempty"`

	// Self A link to a resource related to this object.
	Self                 *Link                  `json:"self,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Version defines model for version.
type Version struct {
	Id    *int `json:"id,omitempty"`
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Name                 *string                `json:"name,omitempty"`
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WebhookSubscription defines model for webhook_subscription.
type WebhookSubscription struct {
	Active    *bool      `json:"active,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description A user-defined description of the webhook.
	Description *string `json:"description,omitempty"`

	// Events The events this webhook is subscribed to.
	Events *[]WebhookSubscriptionEvents `json:"events,omitempty"`

	// Secret The secret to associate with the hook. The secret is never returned via the API. As such, this field is only used during updates. The secret can be set to `null` or "" to remove the secret (or create a hook with no secret). Leaving out the secret field during updates will leave the secret unchanged. Leaving out the secret during creation will create a hook with no secret.
	Secret *string `json:"secret,omitempty"`

	// SecretSet Indicates whether or not the hook has an associated secret. It is not possible to see the hook's secret. This field is ignored during updates.
	SecretSet *bool `json:"secret_set,omitempty"`

	// Subject Base type for most resource objects. It defines the common `type` element that identifies an object's type. It also identifies the element as Swagger's `discriminator`.
	Subject *Object `json:"subject,omitempty"`

	// SubjectType The type of entity. Set to either `repository` or `workspace` based on where the subscription is defined.
	SubjectType *WebhookSubscriptionSubjectType `json:"subject_type,omitempty"`
	Type        string                          `json:"type"`

	// Url The URL events get delivered to.
	Url *string `json:"url,omitempty"`

	// Uuid The webhook's id
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WebhookSubscriptionEvents defines model for WebhookSubscription.Events.
type WebhookSubscriptionEvents string

// WebhookSubscriptionSubjectType The type of entity. Set to either `repository` or `workspace` based on where the subscription is defined.
type WebhookSubscriptionSubjectType string

// Workspace defines model for workspace.
type Workspace struct {
	CreatedOn *time.Time `json:"created_on,omitempty"`

	// ForkingMode Controls the rules for forking repositories within this workspace.
	//
	// * **allow_forks**: unrestricted forking
	// * **internal_only**: prevents forking of private repositories outside the workspace or to public repositories
	ForkingMode *WorkspaceForkingMode `json:"forking_mode,omitempty"`

	// IsPrivacyEnforced Indicates whether the workspace enforces private content, or whether it allows public content.
	IsPrivacyEnforced *bool `json:"is_privacy_enforced,omitempty"`

	// IsPrivate Indicates whether the workspace is publicly accessible, or whether it is
	// private to the members and consequently only visible to members.
	IsPrivate *bool `json:"is_private,omitempty"`
	Links     *struct {
		// Avatar A link to a resource related to this object.
		Avatar *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"avatar,omitempty"`

		// Html A link to a resource related to this object.
		Html *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"html,omitempty"`

		// Members A link to a resource related to this object.
		Members *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"members,omitempty"`

		// Owners A link to a resource related to this object.
		Owners *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"owners,omitempty"`

		// Projects A link to a resource related to this object.
		Projects *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"projects,omitempty"`

		// Repositories A link to a resource related to this object.
		Repositories *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"repositories,omitempty"`

		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`

		// Snippets A link to a resource related to this object.
		Snippets *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"snippets,omitempty"`
	} `json:"links,omitempty"`

	// Name The name of the workspace.
	Name *string `json:"name,omitempty"`

	// Slug The short label that identifies this workspace.
	Slug      *string    `json:"slug,omitempty"`
	Type      string     `json:"type"`
	UpdatedOn *time.Time `json:"updated_on,omitempty"`

	// Uuid The workspace's immutable id.
	Uuid                 *string                `json:"uuid,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// WorkspaceForkingMode Controls the rules for forking repositories within this workspace.
//
// * **allow_forks**: unrestricted forking
// * **internal_only**: prevents forking of private repositories outside the workspace or to public repositories
type WorkspaceForkingMode string

// WorkspaceMembership defines model for workspace_membership.
type WorkspaceMembership struct {
	Links *struct {
		// Self A link to a resource related to this object.
		Self *struct {
			Href *string `json:"href,omitempty"`
			Name *string `json:"name,omitempty"`
		} `json:"self,omitempty"`
	} `json:"links,omitempty"`
	Type                 string                 `json:"type"`
	User                 *Account               `json:"user,omitempty"`
	Workspace            *Workspace             `json:"workspace,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PipelineVariable2 defines model for pipeline_variable2.
type PipelineVariable2 = PipelineVariable

// GetPullrequestsSelectedUserParams defines parameters for GetPullrequestsSelectedUser.
type GetPullrequestsSelectedUserParams struct {
	// State Only return pull requests that are in this state. This parameter can be repeated.
	State *GetPullrequestsSelectedUserParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// GetPullrequestsSelectedUserParamsState defines parameters for GetPullrequestsSelectedUser.
type GetPullrequestsSelectedUserParamsState string

// GetRepositoriesParams defines parameters for GetRepositories.
type GetRepositoriesParams struct {
	// After Filter the results to include only repositories created on or
	// after this [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601)
	//  timestamp. Example: `YYYY-MM-DDTHH:mm:ss.sssZ`
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Role Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	Role *GetRepositoriesParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	// `role` parameter must also be specified.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesParamsRole defines parameters for GetRepositories.
type GetRepositoriesParamsRole string

// GetRepositoriesWorkspaceParams defines parameters for GetRepositoriesWorkspace.
type GetRepositoriesWorkspaceParams struct {
	// Role
	// Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	Role *GetRepositoriesWorkspaceParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Q
	// Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	//
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceParamsRole defines parameters for GetRepositoriesWorkspace.
type GetRepositoriesWorkspaceParamsRole string

// DeleteRepositoriesWorkspaceRepoSlugParams defines parameters for DeleteRepositoriesWorkspaceRepoSlug.
type DeleteRepositoriesWorkspaceRepoSlugParams struct {
	// RedirectTo If a repository has been moved to a new location, use this parameter to
	// show users a friendly message in the Bitbucket UI that the repository
	// has moved to a new location. However, a GET to this endpoint will still
	// return a 404.
	RedirectTo *string `form:"redirect_to,omitempty" json:"redirect_to,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams defines parameters for GetRepositoriesWorkspaceRepoSlugBranchRestrictions.
type GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams struct {
	// Kind Branch restrictions of this type
	Kind *string `form:"kind,omitempty" json:"kind,omitempty"`

	// Pattern Branch restrictions applied to branches of this pattern
	Pattern *string `form:"pattern,omitempty" json:"pattern,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams defines parameters for GetRepositoriesWorkspaceRepoSlugCommitCommitComments.
type GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams struct {
	// Q Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetPullrequestsForCommitParams defines parameters for GetPullrequestsForCommit.
type GetPullrequestsForCommitParams struct {
	// Page Which page to retrieve
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Pagelen How many pull requests to retrieve per page
	Pagelen *int32 `form:"pagelen,omitempty" json:"pagelen,omitempty"`
}

// BulkCreateOrUpdateAnnotationsJSONBody defines parameters for BulkCreateOrUpdateAnnotations.
type BulkCreateOrUpdateAnnotationsJSONBody = []ReportAnnotation

// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams defines parameters for GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses.
type GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams struct {
	// Refname If specified, only return commit status objects that were either
	// created without a refname, or were created with the specified refname
	Refname *string `form:"refname,omitempty" json:"refname,omitempty"`

	// Q Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	// Defaults to `created_on`.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugDiffSpecParams defines parameters for GetRepositoriesWorkspaceRepoSlugDiffSpec.
type GetRepositoriesWorkspaceRepoSlugDiffSpecParams struct {
	// Context Generate diffs with <n> lines of context instead of the usual three.
	Context *int `form:"context,omitempty" json:"context,omitempty"`

	// Path Limit the diff to a particular file (this parameter
	// can be repeated for multiple paths).
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// IgnoreWhitespace Generate diffs that ignore whitespace.
	IgnoreWhitespace *bool `form:"ignore_whitespace,omitempty" json:"ignore_whitespace,omitempty"`

	// Binary Generate diffs that include binary files, true if omitted.
	Binary *bool `form:"binary,omitempty" json:"binary,omitempty"`

	// Renames Whether to perform rename detection, true if omitted.
	Renames *bool `form:"renames,omitempty" json:"renames,omitempty"`

	// Merge This parameter is deprecated. The 'topic' parameter should be used
	// instead. The 'merge' and 'topic' parameters cannot be both used at
	// the same time.
	//
	// If true, the source commit is merged into the
	// destination commit, and then a diff from the
	// destination to the merge result is returned. If false,
	// a simple 'two dot' diff between the source and
	// destination is returned. True if omitted.
	Merge *bool `form:"merge,omitempty" json:"merge,omitempty"`

	// Topic If true, returns 2-way 'three-dot' diff.
	// This is a diff between the source commit and the merge base
	// of the source commit and the destination commit.
	// If false, a simple 'two dot' diff between the source and
	// destination is returned.
	Topic *bool `form:"topic,omitempty" json:"topic,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams defines parameters for GetRepositoriesWorkspaceRepoSlugDiffstatSpec.
type GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams struct {
	// IgnoreWhitespace Generate diffs that ignore whitespace
	IgnoreWhitespace *bool `form:"ignore_whitespace,omitempty" json:"ignore_whitespace,omitempty"`

	// Merge This parameter is deprecated. The 'topic' parameter should be used
	// instead. The 'merge' and 'topic' parameters cannot be both used at
	// the same time.
	//
	// If true, the source commit is merged into the
	// destination commit, and then a diffstat from the
	// destination to the merge result is returned. If false,
	// a simple 'two dot' diffstat between the source and
	// destination is returned. True if omitted.
	Merge *bool `form:"merge,omitempty" json:"merge,omitempty"`

	// Path Limit the diffstat to a particular file (this parameter
	// can be repeated for multiple paths).
	Path *string `form:"path,omitempty" json:"path,omitempty"`

	// Renames Whether to perform rename detection, true if omitted.
	Renames *bool `form:"renames,omitempty" json:"renames,omitempty"`

	// Topic If true, returns 2-way 'three-dot' diff.
	// This is a diff between the source commit and the merge base
	// of the source commit and the destination commit.
	// If false, a simple 'two dot' diff between the source and
	// destination is returned.
	Topic *bool `form:"topic,omitempty" json:"topic,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams defines parameters for GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath.
type GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams struct {
	// Renames
	// When `true`, Bitbucket will follow the history of the file across
	// renames (this is the default behavior). This can be turned off by
	// specifying `false`.
	Renames *string `form:"renames,omitempty" json:"renames,omitempty"`

	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property sort the result by as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugForksParams defines parameters for GetRepositoriesWorkspaceRepoSlugForks.
type GetRepositoriesWorkspaceRepoSlugForksParams struct {
	// Role Filters the result based on the authenticated user's role on each repository.
	//
	// * **member**: returns repositories to which the user has explicit read access
	// * **contributor**: returns repositories to which the user has explicit write access
	// * **admin**: returns repositories to which the user has explicit administrator access
	// * **owner**: returns all repositories owned by the current user
	Role *GetRepositoriesWorkspaceRepoSlugForksParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Q Query string to narrow down the response as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field by which the results should be sorted as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugForksParamsRole defines parameters for GetRepositoriesWorkspaceRepoSlugForks.
type GetRepositoriesWorkspaceRepoSlugForksParamsRole string

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams defines parameters for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams struct {
	// Q
	// Query string to narrow down the response. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property to sort results. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results)
	// for details.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams defines parameters for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments.
type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// DeleteRepositoryPipelineCachesParams defines parameters for DeleteRepositoryPipelineCaches.
type DeleteRepositoryPipelineCachesParams struct {
	// Name The cache name.
	Name string `form:"name" json:"name"`
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsParams defines parameters for GetRepositoriesWorkspaceRepoSlugPullrequests.
type GetRepositoriesWorkspaceRepoSlugPullrequestsParams struct {
	// State Only return pull requests that are in this state. This parameter can be repeated.
	State *GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState defines parameters for GetRepositoriesWorkspaceRepoSlugPullrequests.
type GetRepositoriesWorkspaceRepoSlugPullrequestsParamsState string

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams defines parameters for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge.
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams struct {
	// Async Default value is false.
	//
	//
	// When set to true, runs merge asynchronously and
	// immediately returns a 202 with polling link to
	// the task-status API in the Location header.
	//
	//
	// When set to false, runs merge and waits for it to
	// complete, returning 200 when it succeeds. If the
	// duration of the merge exceeds a timeout threshold,
	// the API returns a 202 with polling link to the
	// task-status API in the Location header.
	Async *bool `form:"async,omitempty" json:"async,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams defines parameters for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses.
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams struct {
	// Q Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	// Defaults to `created_on`.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams defines parameters for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks.
type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams struct {
	// Q
	// Query string to narrow down the response. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	// Defaults to `created_on`.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Pagelen
	// Current number of objects on the existing page.
	// The default value is 10 with 100 being the maximum allowed value.
	// Individual APIs may enforce different values.
	Pagelen *int `form:"pagelen,omitempty" json:"pagelen,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugRefsParams defines parameters for GetRepositoriesWorkspaceRepoSlugRefs.
type GetRepositoriesWorkspaceRepoSlugRefsParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The `name`
	// field is handled specially for refs in that, if specified as the sort field, it
	// uses a natural sort order instead of the default lexicographical sort order. For example,
	// it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugRefsBranchesParams defines parameters for GetRepositoriesWorkspaceRepoSlugRefsBranches.
type GetRepositoriesWorkspaceRepoSlugRefsBranchesParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The `name`
	// field is handled specially for branches in that, if specified as the sort field, it
	// uses a natural sort order instead of the default lexicographical sort order. For example,
	// it will return ['branch1', 'branch2', 'branch10'] instead of ['branch1', 'branch10', 'branch2'].
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugRefsTagsParams defines parameters for GetRepositoriesWorkspaceRepoSlugRefsTags.
type GetRepositoriesWorkspaceRepoSlugRefsTagsParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Field by which the results should be sorted as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering). The `name`
	// field is handled specially for tags in that, if specified as the sort field, it
	// uses a natural sort order instead of the default lexicographical sort order. For example,
	// it will return ['1.1', '1.2', '1.10'] instead of ['1.1', '1.10', '1.2'].
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugSrcParams defines parameters for GetRepositoriesWorkspaceRepoSlugSrc.
type GetRepositoriesWorkspaceRepoSlugSrcParams struct {
	// Format Instead of returning the file's contents, return the (json) meta data for it.
	Format *GetRepositoriesWorkspaceRepoSlugSrcParamsFormat `form:"format,omitempty" json:"format,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugSrcParamsFormat defines parameters for GetRepositoriesWorkspaceRepoSlugSrc.
type GetRepositoriesWorkspaceRepoSlugSrcParamsFormat string

// PostRepositoriesWorkspaceRepoSlugSrcParams defines parameters for PostRepositoriesWorkspaceRepoSlugSrc.
type PostRepositoriesWorkspaceRepoSlugSrcParams struct {
	// Message The commit message. When omitted, Bitbucket uses a canned string.
	Message *string `form:"message,omitempty" json:"message,omitempty"`

	// Author
	// The raw string to be used as the new commit's author.
	// This string follows the format
	// `Erik van Zijst <evzijst@atlassian.com>`.
	//
	// When omitted, Bitbucket uses the authenticated user's
	// full/display name and primary email address. Commits cannot
	// be created anonymously.
	Author *string `form:"author,omitempty" json:"author,omitempty"`

	// Parents
	// A comma-separated list of SHA1s of the commits that should
	// be the parents of the newly created commit.
	//
	// When omitted, the new commit will inherit from and become
	// a child of the main branch's tip/HEAD commit.
	//
	// When more than one SHA1 is provided, the first SHA1
	// identifies the commit from which the content will be
	// inherited.".
	Parents *string `form:"parents,omitempty" json:"parents,omitempty"`

	// Files
	// Optional field that declares the files that the request is
	// manipulating. When adding a new file to a repo, or when
	// overwriting an existing file, the client can just upload
	// the full contents of the file in a normal form field and
	// the use of this `files` meta data field is redundant.
	// However, when the `files` field contains a file path that
	// does not have a corresponding, identically-named form
	// field, then Bitbucket interprets that as the client wanting
	// to replace the named file with the null set and the file is
	// deleted instead.
	//
	// Paths in the repo that are referenced in neither files nor
	// an individual file field, remain unchanged and carry over
	// from the parent to the new commit.
	//
	// This API does not support renaming as an explicit feature.
	// To rename a file, simply delete it and recreate it under
	// the new name in the same commit.
	Files *string `form:"files,omitempty" json:"files,omitempty"`

	// Branch
	// The name of the branch that the new commit should be
	// created on. When omitted, the commit will be created on top
	// of the main branch and will become the main branch's new
	// head.
	//
	// When a branch name is provided that already exists in the
	// repo, then the commit will be created on top of that
	// branch. In this case, *if* a parent SHA1 was also provided,
	// then it is asserted that the parent is the branch's
	// tip/HEAD at the time the request is made. When this is not
	// the case, a 409 is returned.
	//
	// When a new branch name is specified (that does not already
	// exist in the repo), and no parent SHA1s are provided, then
	// the new commit will inherit from the current main branch's
	// tip/HEAD commit, but not advance the main branch. The new
	// commit will be the new branch. When the request *also*
	// specifies a parent SHA1, then the new commit and branch
	// are created directly on top of the parent commit,
	// regardless of the state of the main branch.
	//
	// When a branch name is not specified, but a parent SHA1 is
	// provided, then Bitbucket asserts that it represents the
	// main branch's current HEAD/tip, or a 409 is returned.
	//
	// When a branch name is not specified and the repo is empty,
	// the new commit will become the repo's root commit and will
	// be on the main branch.
	//
	// When a branch name is specified and the repo is empty, the
	// new commit will become the repo's root commit and also
	// define the repo's main branch going forward.
	//
	// This API cannot be used to create additional root commits
	// in non-empty repos.
	//
	// The branch field cannot be repeated.
	//
	// As a side effect, this API can be used to create a new
	// branch without modifying any files, by specifying a new
	// branch name in this field, together with `parents`, but
	// omitting the `files` fields, while not sending any files.
	// This will create a new commit and branch with the same
	// contents as the first parent. The diff of this commit
	// against its first parent will be empty.
	Branch *string `form:"branch,omitempty" json:"branch,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams defines parameters for GetRepositoriesWorkspaceRepoSlugSrcCommitPath.
type GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams struct {
	// Format If 'meta' is provided, returns the (json) meta data for the contents of the file.  If 'rendered' is provided, returns the contents of a non-binary file in HTML-formatted rendered markup. The 'rendered' option only supports these filetypes: `.md`, `.markdown`, `.mkd`, `.mkdn`, `.mdown`, `.text`, `.rst`, and `.textile`. Since Git does not generally track what text encoding scheme is used, this endpoint attempts to detect the most appropriate character encoding. While usually correct, determining the character encoding can be ambiguous which in exceptional cases can lead to misinterpretation of the characters. As such, the raw element in the response object should not be treated as equivalent to the file's actual contents.
	Format *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat `form:"format,omitempty" json:"format,omitempty"`

	// Q Optional filter expression as per [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort Optional sorting parameter as per [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// MaxDepth If provided, returns the contents of the repository and its subdirectories recursively until the specified max_depth of nested directories. When omitted, this defaults to 1.
	MaxDepth *int `form:"max_depth,omitempty" json:"max_depth,omitempty"`
}

// GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat defines parameters for GetRepositoriesWorkspaceRepoSlugSrcCommitPath.
type GetRepositoriesWorkspaceRepoSlugSrcCommitPathParamsFormat string

// GetSnippetsParams defines parameters for GetSnippets.
type GetSnippetsParams struct {
	// Role Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
	Role *GetSnippetsParamsRole `form:"role,omitempty" json:"role,omitempty"`
}

// GetSnippetsParamsRole defines parameters for GetSnippets.
type GetSnippetsParamsRole string

// GetSnippetsWorkspaceParams defines parameters for GetSnippetsWorkspace.
type GetSnippetsWorkspaceParams struct {
	// Role Filter down the result based on the authenticated user's role (`owner`, `contributor`, or `member`).
	Role *GetSnippetsWorkspaceParamsRole `form:"role,omitempty" json:"role,omitempty"`
}

// GetSnippetsWorkspaceParamsRole defines parameters for GetSnippetsWorkspace.
type GetSnippetsWorkspaceParamsRole string

// GetSnippetsWorkspaceEncodedIdRevisionDiffParams defines parameters for GetSnippetsWorkspaceEncodedIdRevisionDiff.
type GetSnippetsWorkspaceEncodedIdRevisionDiffParams struct {
	// Path When used, only one the diff of the specified file will be returned.
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// SearchTeamParams defines parameters for SearchTeam.
type SearchTeamParams struct {
	// SearchQuery The search query
	SearchQuery string `form:"search_query" json:"search_query"`

	// Page Which page of the search results to retrieve
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Pagelen How many search results to retrieve per page
	Pagelen *int32 `form:"pagelen,omitempty" json:"pagelen,omitempty"`
}

// GetUserPermissionsRepositoriesParams defines parameters for GetUserPermissionsRepositories.
type GetUserPermissionsRepositoriesParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property sort the result by as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserPermissionsWorkspacesParams defines parameters for GetUserPermissionsWorkspaces.
type GetUserPermissionsWorkspacesParams struct {
	// Q
	// Query string to narrow down the response. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property to sort results. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results)
	// for details.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// SearchAccountParams defines parameters for SearchAccount.
type SearchAccountParams struct {
	// SearchQuery The search query
	SearchQuery string `form:"search_query" json:"search_query"`

	// Page Which page of the search results to retrieve
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Pagelen How many search results to retrieve per page
	Pagelen *int32 `form:"pagelen,omitempty" json:"pagelen,omitempty"`
}

// GetWorkspacesParams defines parameters for GetWorkspaces.
type GetWorkspacesParams struct {
	// Role
	//             Filters the workspaces based on the authenticated user's role on each workspace.
	//
	//             * **member**: returns a list of all the workspaces which the caller is a member of
	//                 at least one workspace group or repository
	//             * **collaborator**: returns a list of workspaces which the caller has write access
	//                 to at least one repository in the workspace
	//             * **owner**: returns a list of workspaces which the caller has administrator access
	//
	Role *GetWorkspacesParamsRole `form:"role,omitempty" json:"role,omitempty"`

	// Q
	// Query string to narrow down the response. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering) for details.
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property to sort results. See
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results)
	// for details.
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetWorkspacesParamsRole defines parameters for GetWorkspaces.
type GetWorkspacesParamsRole string

// GetWorkspacesWorkspacePermissionsParams defines parameters for GetWorkspacesWorkspacePermissions.
type GetWorkspacesWorkspacePermissionsParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`
}

// GetWorkspacesWorkspacePermissionsRepositoriesParams defines parameters for GetWorkspacesWorkspacePermissionsRepositories.
type GetWorkspacesWorkspacePermissionsRepositoriesParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property sort the result by as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams defines parameters for GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug.
type GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams struct {
	// Q
	// Query string to narrow down the response as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#filtering).
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// Sort
	// Name of a response property sort the result by as per
	// [filtering and sorting](/cloud/bitbucket/rest/intro/#sorting-query-results).
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetWorkspacesWorkspacePullrequestsSelectedUserParams defines parameters for GetWorkspacesWorkspacePullrequestsSelectedUser.
type GetWorkspacesWorkspacePullrequestsSelectedUserParams struct {
	// State Only return pull requests that are in this state. This parameter can be repeated.
	State *GetWorkspacesWorkspacePullrequestsSelectedUserParamsState `form:"state,omitempty" json:"state,omitempty"`
}

// GetWorkspacesWorkspacePullrequestsSelectedUserParamsState defines parameters for GetWorkspacesWorkspacePullrequestsSelectedUser.
type GetWorkspacesWorkspacePullrequestsSelectedUserParamsState string

// SearchWorkspaceParams defines parameters for SearchWorkspace.
type SearchWorkspaceParams struct {
	// SearchQuery The search query
	SearchQuery string `form:"search_query" json:"search_query"`

	// Page Which page of the search results to retrieve
	Page *int32 `form:"page,omitempty" json:"page,omitempty"`

	// Pagelen How many search results to retrieve per page
	Pagelen *int32 `form:"pagelen,omitempty" json:"pagelen,omitempty"`
}

// PostRepositoriesWorkspaceRepoSlugJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlug for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugJSONRequestBody = Repository

// PutRepositoriesWorkspaceRepoSlugJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlug for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugJSONRequestBody = Repository

// PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugBranchRestrictions for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody = Branchrestriction

// PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody = Branchrestriction

// PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugCommitCommitComments for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody = CommitComment

// PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody = CommitComment

// UpdateCommitHostedPropertyValueJSONRequestBody defines body for UpdateCommitHostedPropertyValue for application/json ContentType.
type UpdateCommitHostedPropertyValueJSONRequestBody = ApplicationProperty

// CreateOrUpdateReportJSONRequestBody defines body for CreateOrUpdateReport for application/json ContentType.
type CreateOrUpdateReportJSONRequestBody = Report

// BulkCreateOrUpdateAnnotationsJSONRequestBody defines body for BulkCreateOrUpdateAnnotations for application/json ContentType.
type BulkCreateOrUpdateAnnotationsJSONRequestBody = BulkCreateOrUpdateAnnotationsJSONBody

// CreateOrUpdateAnnotationJSONRequestBody defines body for CreateOrUpdateAnnotation for application/json ContentType.
type CreateOrUpdateAnnotationJSONRequestBody = ReportAnnotation

// PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody = Commitstatus

// PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody = Commitstatus

// CreateDeploymentVariableJSONRequestBody defines body for CreateDeploymentVariable for application/json ContentType.
type CreateDeploymentVariableJSONRequestBody = DeploymentVariable

// UpdateDeploymentVariableJSONRequestBody defines body for UpdateDeploymentVariable for application/json ContentType.
type UpdateDeploymentVariableJSONRequestBody = DeploymentVariable

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = DeploymentEnvironment

// PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugForks for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody = Repository

// PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugIssues for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody = Issue

// PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugIssuesExport for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody = ExportOptions

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody = IssueChange

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody = IssueComment

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody = IssueComment

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody = BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchema

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody = BitbucketAppsPermissionsSerializersRepoPermissionUpdateSchema

// CreatePipelineForRepositoryJSONRequestBody defines body for CreatePipelineForRepository for application/json ContentType.
type CreatePipelineForRepositoryJSONRequestBody = Pipeline

// UpdateRepositoryPipelineConfigJSONRequestBody defines body for UpdateRepositoryPipelineConfig for application/json ContentType.
type UpdateRepositoryPipelineConfigJSONRequestBody = PipelinesConfig

// UpdateRepositoryBuildNumberJSONRequestBody defines body for UpdateRepositoryBuildNumber for application/json ContentType.
type UpdateRepositoryBuildNumberJSONRequestBody = PipelineBuildNumber

// CreateRepositoryPipelineScheduleJSONRequestBody defines body for CreateRepositoryPipelineSchedule for application/json ContentType.
type CreateRepositoryPipelineScheduleJSONRequestBody = PipelineSchedulePostRequestBody

// UpdateRepositoryPipelineScheduleJSONRequestBody defines body for UpdateRepositoryPipelineSchedule for application/json ContentType.
type UpdateRepositoryPipelineScheduleJSONRequestBody = PipelineSchedulePutRequestBody

// UpdateRepositoryPipelineKeyPairJSONRequestBody defines body for UpdateRepositoryPipelineKeyPair for application/json ContentType.
type UpdateRepositoryPipelineKeyPairJSONRequestBody = PipelineSshKeyPair

// CreateRepositoryPipelineKnownHostJSONRequestBody defines body for CreateRepositoryPipelineKnownHost for application/json ContentType.
type CreateRepositoryPipelineKnownHostJSONRequestBody = PipelineKnownHost

// UpdateRepositoryPipelineKnownHostJSONRequestBody defines body for UpdateRepositoryPipelineKnownHost for application/json ContentType.
type UpdateRepositoryPipelineKnownHostJSONRequestBody = PipelineKnownHost

// CreateRepositoryPipelineVariableJSONRequestBody defines body for CreateRepositoryPipelineVariable for application/json ContentType.
type CreateRepositoryPipelineVariableJSONRequestBody = PipelineVariable

// UpdateRepositoryPipelineVariableJSONRequestBody defines body for UpdateRepositoryPipelineVariable for application/json ContentType.
type UpdateRepositoryPipelineVariableJSONRequestBody = PipelineVariable

// UpdateRepositoryHostedPropertyValueJSONRequestBody defines body for UpdateRepositoryHostedPropertyValue for application/json ContentType.
type UpdateRepositoryHostedPropertyValueJSONRequestBody = ApplicationProperty

// PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugPullrequests for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody = Pullrequest

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody = Pullrequest

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody = PullrequestComment

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody = PullrequestComment

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody = PullrequestMergeParameters

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody = PullrequestTaskCreate

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody defines body for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId for application/json ContentType.
type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody = PullrequestTaskUpdate

// UpdatePullRequestHostedPropertyValueJSONRequestBody defines body for UpdatePullRequestHostedPropertyValue for application/json ContentType.
type UpdatePullRequestHostedPropertyValueJSONRequestBody = ApplicationProperty

// PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody defines body for PostRepositoriesWorkspaceRepoSlugRefsTags for application/json ContentType.
type PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody = Tag

// PostSnippetsJSONRequestBody defines body for PostSnippets for application/json ContentType.
type PostSnippetsJSONRequestBody = Snippet

// PostSnippetsWorkspaceJSONRequestBody defines body for PostSnippetsWorkspace for application/json ContentType.
type PostSnippetsWorkspaceJSONRequestBody = Snippet

// PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody defines body for PostSnippetsWorkspaceEncodedIdComments for application/json ContentType.
type PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody = SnippetComment

// PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody defines body for PutSnippetsWorkspaceEncodedIdCommentsCommentId for application/json ContentType.
type PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody = SnippetComment

// CreatePipelineVariableForTeamJSONRequestBody defines body for CreatePipelineVariableForTeam for application/json ContentType.
type CreatePipelineVariableForTeamJSONRequestBody = PipelineVariable

// UpdatePipelineVariableForTeamJSONRequestBody defines body for UpdatePipelineVariableForTeam for application/json ContentType.
type UpdatePipelineVariableForTeamJSONRequestBody = PipelineVariable

// CreatePipelineVariableForUserJSONRequestBody defines body for CreatePipelineVariableForUser for application/json ContentType.
type CreatePipelineVariableForUserJSONRequestBody = PipelineVariable

// UpdatePipelineVariableForUserJSONRequestBody defines body for UpdatePipelineVariableForUser for application/json ContentType.
type UpdatePipelineVariableForUserJSONRequestBody = PipelineVariable

// UpdateUserHostedPropertyValueJSONRequestBody defines body for UpdateUserHostedPropertyValue for application/json ContentType.
type UpdateUserHostedPropertyValueJSONRequestBody = ApplicationProperty

// PostUsersSelectedUserSshKeysJSONRequestBody defines body for PostUsersSelectedUserSshKeys for application/json ContentType.
type PostUsersSelectedUserSshKeysJSONRequestBody = SshAccountKey

// PutUsersSelectedUserSshKeysKeyIdJSONRequestBody defines body for PutUsersSelectedUserSshKeysKeyId for application/json ContentType.
type PutUsersSelectedUserSshKeysKeyIdJSONRequestBody = SshAccountKey

// CreatePipelineVariableForWorkspaceJSONRequestBody defines body for CreatePipelineVariableForWorkspace for application/json ContentType.
type CreatePipelineVariableForWorkspaceJSONRequestBody = PipelineVariable

// UpdatePipelineVariableForWorkspaceJSONRequestBody defines body for UpdatePipelineVariableForWorkspace for application/json ContentType.
type UpdatePipelineVariableForWorkspaceJSONRequestBody = PipelineVariable

// PostWorkspacesWorkspaceProjectsJSONRequestBody defines body for PostWorkspacesWorkspaceProjects for application/json ContentType.
type PostWorkspacesWorkspaceProjectsJSONRequestBody = Project

// PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody defines body for PutWorkspacesWorkspaceProjectsProjectKey for application/json ContentType.
type PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody = Project

// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody defines body for PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug for application/json ContentType.
type PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody = BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchema

// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody defines body for PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId for application/json ContentType.
type PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody = BitbucketAppsPermissionsSerializersProjectPermissionUpdateSchema

// Getter for additional properties for Account. Returns the specified
// element and whether it was found
func (a Account) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Account
func (a *Account) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Account to handle AdditionalProperties
func (a *Account) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["display_name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'display_name': %w", err)
		}
		delete(object, "display_name")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Account to handle AdditionalProperties
func (a Account) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.DisplayName != nil {
		object["display_name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'display_name': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccountLinks. Returns the specified
// element and whether it was found
func (a AccountLinks) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccountLinks
func (a *AccountLinks) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccountLinks to handle AdditionalProperties
func (a *AccountLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["avatar"]; found {
		err = json.Unmarshal(raw, &a.Avatar)
		if err != nil {
			return fmt.Errorf("error reading 'avatar': %w", err)
		}
		delete(object, "avatar")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccountLinks to handle AdditionalProperties
func (a AccountLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Avatar != nil {
		object["avatar"], err = json.Marshal(a.Avatar)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'avatar': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ApplicationProperty. Returns the specified
// element and whether it was found
func (a ApplicationProperty) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ApplicationProperty
func (a *ApplicationProperty) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ApplicationProperty to handle AdditionalProperties
func (a *ApplicationProperty) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_attributes"]; found {
		err = json.Unmarshal(raw, &a.Attributes)
		if err != nil {
			return fmt.Errorf("error reading '_attributes': %w", err)
		}
		delete(object, "_attributes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ApplicationProperty to handle AdditionalProperties
func (a ApplicationProperty) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Attributes != nil {
		object["_attributes"], err = json.Marshal(a.Attributes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_attributes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Author. Returns the specified
// element and whether it was found
func (a Author) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Author
func (a *Author) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Author to handle AdditionalProperties
func (a *Author) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["raw"]; found {
		err = json.Unmarshal(raw, &a.Raw)
		if err != nil {
			return fmt.Errorf("error reading 'raw': %w", err)
		}
		delete(object, "raw")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Author to handle AdditionalProperties
func (a Author) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Raw != nil {
		object["raw"], err = json.Marshal(a.Raw)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'raw': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BaseCommit. Returns the specified
// element and whether it was found
func (a BaseCommit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BaseCommit
func (a *BaseCommit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BaseCommit to handle AdditionalProperties
func (a *BaseCommit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["date"]; found {
		err = json.Unmarshal(raw, &a.Date)
		if err != nil {
			return fmt.Errorf("error reading 'date': %w", err)
		}
		delete(object, "date")
	}

	if raw, found := object["hash"]; found {
		err = json.Unmarshal(raw, &a.Hash)
		if err != nil {
			return fmt.Errorf("error reading 'hash': %w", err)
		}
		delete(object, "hash")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["parents"]; found {
		err = json.Unmarshal(raw, &a.Parents)
		if err != nil {
			return fmt.Errorf("error reading 'parents': %w", err)
		}
		delete(object, "parents")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BaseCommit to handle AdditionalProperties
func (a BaseCommit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.Date != nil {
		object["date"], err = json.Marshal(a.Date)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date': %w", err)
		}
	}

	if a.Hash != nil {
		object["hash"], err = json.Marshal(a.Hash)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hash': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Parents != nil {
		object["parents"], err = json.Marshal(a.Parents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parents': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Branch. Returns the specified
// element and whether it was found
func (a Branch) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Branch
func (a *Branch) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Branch to handle AdditionalProperties
func (a *Branch) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["default_merge_strategy"]; found {
		err = json.Unmarshal(raw, &a.DefaultMergeStrategy)
		if err != nil {
			return fmt.Errorf("error reading 'default_merge_strategy': %w", err)
		}
		delete(object, "default_merge_strategy")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["merge_strategies"]; found {
		err = json.Unmarshal(raw, &a.MergeStrategies)
		if err != nil {
			return fmt.Errorf("error reading 'merge_strategies': %w", err)
		}
		delete(object, "merge_strategies")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Branch to handle AdditionalProperties
func (a Branch) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DefaultMergeStrategy != nil {
		object["default_merge_strategy"], err = json.Marshal(a.DefaultMergeStrategy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'default_merge_strategy': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.MergeStrategies != nil {
		object["merge_strategies"], err = json.Marshal(a.MergeStrategies)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'merge_strategies': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Target != nil {
		object["target"], err = json.Marshal(a.Target)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'target': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BranchingModel. Returns the specified
// element and whether it was found
func (a BranchingModel) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BranchingModel
func (a *BranchingModel) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BranchingModel to handle AdditionalProperties
func (a *BranchingModel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch_types"]; found {
		err = json.Unmarshal(raw, &a.BranchTypes)
		if err != nil {
			return fmt.Errorf("error reading 'branch_types': %w", err)
		}
		delete(object, "branch_types")
	}

	if raw, found := object["development"]; found {
		err = json.Unmarshal(raw, &a.Development)
		if err != nil {
			return fmt.Errorf("error reading 'development': %w", err)
		}
		delete(object, "development")
	}

	if raw, found := object["production"]; found {
		err = json.Unmarshal(raw, &a.Production)
		if err != nil {
			return fmt.Errorf("error reading 'production': %w", err)
		}
		delete(object, "production")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BranchingModel to handle AdditionalProperties
func (a BranchingModel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BranchTypes != nil {
		object["branch_types"], err = json.Marshal(a.BranchTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'branch_types': %w", err)
		}
	}

	if a.Development != nil {
		object["development"], err = json.Marshal(a.Development)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'development': %w", err)
		}
	}

	if a.Production != nil {
		object["production"], err = json.Marshal(a.Production)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'production': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for BranchingModelSettings. Returns the specified
// element and whether it was found
func (a BranchingModelSettings) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BranchingModelSettings
func (a *BranchingModelSettings) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BranchingModelSettings to handle AdditionalProperties
func (a *BranchingModelSettings) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch_types"]; found {
		err = json.Unmarshal(raw, &a.BranchTypes)
		if err != nil {
			return fmt.Errorf("error reading 'branch_types': %w", err)
		}
		delete(object, "branch_types")
	}

	if raw, found := object["development"]; found {
		err = json.Unmarshal(raw, &a.Development)
		if err != nil {
			return fmt.Errorf("error reading 'development': %w", err)
		}
		delete(object, "development")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["production"]; found {
		err = json.Unmarshal(raw, &a.Production)
		if err != nil {
			return fmt.Errorf("error reading 'production': %w", err)
		}
		delete(object, "production")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BranchingModelSettings to handle AdditionalProperties
func (a BranchingModelSettings) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BranchTypes != nil {
		object["branch_types"], err = json.Marshal(a.BranchTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'branch_types': %w", err)
		}
	}

	if a.Development != nil {
		object["development"], err = json.Marshal(a.Development)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'development': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Production != nil {
		object["production"], err = json.Marshal(a.Production)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'production': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Branchrestriction. Returns the specified
// element and whether it was found
func (a Branchrestriction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Branchrestriction
func (a *Branchrestriction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Branchrestriction to handle AdditionalProperties
func (a *Branchrestriction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch_match_kind"]; found {
		err = json.Unmarshal(raw, &a.BranchMatchKind)
		if err != nil {
			return fmt.Errorf("error reading 'branch_match_kind': %w", err)
		}
		delete(object, "branch_match_kind")
	}

	if raw, found := object["branch_type"]; found {
		err = json.Unmarshal(raw, &a.BranchType)
		if err != nil {
			return fmt.Errorf("error reading 'branch_type': %w", err)
		}
		delete(object, "branch_type")
	}

	if raw, found := object["groups"]; found {
		err = json.Unmarshal(raw, &a.Groups)
		if err != nil {
			return fmt.Errorf("error reading 'groups': %w", err)
		}
		delete(object, "groups")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["kind"]; found {
		err = json.Unmarshal(raw, &a.Kind)
		if err != nil {
			return fmt.Errorf("error reading 'kind': %w", err)
		}
		delete(object, "kind")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["users"]; found {
		err = json.Unmarshal(raw, &a.Users)
		if err != nil {
			return fmt.Errorf("error reading 'users': %w", err)
		}
		delete(object, "users")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Branchrestriction to handle AdditionalProperties
func (a Branchrestriction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["branch_match_kind"], err = json.Marshal(a.BranchMatchKind)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'branch_match_kind': %w", err)
	}

	if a.BranchType != nil {
		object["branch_type"], err = json.Marshal(a.BranchType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'branch_type': %w", err)
		}
	}

	if a.Groups != nil {
		object["groups"], err = json.Marshal(a.Groups)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'groups': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	object["kind"], err = json.Marshal(a.Kind)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'kind': %w", err)
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	object["pattern"], err = json.Marshal(a.Pattern)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Users != nil {
		object["users"], err = json.Marshal(a.Users)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'users': %w", err)
		}
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Comment. Returns the specified
// element and whether it was found
func (a Comment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Comment
func (a *Comment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Comment to handle AdditionalProperties
func (a *Comment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return fmt.Errorf("error reading 'content': %w", err)
		}
		delete(object, "content")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["deleted"]; found {
		err = json.Unmarshal(raw, &a.Deleted)
		if err != nil {
			return fmt.Errorf("error reading 'deleted': %w", err)
		}
		delete(object, "deleted")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["inline"]; found {
		err = json.Unmarshal(raw, &a.Inline)
		if err != nil {
			return fmt.Errorf("error reading 'inline': %w", err)
		}
		delete(object, "inline")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["parent"]; found {
		err = json.Unmarshal(raw, &a.Parent)
		if err != nil {
			return fmt.Errorf("error reading 'parent': %w", err)
		}
		delete(object, "parent")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Comment to handle AdditionalProperties
func (a Comment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Deleted != nil {
		object["deleted"], err = json.Marshal(a.Deleted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deleted': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Inline != nil {
		object["inline"], err = json.Marshal(a.Inline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inline': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Parent != nil {
		object["parent"], err = json.Marshal(a.Parent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommentResolution. Returns the specified
// element and whether it was found
func (a CommentResolution) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommentResolution
func (a *CommentResolution) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommentResolution to handle AdditionalProperties
func (a *CommentResolution) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommentResolution to handle AdditionalProperties
func (a CommentResolution) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Commit. Returns the specified
// element and whether it was found
func (a Commit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Commit
func (a *Commit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Commit to handle AdditionalProperties
func (a *Commit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["date"]; found {
		err = json.Unmarshal(raw, &a.Date)
		if err != nil {
			return fmt.Errorf("error reading 'date': %w", err)
		}
		delete(object, "date")
	}

	if raw, found := object["hash"]; found {
		err = json.Unmarshal(raw, &a.Hash)
		if err != nil {
			return fmt.Errorf("error reading 'hash': %w", err)
		}
		delete(object, "hash")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["parents"]; found {
		err = json.Unmarshal(raw, &a.Parents)
		if err != nil {
			return fmt.Errorf("error reading 'parents': %w", err)
		}
		delete(object, "parents")
	}

	if raw, found := object["participants"]; found {
		err = json.Unmarshal(raw, &a.Participants)
		if err != nil {
			return fmt.Errorf("error reading 'participants': %w", err)
		}
		delete(object, "participants")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Commit to handle AdditionalProperties
func (a Commit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.Date != nil {
		object["date"], err = json.Marshal(a.Date)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date': %w", err)
		}
	}

	if a.Hash != nil {
		object["hash"], err = json.Marshal(a.Hash)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hash': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Parents != nil {
		object["parents"], err = json.Marshal(a.Parents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parents': %w", err)
		}
	}

	if a.Participants != nil {
		object["participants"], err = json.Marshal(a.Participants)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'participants': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommitComment. Returns the specified
// element and whether it was found
func (a CommitComment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommitComment
func (a *CommitComment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommitComment to handle AdditionalProperties
func (a *CommitComment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["commit"]; found {
		err = json.Unmarshal(raw, &a.Commit)
		if err != nil {
			return fmt.Errorf("error reading 'commit': %w", err)
		}
		delete(object, "commit")
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return fmt.Errorf("error reading 'content': %w", err)
		}
		delete(object, "content")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["deleted"]; found {
		err = json.Unmarshal(raw, &a.Deleted)
		if err != nil {
			return fmt.Errorf("error reading 'deleted': %w", err)
		}
		delete(object, "deleted")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["inline"]; found {
		err = json.Unmarshal(raw, &a.Inline)
		if err != nil {
			return fmt.Errorf("error reading 'inline': %w", err)
		}
		delete(object, "inline")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["parent"]; found {
		err = json.Unmarshal(raw, &a.Parent)
		if err != nil {
			return fmt.Errorf("error reading 'parent': %w", err)
		}
		delete(object, "parent")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommitComment to handle AdditionalProperties
func (a CommitComment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Commit != nil {
		object["commit"], err = json.Marshal(a.Commit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commit': %w", err)
		}
	}

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Deleted != nil {
		object["deleted"], err = json.Marshal(a.Deleted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deleted': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Inline != nil {
		object["inline"], err = json.Marshal(a.Inline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inline': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Parent != nil {
		object["parent"], err = json.Marshal(a.Parent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CommitFile. Returns the specified
// element and whether it was found
func (a CommitFile) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CommitFile
func (a *CommitFile) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CommitFile to handle AdditionalProperties
func (a *CommitFile) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["attributes"]; found {
		err = json.Unmarshal(raw, &a.Attributes)
		if err != nil {
			return fmt.Errorf("error reading 'attributes': %w", err)
		}
		delete(object, "attributes")
	}

	if raw, found := object["commit"]; found {
		err = json.Unmarshal(raw, &a.Commit)
		if err != nil {
			return fmt.Errorf("error reading 'commit': %w", err)
		}
		delete(object, "commit")
	}

	if raw, found := object["escaped_path"]; found {
		err = json.Unmarshal(raw, &a.EscapedPath)
		if err != nil {
			return fmt.Errorf("error reading 'escaped_path': %w", err)
		}
		delete(object, "escaped_path")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CommitFile to handle AdditionalProperties
func (a CommitFile) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Attributes != nil {
		object["attributes"], err = json.Marshal(a.Attributes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'attributes': %w", err)
		}
	}

	if a.Commit != nil {
		object["commit"], err = json.Marshal(a.Commit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commit': %w", err)
		}
	}

	if a.EscapedPath != nil {
		object["escaped_path"], err = json.Marshal(a.EscapedPath)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'escaped_path': %w", err)
		}
	}

	if a.Path != nil {
		object["path"], err = json.Marshal(a.Path)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'path': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Commitstatus. Returns the specified
// element and whether it was found
func (a Commitstatus) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Commitstatus
func (a *Commitstatus) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Commitstatus to handle AdditionalProperties
func (a *Commitstatus) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["refname"]; found {
		err = json.Unmarshal(raw, &a.Refname)
		if err != nil {
			return fmt.Errorf("error reading 'refname': %w", err)
		}
		delete(object, "refname")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.Url)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Commitstatus to handle AdditionalProperties
func (a Commitstatus) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Refname != nil {
		object["refname"], err = json.Marshal(a.Refname)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'refname': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Url != nil {
		object["url"], err = json.Marshal(a.Url)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Component. Returns the specified
// element and whether it was found
func (a Component) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Component
func (a *Component) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Component to handle AdditionalProperties
func (a *Component) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Component to handle AdditionalProperties
func (a Component) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DefaultReviewerAndType. Returns the specified
// element and whether it was found
func (a DefaultReviewerAndType) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DefaultReviewerAndType
func (a *DefaultReviewerAndType) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DefaultReviewerAndType to handle AdditionalProperties
func (a *DefaultReviewerAndType) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["reviewer_type"]; found {
		err = json.Unmarshal(raw, &a.ReviewerType)
		if err != nil {
			return fmt.Errorf("error reading 'reviewer_type': %w", err)
		}
		delete(object, "reviewer_type")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DefaultReviewerAndType to handle AdditionalProperties
func (a DefaultReviewerAndType) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.ReviewerType != nil {
		object["reviewer_type"], err = json.Marshal(a.ReviewerType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reviewer_type': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeployKey. Returns the specified
// element and whether it was found
func (a DeployKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeployKey
func (a *DeployKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeployKey to handle AdditionalProperties
func (a *DeployKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["added_on"]; found {
		err = json.Unmarshal(raw, &a.AddedOn)
		if err != nil {
			return fmt.Errorf("error reading 'added_on': %w", err)
		}
		delete(object, "added_on")
	}

	if raw, found := object["comment"]; found {
		err = json.Unmarshal(raw, &a.Comment)
		if err != nil {
			return fmt.Errorf("error reading 'comment': %w", err)
		}
		delete(object, "comment")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["label"]; found {
		err = json.Unmarshal(raw, &a.Label)
		if err != nil {
			return fmt.Errorf("error reading 'label': %w", err)
		}
		delete(object, "label")
	}

	if raw, found := object["last_used"]; found {
		err = json.Unmarshal(raw, &a.LastUsed)
		if err != nil {
			return fmt.Errorf("error reading 'last_used': %w", err)
		}
		delete(object, "last_used")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeployKey to handle AdditionalProperties
func (a DeployKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddedOn != nil {
		object["added_on"], err = json.Marshal(a.AddedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'added_on': %w", err)
		}
	}

	if a.Comment != nil {
		object["comment"], err = json.Marshal(a.Comment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'comment': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Label != nil {
		object["label"], err = json.Marshal(a.Label)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'label': %w", err)
		}
	}

	if a.LastUsed != nil {
		object["last_used"], err = json.Marshal(a.LastUsed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last_used': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Deployment. Returns the specified
// element and whether it was found
func (a Deployment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Deployment
func (a *Deployment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Deployment to handle AdditionalProperties
func (a *Deployment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["environment"]; found {
		err = json.Unmarshal(raw, &a.Environment)
		if err != nil {
			return fmt.Errorf("error reading 'environment': %w", err)
		}
		delete(object, "environment")
	}

	if raw, found := object["release"]; found {
		err = json.Unmarshal(raw, &a.Release)
		if err != nil {
			return fmt.Errorf("error reading 'release': %w", err)
		}
		delete(object, "release")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Deployment to handle AdditionalProperties
func (a Deployment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Environment != nil {
		object["environment"], err = json.Marshal(a.Environment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'environment': %w", err)
		}
	}

	if a.Release != nil {
		object["release"], err = json.Marshal(a.Release)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'release': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeploymentEnvironment. Returns the specified
// element and whether it was found
func (a DeploymentEnvironment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeploymentEnvironment
func (a *DeploymentEnvironment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeploymentEnvironment to handle AdditionalProperties
func (a *DeploymentEnvironment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeploymentEnvironment to handle AdditionalProperties
func (a DeploymentEnvironment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeploymentRelease. Returns the specified
// element and whether it was found
func (a DeploymentRelease) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeploymentRelease
func (a *DeploymentRelease) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeploymentRelease to handle AdditionalProperties
func (a *DeploymentRelease) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["commit"]; found {
		err = json.Unmarshal(raw, &a.Commit)
		if err != nil {
			return fmt.Errorf("error reading 'commit': %w", err)
		}
		delete(object, "commit")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.Url)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeploymentRelease to handle AdditionalProperties
func (a DeploymentRelease) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Commit != nil {
		object["commit"], err = json.Marshal(a.Commit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commit': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Url != nil {
		object["url"], err = json.Marshal(a.Url)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeploymentState. Returns the specified
// element and whether it was found
func (a DeploymentState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeploymentState
func (a *DeploymentState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeploymentState to handle AdditionalProperties
func (a *DeploymentState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeploymentState to handle AdditionalProperties
func (a DeploymentState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for DeploymentVariable. Returns the specified
// element and whether it was found
func (a DeploymentVariable) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for DeploymentVariable
func (a *DeploymentVariable) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for DeploymentVariable to handle AdditionalProperties
func (a *DeploymentVariable) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["secured"]; found {
		err = json.Unmarshal(raw, &a.Secured)
		if err != nil {
			return fmt.Errorf("error reading 'secured': %w", err)
		}
		delete(object, "secured")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for DeploymentVariable to handle AdditionalProperties
func (a DeploymentVariable) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Secured != nil {
		object["secured"], err = json.Marshal(a.Secured)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secured': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Diffstat. Returns the specified
// element and whether it was found
func (a Diffstat) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Diffstat
func (a *Diffstat) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Diffstat to handle AdditionalProperties
func (a *Diffstat) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["lines_added"]; found {
		err = json.Unmarshal(raw, &a.LinesAdded)
		if err != nil {
			return fmt.Errorf("error reading 'lines_added': %w", err)
		}
		delete(object, "lines_added")
	}

	if raw, found := object["lines_removed"]; found {
		err = json.Unmarshal(raw, &a.LinesRemoved)
		if err != nil {
			return fmt.Errorf("error reading 'lines_removed': %w", err)
		}
		delete(object, "lines_removed")
	}

	if raw, found := object["new"]; found {
		err = json.Unmarshal(raw, &a.New)
		if err != nil {
			return fmt.Errorf("error reading 'new': %w", err)
		}
		delete(object, "new")
	}

	if raw, found := object["old"]; found {
		err = json.Unmarshal(raw, &a.Old)
		if err != nil {
			return fmt.Errorf("error reading 'old': %w", err)
		}
		delete(object, "old")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Diffstat to handle AdditionalProperties
func (a Diffstat) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.LinesAdded != nil {
		object["lines_added"], err = json.Marshal(a.LinesAdded)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lines_added': %w", err)
		}
	}

	if a.LinesRemoved != nil {
		object["lines_removed"], err = json.Marshal(a.LinesRemoved)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'lines_removed': %w", err)
		}
	}

	if a.New != nil {
		object["new"], err = json.Marshal(a.New)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'new': %w", err)
		}
	}

	if a.Old != nil {
		object["old"], err = json.Marshal(a.Old)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'old': %w", err)
		}
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EffectiveRepoBranchingModel. Returns the specified
// element and whether it was found
func (a EffectiveRepoBranchingModel) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EffectiveRepoBranchingModel
func (a *EffectiveRepoBranchingModel) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EffectiveRepoBranchingModel to handle AdditionalProperties
func (a *EffectiveRepoBranchingModel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch_types"]; found {
		err = json.Unmarshal(raw, &a.BranchTypes)
		if err != nil {
			return fmt.Errorf("error reading 'branch_types': %w", err)
		}
		delete(object, "branch_types")
	}

	if raw, found := object["development"]; found {
		err = json.Unmarshal(raw, &a.Development)
		if err != nil {
			return fmt.Errorf("error reading 'development': %w", err)
		}
		delete(object, "development")
	}

	if raw, found := object["production"]; found {
		err = json.Unmarshal(raw, &a.Production)
		if err != nil {
			return fmt.Errorf("error reading 'production': %w", err)
		}
		delete(object, "production")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EffectiveRepoBranchingModel to handle AdditionalProperties
func (a EffectiveRepoBranchingModel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BranchTypes != nil {
		object["branch_types"], err = json.Marshal(a.BranchTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'branch_types': %w", err)
		}
	}

	if a.Development != nil {
		object["development"], err = json.Marshal(a.Development)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'development': %w", err)
		}
	}

	if a.Production != nil {
		object["production"], err = json.Marshal(a.Production)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'production': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Error. Returns the specified
// element and whether it was found
func (a Error) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Error
func (a *Error) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Error to handle AdditionalProperties
func (a *Error) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["error"]; found {
		err = json.Unmarshal(raw, &a.Error)
		if err != nil {
			return fmt.Errorf("error reading 'error': %w", err)
		}
		delete(object, "error")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Error to handle AdditionalProperties
func (a Error) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Error != nil {
		object["error"], err = json.Marshal(a.Error)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'error': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ExportOptions. Returns the specified
// element and whether it was found
func (a ExportOptions) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ExportOptions
func (a *ExportOptions) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ExportOptions to handle AdditionalProperties
func (a *ExportOptions) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["include_attachments"]; found {
		err = json.Unmarshal(raw, &a.IncludeAttachments)
		if err != nil {
			return fmt.Errorf("error reading 'include_attachments': %w", err)
		}
		delete(object, "include_attachments")
	}

	if raw, found := object["project_key"]; found {
		err = json.Unmarshal(raw, &a.ProjectKey)
		if err != nil {
			return fmt.Errorf("error reading 'project_key': %w", err)
		}
		delete(object, "project_key")
	}

	if raw, found := object["project_name"]; found {
		err = json.Unmarshal(raw, &a.ProjectName)
		if err != nil {
			return fmt.Errorf("error reading 'project_name': %w", err)
		}
		delete(object, "project_name")
	}

	if raw, found := object["send_email"]; found {
		err = json.Unmarshal(raw, &a.SendEmail)
		if err != nil {
			return fmt.Errorf("error reading 'send_email': %w", err)
		}
		delete(object, "send_email")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ExportOptions to handle AdditionalProperties
func (a ExportOptions) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.IncludeAttachments != nil {
		object["include_attachments"], err = json.Marshal(a.IncludeAttachments)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'include_attachments': %w", err)
		}
	}

	if a.ProjectKey != nil {
		object["project_key"], err = json.Marshal(a.ProjectKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project_key': %w", err)
		}
	}

	if a.ProjectName != nil {
		object["project_name"], err = json.Marshal(a.ProjectName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project_name': %w", err)
		}
	}

	if a.SendEmail != nil {
		object["send_email"], err = json.Marshal(a.SendEmail)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'send_email': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Group. Returns the specified
// element and whether it was found
func (a Group) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Group
func (a *Group) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Group to handle AdditionalProperties
func (a *Group) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["full_slug"]; found {
		err = json.Unmarshal(raw, &a.FullSlug)
		if err != nil {
			return fmt.Errorf("error reading 'full_slug': %w", err)
		}
		delete(object, "full_slug")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["slug"]; found {
		err = json.Unmarshal(raw, &a.Slug)
		if err != nil {
			return fmt.Errorf("error reading 'slug': %w", err)
		}
		delete(object, "slug")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["workspace"]; found {
		err = json.Unmarshal(raw, &a.Workspace)
		if err != nil {
			return fmt.Errorf("error reading 'workspace': %w", err)
		}
		delete(object, "workspace")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Group to handle AdditionalProperties
func (a Group) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.FullSlug != nil {
		object["full_slug"], err = json.Marshal(a.FullSlug)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'full_slug': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	if a.Slug != nil {
		object["slug"], err = json.Marshal(a.Slug)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slug': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Workspace != nil {
		object["workspace"], err = json.Marshal(a.Workspace)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'workspace': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Issue. Returns the specified
// element and whether it was found
func (a Issue) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Issue
func (a *Issue) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Issue to handle AdditionalProperties
func (a *Issue) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["assignee"]; found {
		err = json.Unmarshal(raw, &a.Assignee)
		if err != nil {
			return fmt.Errorf("error reading 'assignee': %w", err)
		}
		delete(object, "assignee")
	}

	if raw, found := object["component"]; found {
		err = json.Unmarshal(raw, &a.Component)
		if err != nil {
			return fmt.Errorf("error reading 'component': %w", err)
		}
		delete(object, "component")
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return fmt.Errorf("error reading 'content': %w", err)
		}
		delete(object, "content")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["edited_on"]; found {
		err = json.Unmarshal(raw, &a.EditedOn)
		if err != nil {
			return fmt.Errorf("error reading 'edited_on': %w", err)
		}
		delete(object, "edited_on")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["kind"]; found {
		err = json.Unmarshal(raw, &a.Kind)
		if err != nil {
			return fmt.Errorf("error reading 'kind': %w", err)
		}
		delete(object, "kind")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["milestone"]; found {
		err = json.Unmarshal(raw, &a.Milestone)
		if err != nil {
			return fmt.Errorf("error reading 'milestone': %w", err)
		}
		delete(object, "milestone")
	}

	if raw, found := object["priority"]; found {
		err = json.Unmarshal(raw, &a.Priority)
		if err != nil {
			return fmt.Errorf("error reading 'priority': %w", err)
		}
		delete(object, "priority")
	}

	if raw, found := object["reporter"]; found {
		err = json.Unmarshal(raw, &a.Reporter)
		if err != nil {
			return fmt.Errorf("error reading 'reporter': %w", err)
		}
		delete(object, "reporter")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["version"]; found {
		err = json.Unmarshal(raw, &a.Version)
		if err != nil {
			return fmt.Errorf("error reading 'version': %w", err)
		}
		delete(object, "version")
	}

	if raw, found := object["votes"]; found {
		err = json.Unmarshal(raw, &a.Votes)
		if err != nil {
			return fmt.Errorf("error reading 'votes': %w", err)
		}
		delete(object, "votes")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Issue to handle AdditionalProperties
func (a Issue) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Assignee != nil {
		object["assignee"], err = json.Marshal(a.Assignee)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'assignee': %w", err)
		}
	}

	if a.Component != nil {
		object["component"], err = json.Marshal(a.Component)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'component': %w", err)
		}
	}

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.EditedOn != nil {
		object["edited_on"], err = json.Marshal(a.EditedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'edited_on': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Kind != nil {
		object["kind"], err = json.Marshal(a.Kind)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'kind': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Milestone != nil {
		object["milestone"], err = json.Marshal(a.Milestone)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'milestone': %w", err)
		}
	}

	if a.Priority != nil {
		object["priority"], err = json.Marshal(a.Priority)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'priority': %w", err)
		}
	}

	if a.Reporter != nil {
		object["reporter"], err = json.Marshal(a.Reporter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reporter': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Version != nil {
		object["version"], err = json.Marshal(a.Version)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'version': %w", err)
		}
	}

	if a.Votes != nil {
		object["votes"], err = json.Marshal(a.Votes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'votes': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IssueAttachment. Returns the specified
// element and whether it was found
func (a IssueAttachment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IssueAttachment
func (a *IssueAttachment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IssueAttachment to handle AdditionalProperties
func (a *IssueAttachment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IssueAttachment to handle AdditionalProperties
func (a IssueAttachment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IssueChange. Returns the specified
// element and whether it was found
func (a IssueChange) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IssueChange
func (a *IssueChange) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IssueChange to handle AdditionalProperties
func (a *IssueChange) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["changes"]; found {
		err = json.Unmarshal(raw, &a.Changes)
		if err != nil {
			return fmt.Errorf("error reading 'changes': %w", err)
		}
		delete(object, "changes")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["issue"]; found {
		err = json.Unmarshal(raw, &a.Issue)
		if err != nil {
			return fmt.Errorf("error reading 'issue': %w", err)
		}
		delete(object, "issue")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IssueChange to handle AdditionalProperties
func (a IssueChange) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Changes != nil {
		object["changes"], err = json.Marshal(a.Changes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'changes': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Issue != nil {
		object["issue"], err = json.Marshal(a.Issue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'issue': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IssueComment. Returns the specified
// element and whether it was found
func (a IssueComment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IssueComment
func (a *IssueComment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IssueComment to handle AdditionalProperties
func (a *IssueComment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return fmt.Errorf("error reading 'content': %w", err)
		}
		delete(object, "content")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["deleted"]; found {
		err = json.Unmarshal(raw, &a.Deleted)
		if err != nil {
			return fmt.Errorf("error reading 'deleted': %w", err)
		}
		delete(object, "deleted")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["inline"]; found {
		err = json.Unmarshal(raw, &a.Inline)
		if err != nil {
			return fmt.Errorf("error reading 'inline': %w", err)
		}
		delete(object, "inline")
	}

	if raw, found := object["issue"]; found {
		err = json.Unmarshal(raw, &a.Issue)
		if err != nil {
			return fmt.Errorf("error reading 'issue': %w", err)
		}
		delete(object, "issue")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["parent"]; found {
		err = json.Unmarshal(raw, &a.Parent)
		if err != nil {
			return fmt.Errorf("error reading 'parent': %w", err)
		}
		delete(object, "parent")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IssueComment to handle AdditionalProperties
func (a IssueComment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Deleted != nil {
		object["deleted"], err = json.Marshal(a.Deleted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deleted': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Inline != nil {
		object["inline"], err = json.Marshal(a.Inline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inline': %w", err)
		}
	}

	if a.Issue != nil {
		object["issue"], err = json.Marshal(a.Issue)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'issue': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Parent != nil {
		object["parent"], err = json.Marshal(a.Parent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Milestone. Returns the specified
// element and whether it was found
func (a Milestone) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Milestone
func (a *Milestone) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Milestone to handle AdditionalProperties
func (a *Milestone) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Milestone to handle AdditionalProperties
func (a Milestone) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Object. Returns the specified
// element and whether it was found
func (a Object) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Object
func (a *Object) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Object to handle AdditionalProperties
func (a *Object) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Object to handle AdditionalProperties
func (a Object) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Participant. Returns the specified
// element and whether it was found
func (a Participant) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Participant
func (a *Participant) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Participant to handle AdditionalProperties
func (a *Participant) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["approved"]; found {
		err = json.Unmarshal(raw, &a.Approved)
		if err != nil {
			return fmt.Errorf("error reading 'approved': %w", err)
		}
		delete(object, "approved")
	}

	if raw, found := object["participated_on"]; found {
		err = json.Unmarshal(raw, &a.ParticipatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'participated_on': %w", err)
		}
		delete(object, "participated_on")
	}

	if raw, found := object["role"]; found {
		err = json.Unmarshal(raw, &a.Role)
		if err != nil {
			return fmt.Errorf("error reading 'role': %w", err)
		}
		delete(object, "role")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Participant to handle AdditionalProperties
func (a Participant) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Approved != nil {
		object["approved"], err = json.Marshal(a.Approved)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'approved': %w", err)
		}
	}

	if a.ParticipatedOn != nil {
		object["participated_on"], err = json.Marshal(a.ParticipatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'participated_on': %w", err)
		}
	}

	if a.Role != nil {
		object["role"], err = json.Marshal(a.Role)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'role': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pipeline. Returns the specified
// element and whether it was found
func (a Pipeline) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pipeline
func (a *Pipeline) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pipeline to handle AdditionalProperties
func (a *Pipeline) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["build_number"]; found {
		err = json.Unmarshal(raw, &a.BuildNumber)
		if err != nil {
			return fmt.Errorf("error reading 'build_number': %w", err)
		}
		delete(object, "build_number")
	}

	if raw, found := object["build_seconds_used"]; found {
		err = json.Unmarshal(raw, &a.BuildSecondsUsed)
		if err != nil {
			return fmt.Errorf("error reading 'build_seconds_used': %w", err)
		}
		delete(object, "build_seconds_used")
	}

	if raw, found := object["completed_on"]; found {
		err = json.Unmarshal(raw, &a.CompletedOn)
		if err != nil {
			return fmt.Errorf("error reading 'completed_on': %w", err)
		}
		delete(object, "completed_on")
	}

	if raw, found := object["configuration_sources"]; found {
		err = json.Unmarshal(raw, &a.ConfigurationSources)
		if err != nil {
			return fmt.Errorf("error reading 'configuration_sources': %w", err)
		}
		delete(object, "configuration_sources")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["creator"]; found {
		err = json.Unmarshal(raw, &a.Creator)
		if err != nil {
			return fmt.Errorf("error reading 'creator': %w", err)
		}
		delete(object, "creator")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["trigger"]; found {
		err = json.Unmarshal(raw, &a.Trigger)
		if err != nil {
			return fmt.Errorf("error reading 'trigger': %w", err)
		}
		delete(object, "trigger")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if raw, found := object["variables"]; found {
		err = json.Unmarshal(raw, &a.Variables)
		if err != nil {
			return fmt.Errorf("error reading 'variables': %w", err)
		}
		delete(object, "variables")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pipeline to handle AdditionalProperties
func (a Pipeline) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BuildNumber != nil {
		object["build_number"], err = json.Marshal(a.BuildNumber)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'build_number': %w", err)
		}
	}

	if a.BuildSecondsUsed != nil {
		object["build_seconds_used"], err = json.Marshal(a.BuildSecondsUsed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'build_seconds_used': %w", err)
		}
	}

	if a.CompletedOn != nil {
		object["completed_on"], err = json.Marshal(a.CompletedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'completed_on': %w", err)
		}
	}

	if a.ConfigurationSources != nil {
		object["configuration_sources"], err = json.Marshal(a.ConfigurationSources)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'configuration_sources': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Creator != nil {
		object["creator"], err = json.Marshal(a.Creator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'creator': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	if a.Target != nil {
		object["target"], err = json.Marshal(a.Target)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'target': %w", err)
		}
	}

	if a.Trigger != nil {
		object["trigger"], err = json.Marshal(a.Trigger)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'trigger': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	if a.Variables != nil {
		object["variables"], err = json.Marshal(a.Variables)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'variables': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineBuildNumber. Returns the specified
// element and whether it was found
func (a PipelineBuildNumber) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineBuildNumber
func (a *PipelineBuildNumber) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineBuildNumber to handle AdditionalProperties
func (a *PipelineBuildNumber) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["next"]; found {
		err = json.Unmarshal(raw, &a.Next)
		if err != nil {
			return fmt.Errorf("error reading 'next': %w", err)
		}
		delete(object, "next")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineBuildNumber to handle AdditionalProperties
func (a PipelineBuildNumber) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Next != nil {
		object["next"], err = json.Marshal(a.Next)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'next': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineCache. Returns the specified
// element and whether it was found
func (a PipelineCache) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineCache
func (a *PipelineCache) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineCache to handle AdditionalProperties
func (a *PipelineCache) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["file_size_bytes"]; found {
		err = json.Unmarshal(raw, &a.FileSizeBytes)
		if err != nil {
			return fmt.Errorf("error reading 'file_size_bytes': %w", err)
		}
		delete(object, "file_size_bytes")
	}

	if raw, found := object["key_hash"]; found {
		err = json.Unmarshal(raw, &a.KeyHash)
		if err != nil {
			return fmt.Errorf("error reading 'key_hash': %w", err)
		}
		delete(object, "key_hash")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["pipeline_uuid"]; found {
		err = json.Unmarshal(raw, &a.PipelineUuid)
		if err != nil {
			return fmt.Errorf("error reading 'pipeline_uuid': %w", err)
		}
		delete(object, "pipeline_uuid")
	}

	if raw, found := object["step_uuid"]; found {
		err = json.Unmarshal(raw, &a.StepUuid)
		if err != nil {
			return fmt.Errorf("error reading 'step_uuid': %w", err)
		}
		delete(object, "step_uuid")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineCache to handle AdditionalProperties
func (a PipelineCache) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.FileSizeBytes != nil {
		object["file_size_bytes"], err = json.Marshal(a.FileSizeBytes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'file_size_bytes': %w", err)
		}
	}

	if a.KeyHash != nil {
		object["key_hash"], err = json.Marshal(a.KeyHash)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key_hash': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Path != nil {
		object["path"], err = json.Marshal(a.Path)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'path': %w", err)
		}
	}

	if a.PipelineUuid != nil {
		object["pipeline_uuid"], err = json.Marshal(a.PipelineUuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pipeline_uuid': %w", err)
		}
	}

	if a.StepUuid != nil {
		object["step_uuid"], err = json.Marshal(a.StepUuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'step_uuid': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineKnownHost. Returns the specified
// element and whether it was found
func (a PipelineKnownHost) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineKnownHost
func (a *PipelineKnownHost) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineKnownHost to handle AdditionalProperties
func (a *PipelineKnownHost) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["hostname"]; found {
		err = json.Unmarshal(raw, &a.Hostname)
		if err != nil {
			return fmt.Errorf("error reading 'hostname': %w", err)
		}
		delete(object, "hostname")
	}

	if raw, found := object["public_key"]; found {
		err = json.Unmarshal(raw, &a.PublicKey)
		if err != nil {
			return fmt.Errorf("error reading 'public_key': %w", err)
		}
		delete(object, "public_key")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineKnownHost to handle AdditionalProperties
func (a PipelineKnownHost) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Hostname != nil {
		object["hostname"], err = json.Marshal(a.Hostname)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hostname': %w", err)
		}
	}

	if a.PublicKey != nil {
		object["public_key"], err = json.Marshal(a.PublicKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'public_key': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineRefTarget. Returns the specified
// element and whether it was found
func (a PipelineRefTarget) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineRefTarget
func (a *PipelineRefTarget) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineRefTarget to handle AdditionalProperties
func (a *PipelineRefTarget) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["commit"]; found {
		err = json.Unmarshal(raw, &a.Commit)
		if err != nil {
			return fmt.Errorf("error reading 'commit': %w", err)
		}
		delete(object, "commit")
	}

	if raw, found := object["ref_name"]; found {
		err = json.Unmarshal(raw, &a.RefName)
		if err != nil {
			return fmt.Errorf("error reading 'ref_name': %w", err)
		}
		delete(object, "ref_name")
	}

	if raw, found := object["ref_type"]; found {
		err = json.Unmarshal(raw, &a.RefType)
		if err != nil {
			return fmt.Errorf("error reading 'ref_type': %w", err)
		}
		delete(object, "ref_type")
	}

	if raw, found := object["selector"]; found {
		err = json.Unmarshal(raw, &a.Selector)
		if err != nil {
			return fmt.Errorf("error reading 'selector': %w", err)
		}
		delete(object, "selector")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineRefTarget to handle AdditionalProperties
func (a PipelineRefTarget) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Commit != nil {
		object["commit"], err = json.Marshal(a.Commit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commit': %w", err)
		}
	}

	if a.RefName != nil {
		object["ref_name"], err = json.Marshal(a.RefName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ref_name': %w", err)
		}
	}

	if a.RefType != nil {
		object["ref_type"], err = json.Marshal(a.RefType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ref_type': %w", err)
		}
	}

	if a.Selector != nil {
		object["selector"], err = json.Marshal(a.Selector)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'selector': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSchedule. Returns the specified
// element and whether it was found
func (a PipelineSchedule) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSchedule
func (a *PipelineSchedule) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSchedule to handle AdditionalProperties
func (a *PipelineSchedule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["cron_pattern"]; found {
		err = json.Unmarshal(raw, &a.CronPattern)
		if err != nil {
			return fmt.Errorf("error reading 'cron_pattern': %w", err)
		}
		delete(object, "cron_pattern")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return fmt.Errorf("error reading 'enabled': %w", err)
		}
		delete(object, "enabled")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSchedule to handle AdditionalProperties
func (a PipelineSchedule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.CronPattern != nil {
		object["cron_pattern"], err = json.Marshal(a.CronPattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'cron_pattern': %w", err)
		}
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enabled': %w", err)
		}
	}

	if a.Target != nil {
		object["target"], err = json.Marshal(a.Target)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'target': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineScheduleExecution. Returns the specified
// element and whether it was found
func (a PipelineScheduleExecution) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineScheduleExecution
func (a *PipelineScheduleExecution) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineScheduleExecution to handle AdditionalProperties
func (a *PipelineScheduleExecution) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineScheduleExecution to handle AdditionalProperties
func (a PipelineScheduleExecution) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSchedulePostRequestBody. Returns the specified
// element and whether it was found
func (a PipelineSchedulePostRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSchedulePostRequestBody
func (a *PipelineSchedulePostRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSchedulePostRequestBody to handle AdditionalProperties
func (a *PipelineSchedulePostRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["cron_pattern"]; found {
		err = json.Unmarshal(raw, &a.CronPattern)
		if err != nil {
			return fmt.Errorf("error reading 'cron_pattern': %w", err)
		}
		delete(object, "cron_pattern")
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return fmt.Errorf("error reading 'enabled': %w", err)
		}
		delete(object, "enabled")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSchedulePostRequestBody to handle AdditionalProperties
func (a PipelineSchedulePostRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["cron_pattern"], err = json.Marshal(a.CronPattern)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'cron_pattern': %w", err)
	}

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enabled': %w", err)
		}
	}

	object["target"], err = json.Marshal(a.Target)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'target': %w", err)
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSchedulePutRequestBody. Returns the specified
// element and whether it was found
func (a PipelineSchedulePutRequestBody) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSchedulePutRequestBody
func (a *PipelineSchedulePutRequestBody) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSchedulePutRequestBody to handle AdditionalProperties
func (a *PipelineSchedulePutRequestBody) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return fmt.Errorf("error reading 'enabled': %w", err)
		}
		delete(object, "enabled")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSchedulePutRequestBody to handle AdditionalProperties
func (a PipelineSchedulePutRequestBody) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enabled': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSelector. Returns the specified
// element and whether it was found
func (a PipelineSelector) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSelector
func (a *PipelineSelector) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSelector to handle AdditionalProperties
func (a *PipelineSelector) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["pattern"]; found {
		err = json.Unmarshal(raw, &a.Pattern)
		if err != nil {
			return fmt.Errorf("error reading 'pattern': %w", err)
		}
		delete(object, "pattern")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSelector to handle AdditionalProperties
func (a PipelineSelector) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Pattern != nil {
		object["pattern"], err = json.Marshal(a.Pattern)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pattern': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSshKeyPair. Returns the specified
// element and whether it was found
func (a PipelineSshKeyPair) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSshKeyPair
func (a *PipelineSshKeyPair) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSshKeyPair to handle AdditionalProperties
func (a *PipelineSshKeyPair) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["private_key"]; found {
		err = json.Unmarshal(raw, &a.PrivateKey)
		if err != nil {
			return fmt.Errorf("error reading 'private_key': %w", err)
		}
		delete(object, "private_key")
	}

	if raw, found := object["public_key"]; found {
		err = json.Unmarshal(raw, &a.PublicKey)
		if err != nil {
			return fmt.Errorf("error reading 'public_key': %w", err)
		}
		delete(object, "public_key")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSshKeyPair to handle AdditionalProperties
func (a PipelineSshKeyPair) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.PrivateKey != nil {
		object["private_key"], err = json.Marshal(a.PrivateKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'private_key': %w", err)
		}
	}

	if a.PublicKey != nil {
		object["public_key"], err = json.Marshal(a.PublicKey)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'public_key': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineSshPublicKey. Returns the specified
// element and whether it was found
func (a PipelineSshPublicKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineSshPublicKey
func (a *PipelineSshPublicKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineSshPublicKey to handle AdditionalProperties
func (a *PipelineSshPublicKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["key_type"]; found {
		err = json.Unmarshal(raw, &a.KeyType)
		if err != nil {
			return fmt.Errorf("error reading 'key_type': %w", err)
		}
		delete(object, "key_type")
	}

	if raw, found := object["md5_fingerprint"]; found {
		err = json.Unmarshal(raw, &a.Md5Fingerprint)
		if err != nil {
			return fmt.Errorf("error reading 'md5_fingerprint': %w", err)
		}
		delete(object, "md5_fingerprint")
	}

	if raw, found := object["sha256_fingerprint"]; found {
		err = json.Unmarshal(raw, &a.Sha256Fingerprint)
		if err != nil {
			return fmt.Errorf("error reading 'sha256_fingerprint': %w", err)
		}
		delete(object, "sha256_fingerprint")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineSshPublicKey to handle AdditionalProperties
func (a PipelineSshPublicKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.KeyType != nil {
		object["key_type"], err = json.Marshal(a.KeyType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key_type': %w", err)
		}
	}

	if a.Md5Fingerprint != nil {
		object["md5_fingerprint"], err = json.Marshal(a.Md5Fingerprint)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'md5_fingerprint': %w", err)
		}
	}

	if a.Sha256Fingerprint != nil {
		object["sha256_fingerprint"], err = json.Marshal(a.Sha256Fingerprint)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'sha256_fingerprint': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineState. Returns the specified
// element and whether it was found
func (a PipelineState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineState
func (a *PipelineState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineState to handle AdditionalProperties
func (a *PipelineState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineState to handle AdditionalProperties
func (a PipelineState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStep. Returns the specified
// element and whether it was found
func (a PipelineStep) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStep
func (a *PipelineStep) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStep to handle AdditionalProperties
func (a *PipelineStep) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["completed_on"]; found {
		err = json.Unmarshal(raw, &a.CompletedOn)
		if err != nil {
			return fmt.Errorf("error reading 'completed_on': %w", err)
		}
		delete(object, "completed_on")
	}

	if raw, found := object["image"]; found {
		err = json.Unmarshal(raw, &a.Image)
		if err != nil {
			return fmt.Errorf("error reading 'image': %w", err)
		}
		delete(object, "image")
	}

	if raw, found := object["script_commands"]; found {
		err = json.Unmarshal(raw, &a.ScriptCommands)
		if err != nil {
			return fmt.Errorf("error reading 'script_commands': %w", err)
		}
		delete(object, "script_commands")
	}

	if raw, found := object["setup_commands"]; found {
		err = json.Unmarshal(raw, &a.SetupCommands)
		if err != nil {
			return fmt.Errorf("error reading 'setup_commands': %w", err)
		}
		delete(object, "setup_commands")
	}

	if raw, found := object["started_on"]; found {
		err = json.Unmarshal(raw, &a.StartedOn)
		if err != nil {
			return fmt.Errorf("error reading 'started_on': %w", err)
		}
		delete(object, "started_on")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStep to handle AdditionalProperties
func (a PipelineStep) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CompletedOn != nil {
		object["completed_on"], err = json.Marshal(a.CompletedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'completed_on': %w", err)
		}
	}

	if a.Image != nil {
		object["image"], err = json.Marshal(a.Image)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'image': %w", err)
		}
	}

	if a.ScriptCommands != nil {
		object["script_commands"], err = json.Marshal(a.ScriptCommands)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'script_commands': %w", err)
		}
	}

	if a.SetupCommands != nil {
		object["setup_commands"], err = json.Marshal(a.SetupCommands)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'setup_commands': %w", err)
		}
	}

	if a.StartedOn != nil {
		object["started_on"], err = json.Marshal(a.StartedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'started_on': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineStepState. Returns the specified
// element and whether it was found
func (a PipelineStepState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineStepState
func (a *PipelineStepState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineStepState to handle AdditionalProperties
func (a *PipelineStepState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineStepState to handle AdditionalProperties
func (a PipelineStepState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineTarget. Returns the specified
// element and whether it was found
func (a PipelineTarget) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineTarget
func (a *PipelineTarget) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineTarget to handle AdditionalProperties
func (a *PipelineTarget) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineTarget to handle AdditionalProperties
func (a PipelineTarget) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineTrigger. Returns the specified
// element and whether it was found
func (a PipelineTrigger) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineTrigger
func (a *PipelineTrigger) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineTrigger to handle AdditionalProperties
func (a *PipelineTrigger) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineTrigger to handle AdditionalProperties
func (a PipelineTrigger) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelineVariable. Returns the specified
// element and whether it was found
func (a PipelineVariable) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelineVariable
func (a *PipelineVariable) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelineVariable to handle AdditionalProperties
func (a *PipelineVariable) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["secured"]; found {
		err = json.Unmarshal(raw, &a.Secured)
		if err != nil {
			return fmt.Errorf("error reading 'secured': %w", err)
		}
		delete(object, "secured")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if raw, found := object["value"]; found {
		err = json.Unmarshal(raw, &a.Value)
		if err != nil {
			return fmt.Errorf("error reading 'value': %w", err)
		}
		delete(object, "value")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelineVariable to handle AdditionalProperties
func (a PipelineVariable) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Secured != nil {
		object["secured"], err = json.Marshal(a.Secured)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secured': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	if a.Value != nil {
		object["value"], err = json.Marshal(a.Value)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'value': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelinesConfig. Returns the specified
// element and whether it was found
func (a PipelinesConfig) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelinesConfig
func (a *PipelinesConfig) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelinesConfig to handle AdditionalProperties
func (a *PipelinesConfig) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["enabled"]; found {
		err = json.Unmarshal(raw, &a.Enabled)
		if err != nil {
			return fmt.Errorf("error reading 'enabled': %w", err)
		}
		delete(object, "enabled")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelinesConfig to handle AdditionalProperties
func (a PipelinesConfig) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Enabled != nil {
		object["enabled"], err = json.Marshal(a.Enabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'enabled': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelinesLinksSectionHref. Returns the specified
// element and whether it was found
func (a PipelinesLinksSectionHref) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelinesLinksSectionHref
func (a *PipelinesLinksSectionHref) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelinesLinksSectionHref to handle AdditionalProperties
func (a *PipelinesLinksSectionHref) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["href"]; found {
		err = json.Unmarshal(raw, &a.Href)
		if err != nil {
			return fmt.Errorf("error reading 'href': %w", err)
		}
		delete(object, "href")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelinesLinksSectionHref to handle AdditionalProperties
func (a PipelinesLinksSectionHref) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Href != nil {
		object["href"], err = json.Marshal(a.Href)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'href': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PipelinesPipelineLinks. Returns the specified
// element and whether it was found
func (a PipelinesPipelineLinks) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PipelinesPipelineLinks
func (a *PipelinesPipelineLinks) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PipelinesPipelineLinks to handle AdditionalProperties
func (a *PipelinesPipelineLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if raw, found := object["steps"]; found {
		err = json.Unmarshal(raw, &a.Steps)
		if err != nil {
			return fmt.Errorf("error reading 'steps': %w", err)
		}
		delete(object, "steps")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PipelinesPipelineLinks to handle AdditionalProperties
func (a PipelinesPipelineLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	if a.Steps != nil {
		object["steps"], err = json.Marshal(a.Steps)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'steps': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Project. Returns the specified
// element and whether it was found
func (a Project) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Project
func (a *Project) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Project to handle AdditionalProperties
func (a *Project) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["has_publicly_visible_repos"]; found {
		err = json.Unmarshal(raw, &a.HasPubliclyVisibleRepos)
		if err != nil {
			return fmt.Errorf("error reading 'has_publicly_visible_repos': %w", err)
		}
		delete(object, "has_publicly_visible_repos")
	}

	if raw, found := object["is_private"]; found {
		err = json.Unmarshal(raw, &a.IsPrivate)
		if err != nil {
			return fmt.Errorf("error reading 'is_private': %w", err)
		}
		delete(object, "is_private")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Project to handle AdditionalProperties
func (a Project) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.HasPubliclyVisibleRepos != nil {
		object["has_publicly_visible_repos"], err = json.Marshal(a.HasPubliclyVisibleRepos)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'has_publicly_visible_repos': %w", err)
		}
	}

	if a.IsPrivate != nil {
		object["is_private"], err = json.Marshal(a.IsPrivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_private': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProjectBranchingModel. Returns the specified
// element and whether it was found
func (a ProjectBranchingModel) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectBranchingModel
func (a *ProjectBranchingModel) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectBranchingModel to handle AdditionalProperties
func (a *ProjectBranchingModel) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["branch_types"]; found {
		err = json.Unmarshal(raw, &a.BranchTypes)
		if err != nil {
			return fmt.Errorf("error reading 'branch_types': %w", err)
		}
		delete(object, "branch_types")
	}

	if raw, found := object["development"]; found {
		err = json.Unmarshal(raw, &a.Development)
		if err != nil {
			return fmt.Errorf("error reading 'development': %w", err)
		}
		delete(object, "development")
	}

	if raw, found := object["production"]; found {
		err = json.Unmarshal(raw, &a.Production)
		if err != nil {
			return fmt.Errorf("error reading 'production': %w", err)
		}
		delete(object, "production")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectBranchingModel to handle AdditionalProperties
func (a ProjectBranchingModel) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BranchTypes != nil {
		object["branch_types"], err = json.Marshal(a.BranchTypes)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'branch_types': %w", err)
		}
	}

	if a.Development != nil {
		object["development"], err = json.Marshal(a.Development)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'development': %w", err)
		}
	}

	if a.Production != nil {
		object["production"], err = json.Marshal(a.Production)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'production': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProjectDeployKey. Returns the specified
// element and whether it was found
func (a ProjectDeployKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectDeployKey
func (a *ProjectDeployKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectDeployKey to handle AdditionalProperties
func (a *ProjectDeployKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["added_on"]; found {
		err = json.Unmarshal(raw, &a.AddedOn)
		if err != nil {
			return fmt.Errorf("error reading 'added_on': %w", err)
		}
		delete(object, "added_on")
	}

	if raw, found := object["comment"]; found {
		err = json.Unmarshal(raw, &a.Comment)
		if err != nil {
			return fmt.Errorf("error reading 'comment': %w", err)
		}
		delete(object, "comment")
	}

	if raw, found := object["created_by"]; found {
		err = json.Unmarshal(raw, &a.CreatedBy)
		if err != nil {
			return fmt.Errorf("error reading 'created_by': %w", err)
		}
		delete(object, "created_by")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["label"]; found {
		err = json.Unmarshal(raw, &a.Label)
		if err != nil {
			return fmt.Errorf("error reading 'label': %w", err)
		}
		delete(object, "label")
	}

	if raw, found := object["last_used"]; found {
		err = json.Unmarshal(raw, &a.LastUsed)
		if err != nil {
			return fmt.Errorf("error reading 'last_used': %w", err)
		}
		delete(object, "last_used")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["project"]; found {
		err = json.Unmarshal(raw, &a.Project)
		if err != nil {
			return fmt.Errorf("error reading 'project': %w", err)
		}
		delete(object, "project")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectDeployKey to handle AdditionalProperties
func (a ProjectDeployKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AddedOn != nil {
		object["added_on"], err = json.Marshal(a.AddedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'added_on': %w", err)
		}
	}

	if a.Comment != nil {
		object["comment"], err = json.Marshal(a.Comment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'comment': %w", err)
		}
	}

	if a.CreatedBy != nil {
		object["created_by"], err = json.Marshal(a.CreatedBy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_by': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Label != nil {
		object["label"], err = json.Marshal(a.Label)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'label': %w", err)
		}
	}

	if a.LastUsed != nil {
		object["last_used"], err = json.Marshal(a.LastUsed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last_used': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Project != nil {
		object["project"], err = json.Marshal(a.Project)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProjectGroupPermission. Returns the specified
// element and whether it was found
func (a ProjectGroupPermission) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectGroupPermission
func (a *ProjectGroupPermission) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectGroupPermission to handle AdditionalProperties
func (a *ProjectGroupPermission) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["group"]; found {
		err = json.Unmarshal(raw, &a.Group)
		if err != nil {
			return fmt.Errorf("error reading 'group': %w", err)
		}
		delete(object, "group")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["project"]; found {
		err = json.Unmarshal(raw, &a.Project)
		if err != nil {
			return fmt.Errorf("error reading 'project': %w", err)
		}
		delete(object, "project")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectGroupPermission to handle AdditionalProperties
func (a ProjectGroupPermission) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Group != nil {
		object["group"], err = json.Marshal(a.Group)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'group': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Project != nil {
		object["project"], err = json.Marshal(a.Project)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ProjectUserPermission. Returns the specified
// element and whether it was found
func (a ProjectUserPermission) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ProjectUserPermission
func (a *ProjectUserPermission) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ProjectUserPermission to handle AdditionalProperties
func (a *ProjectUserPermission) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["project"]; found {
		err = json.Unmarshal(raw, &a.Project)
		if err != nil {
			return fmt.Errorf("error reading 'project': %w", err)
		}
		delete(object, "project")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ProjectUserPermission to handle AdditionalProperties
func (a ProjectUserPermission) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Project != nil {
		object["project"], err = json.Marshal(a.Project)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Pullrequest. Returns the specified
// element and whether it was found
func (a Pullrequest) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Pullrequest
func (a *Pullrequest) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Pullrequest to handle AdditionalProperties
func (a *Pullrequest) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["close_source_branch"]; found {
		err = json.Unmarshal(raw, &a.CloseSourceBranch)
		if err != nil {
			return fmt.Errorf("error reading 'close_source_branch': %w", err)
		}
		delete(object, "close_source_branch")
	}

	if raw, found := object["closed_by"]; found {
		err = json.Unmarshal(raw, &a.ClosedBy)
		if err != nil {
			return fmt.Errorf("error reading 'closed_by': %w", err)
		}
		delete(object, "closed_by")
	}

	if raw, found := object["comment_count"]; found {
		err = json.Unmarshal(raw, &a.CommentCount)
		if err != nil {
			return fmt.Errorf("error reading 'comment_count': %w", err)
		}
		delete(object, "comment_count")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["destination"]; found {
		err = json.Unmarshal(raw, &a.Destination)
		if err != nil {
			return fmt.Errorf("error reading 'destination': %w", err)
		}
		delete(object, "destination")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["merge_commit"]; found {
		err = json.Unmarshal(raw, &a.MergeCommit)
		if err != nil {
			return fmt.Errorf("error reading 'merge_commit': %w", err)
		}
		delete(object, "merge_commit")
	}

	if raw, found := object["participants"]; found {
		err = json.Unmarshal(raw, &a.Participants)
		if err != nil {
			return fmt.Errorf("error reading 'participants': %w", err)
		}
		delete(object, "participants")
	}

	if raw, found := object["reason"]; found {
		err = json.Unmarshal(raw, &a.Reason)
		if err != nil {
			return fmt.Errorf("error reading 'reason': %w", err)
		}
		delete(object, "reason")
	}

	if raw, found := object["rendered"]; found {
		err = json.Unmarshal(raw, &a.Rendered)
		if err != nil {
			return fmt.Errorf("error reading 'rendered': %w", err)
		}
		delete(object, "rendered")
	}

	if raw, found := object["reviewers"]; found {
		err = json.Unmarshal(raw, &a.Reviewers)
		if err != nil {
			return fmt.Errorf("error reading 'reviewers': %w", err)
		}
		delete(object, "reviewers")
	}

	if raw, found := object["source"]; found {
		err = json.Unmarshal(raw, &a.Source)
		if err != nil {
			return fmt.Errorf("error reading 'source': %w", err)
		}
		delete(object, "source")
	}

	if raw, found := object["state"]; found {
		err = json.Unmarshal(raw, &a.State)
		if err != nil {
			return fmt.Errorf("error reading 'state': %w", err)
		}
		delete(object, "state")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["task_count"]; found {
		err = json.Unmarshal(raw, &a.TaskCount)
		if err != nil {
			return fmt.Errorf("error reading 'task_count': %w", err)
		}
		delete(object, "task_count")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Pullrequest to handle AdditionalProperties
func (a Pullrequest) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.CloseSourceBranch != nil {
		object["close_source_branch"], err = json.Marshal(a.CloseSourceBranch)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'close_source_branch': %w", err)
		}
	}

	if a.ClosedBy != nil {
		object["closed_by"], err = json.Marshal(a.ClosedBy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'closed_by': %w", err)
		}
	}

	if a.CommentCount != nil {
		object["comment_count"], err = json.Marshal(a.CommentCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'comment_count': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Destination != nil {
		object["destination"], err = json.Marshal(a.Destination)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'destination': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.MergeCommit != nil {
		object["merge_commit"], err = json.Marshal(a.MergeCommit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'merge_commit': %w", err)
		}
	}

	if a.Participants != nil {
		object["participants"], err = json.Marshal(a.Participants)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'participants': %w", err)
		}
	}

	if a.Reason != nil {
		object["reason"], err = json.Marshal(a.Reason)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reason': %w", err)
		}
	}

	if a.Rendered != nil {
		object["rendered"], err = json.Marshal(a.Rendered)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'rendered': %w", err)
		}
	}

	if a.Reviewers != nil {
		object["reviewers"], err = json.Marshal(a.Reviewers)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reviewers': %w", err)
		}
	}

	if a.Source != nil {
		object["source"], err = json.Marshal(a.Source)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'source': %w", err)
		}
	}

	if a.State != nil {
		object["state"], err = json.Marshal(a.State)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'state': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	if a.TaskCount != nil {
		object["task_count"], err = json.Marshal(a.TaskCount)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'task_count': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PullrequestComment. Returns the specified
// element and whether it was found
func (a PullrequestComment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PullrequestComment
func (a *PullrequestComment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PullrequestComment to handle AdditionalProperties
func (a *PullrequestComment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content"]; found {
		err = json.Unmarshal(raw, &a.Content)
		if err != nil {
			return fmt.Errorf("error reading 'content': %w", err)
		}
		delete(object, "content")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["deleted"]; found {
		err = json.Unmarshal(raw, &a.Deleted)
		if err != nil {
			return fmt.Errorf("error reading 'deleted': %w", err)
		}
		delete(object, "deleted")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["inline"]; found {
		err = json.Unmarshal(raw, &a.Inline)
		if err != nil {
			return fmt.Errorf("error reading 'inline': %w", err)
		}
		delete(object, "inline")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["parent"]; found {
		err = json.Unmarshal(raw, &a.Parent)
		if err != nil {
			return fmt.Errorf("error reading 'parent': %w", err)
		}
		delete(object, "parent")
	}

	if raw, found := object["pending"]; found {
		err = json.Unmarshal(raw, &a.Pending)
		if err != nil {
			return fmt.Errorf("error reading 'pending': %w", err)
		}
		delete(object, "pending")
	}

	if raw, found := object["pullrequest"]; found {
		err = json.Unmarshal(raw, &a.Pullrequest)
		if err != nil {
			return fmt.Errorf("error reading 'pullrequest': %w", err)
		}
		delete(object, "pullrequest")
	}

	if raw, found := object["resolution"]; found {
		err = json.Unmarshal(raw, &a.Resolution)
		if err != nil {
			return fmt.Errorf("error reading 'resolution': %w", err)
		}
		delete(object, "resolution")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PullrequestComment to handle AdditionalProperties
func (a PullrequestComment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Content != nil {
		object["content"], err = json.Marshal(a.Content)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'content': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Deleted != nil {
		object["deleted"], err = json.Marshal(a.Deleted)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'deleted': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Inline != nil {
		object["inline"], err = json.Marshal(a.Inline)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'inline': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Parent != nil {
		object["parent"], err = json.Marshal(a.Parent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent': %w", err)
		}
	}

	if a.Pending != nil {
		object["pending"], err = json.Marshal(a.Pending)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pending': %w", err)
		}
	}

	if a.Pullrequest != nil {
		object["pullrequest"], err = json.Marshal(a.Pullrequest)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'pullrequest': %w", err)
		}
	}

	if a.Resolution != nil {
		object["resolution"], err = json.Marshal(a.Resolution)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'resolution': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for PullrequestMergeParameters. Returns the specified
// element and whether it was found
func (a PullrequestMergeParameters) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PullrequestMergeParameters
func (a *PullrequestMergeParameters) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PullrequestMergeParameters to handle AdditionalProperties
func (a *PullrequestMergeParameters) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["close_source_branch"]; found {
		err = json.Unmarshal(raw, &a.CloseSourceBranch)
		if err != nil {
			return fmt.Errorf("error reading 'close_source_branch': %w", err)
		}
		delete(object, "close_source_branch")
	}

	if raw, found := object["merge_strategy"]; found {
		err = json.Unmarshal(raw, &a.MergeStrategy)
		if err != nil {
			return fmt.Errorf("error reading 'merge_strategy': %w", err)
		}
		delete(object, "merge_strategy")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PullrequestMergeParameters to handle AdditionalProperties
func (a PullrequestMergeParameters) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CloseSourceBranch != nil {
		object["close_source_branch"], err = json.Marshal(a.CloseSourceBranch)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'close_source_branch': %w", err)
		}
	}

	if a.MergeStrategy != nil {
		object["merge_strategy"], err = json.Marshal(a.MergeStrategy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'merge_strategy': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Ref. Returns the specified
// element and whether it was found
func (a Ref) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Ref
func (a *Ref) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Ref to handle AdditionalProperties
func (a *Ref) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Ref to handle AdditionalProperties
func (a Ref) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Target != nil {
		object["target"], err = json.Marshal(a.Target)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'target': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Report. Returns the specified
// element and whether it was found
func (a Report) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Report
func (a *Report) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Report to handle AdditionalProperties
func (a *Report) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["data"]; found {
		err = json.Unmarshal(raw, &a.Data)
		if err != nil {
			return fmt.Errorf("error reading 'data': %w", err)
		}
		delete(object, "data")
	}

	if raw, found := object["details"]; found {
		err = json.Unmarshal(raw, &a.Details)
		if err != nil {
			return fmt.Errorf("error reading 'details': %w", err)
		}
		delete(object, "details")
	}

	if raw, found := object["external_id"]; found {
		err = json.Unmarshal(raw, &a.ExternalId)
		if err != nil {
			return fmt.Errorf("error reading 'external_id': %w", err)
		}
		delete(object, "external_id")
	}

	if raw, found := object["link"]; found {
		err = json.Unmarshal(raw, &a.Link)
		if err != nil {
			return fmt.Errorf("error reading 'link': %w", err)
		}
		delete(object, "link")
	}

	if raw, found := object["logo_url"]; found {
		err = json.Unmarshal(raw, &a.LogoUrl)
		if err != nil {
			return fmt.Errorf("error reading 'logo_url': %w", err)
		}
		delete(object, "logo_url")
	}

	if raw, found := object["remote_link_enabled"]; found {
		err = json.Unmarshal(raw, &a.RemoteLinkEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'remote_link_enabled': %w", err)
		}
		delete(object, "remote_link_enabled")
	}

	if raw, found := object["report_type"]; found {
		err = json.Unmarshal(raw, &a.ReportType)
		if err != nil {
			return fmt.Errorf("error reading 'report_type': %w", err)
		}
		delete(object, "report_type")
	}

	if raw, found := object["reporter"]; found {
		err = json.Unmarshal(raw, &a.Reporter)
		if err != nil {
			return fmt.Errorf("error reading 'reporter': %w", err)
		}
		delete(object, "reporter")
	}

	if raw, found := object["result"]; found {
		err = json.Unmarshal(raw, &a.Result)
		if err != nil {
			return fmt.Errorf("error reading 'result': %w", err)
		}
		delete(object, "result")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Report to handle AdditionalProperties
func (a Report) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Data != nil {
		object["data"], err = json.Marshal(a.Data)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'data': %w", err)
		}
	}

	if a.Details != nil {
		object["details"], err = json.Marshal(a.Details)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'details': %w", err)
		}
	}

	if a.ExternalId != nil {
		object["external_id"], err = json.Marshal(a.ExternalId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'external_id': %w", err)
		}
	}

	if a.Link != nil {
		object["link"], err = json.Marshal(a.Link)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'link': %w", err)
		}
	}

	if a.LogoUrl != nil {
		object["logo_url"], err = json.Marshal(a.LogoUrl)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'logo_url': %w", err)
		}
	}

	if a.RemoteLinkEnabled != nil {
		object["remote_link_enabled"], err = json.Marshal(a.RemoteLinkEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'remote_link_enabled': %w", err)
		}
	}

	if a.ReportType != nil {
		object["report_type"], err = json.Marshal(a.ReportType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'report_type': %w", err)
		}
	}

	if a.Reporter != nil {
		object["reporter"], err = json.Marshal(a.Reporter)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'reporter': %w", err)
		}
	}

	if a.Result != nil {
		object["result"], err = json.Marshal(a.Result)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'result': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for ReportAnnotation. Returns the specified
// element and whether it was found
func (a ReportAnnotation) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ReportAnnotation
func (a *ReportAnnotation) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ReportAnnotation to handle AdditionalProperties
func (a *ReportAnnotation) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["annotation_type"]; found {
		err = json.Unmarshal(raw, &a.AnnotationType)
		if err != nil {
			return fmt.Errorf("error reading 'annotation_type': %w", err)
		}
		delete(object, "annotation_type")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["details"]; found {
		err = json.Unmarshal(raw, &a.Details)
		if err != nil {
			return fmt.Errorf("error reading 'details': %w", err)
		}
		delete(object, "details")
	}

	if raw, found := object["external_id"]; found {
		err = json.Unmarshal(raw, &a.ExternalId)
		if err != nil {
			return fmt.Errorf("error reading 'external_id': %w", err)
		}
		delete(object, "external_id")
	}

	if raw, found := object["line"]; found {
		err = json.Unmarshal(raw, &a.Line)
		if err != nil {
			return fmt.Errorf("error reading 'line': %w", err)
		}
		delete(object, "line")
	}

	if raw, found := object["link"]; found {
		err = json.Unmarshal(raw, &a.Link)
		if err != nil {
			return fmt.Errorf("error reading 'link': %w", err)
		}
		delete(object, "link")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["result"]; found {
		err = json.Unmarshal(raw, &a.Result)
		if err != nil {
			return fmt.Errorf("error reading 'result': %w", err)
		}
		delete(object, "result")
	}

	if raw, found := object["severity"]; found {
		err = json.Unmarshal(raw, &a.Severity)
		if err != nil {
			return fmt.Errorf("error reading 'severity': %w", err)
		}
		delete(object, "severity")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ReportAnnotation to handle AdditionalProperties
func (a ReportAnnotation) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AnnotationType != nil {
		object["annotation_type"], err = json.Marshal(a.AnnotationType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'annotation_type': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Details != nil {
		object["details"], err = json.Marshal(a.Details)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'details': %w", err)
		}
	}

	if a.ExternalId != nil {
		object["external_id"], err = json.Marshal(a.ExternalId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'external_id': %w", err)
		}
	}

	if a.Line != nil {
		object["line"], err = json.Marshal(a.Line)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'line': %w", err)
		}
	}

	if a.Link != nil {
		object["link"], err = json.Marshal(a.Link)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'link': %w", err)
		}
	}

	if a.Path != nil {
		object["path"], err = json.Marshal(a.Path)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'path': %w", err)
		}
	}

	if a.Result != nil {
		object["result"], err = json.Marshal(a.Result)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'result': %w", err)
		}
	}

	if a.Severity != nil {
		object["severity"], err = json.Marshal(a.Severity)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'severity': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Repository. Returns the specified
// element and whether it was found
func (a Repository) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Repository
func (a *Repository) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Repository to handle AdditionalProperties
func (a *Repository) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["fork_policy"]; found {
		err = json.Unmarshal(raw, &a.ForkPolicy)
		if err != nil {
			return fmt.Errorf("error reading 'fork_policy': %w", err)
		}
		delete(object, "fork_policy")
	}

	if raw, found := object["full_name"]; found {
		err = json.Unmarshal(raw, &a.FullName)
		if err != nil {
			return fmt.Errorf("error reading 'full_name': %w", err)
		}
		delete(object, "full_name")
	}

	if raw, found := object["has_issues"]; found {
		err = json.Unmarshal(raw, &a.HasIssues)
		if err != nil {
			return fmt.Errorf("error reading 'has_issues': %w", err)
		}
		delete(object, "has_issues")
	}

	if raw, found := object["has_wiki"]; found {
		err = json.Unmarshal(raw, &a.HasWiki)
		if err != nil {
			return fmt.Errorf("error reading 'has_wiki': %w", err)
		}
		delete(object, "has_wiki")
	}

	if raw, found := object["is_private"]; found {
		err = json.Unmarshal(raw, &a.IsPrivate)
		if err != nil {
			return fmt.Errorf("error reading 'is_private': %w", err)
		}
		delete(object, "is_private")
	}

	if raw, found := object["language"]; found {
		err = json.Unmarshal(raw, &a.Language)
		if err != nil {
			return fmt.Errorf("error reading 'language': %w", err)
		}
		delete(object, "language")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["mainbranch"]; found {
		err = json.Unmarshal(raw, &a.Mainbranch)
		if err != nil {
			return fmt.Errorf("error reading 'mainbranch': %w", err)
		}
		delete(object, "mainbranch")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["parent"]; found {
		err = json.Unmarshal(raw, &a.Parent)
		if err != nil {
			return fmt.Errorf("error reading 'parent': %w", err)
		}
		delete(object, "parent")
	}

	if raw, found := object["project"]; found {
		err = json.Unmarshal(raw, &a.Project)
		if err != nil {
			return fmt.Errorf("error reading 'project': %w", err)
		}
		delete(object, "project")
	}

	if raw, found := object["scm"]; found {
		err = json.Unmarshal(raw, &a.Scm)
		if err != nil {
			return fmt.Errorf("error reading 'scm': %w", err)
		}
		delete(object, "scm")
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &a.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
		delete(object, "size")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Repository to handle AdditionalProperties
func (a Repository) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.ForkPolicy != nil {
		object["fork_policy"], err = json.Marshal(a.ForkPolicy)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'fork_policy': %w", err)
		}
	}

	if a.FullName != nil {
		object["full_name"], err = json.Marshal(a.FullName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'full_name': %w", err)
		}
	}

	if a.HasIssues != nil {
		object["has_issues"], err = json.Marshal(a.HasIssues)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'has_issues': %w", err)
		}
	}

	if a.HasWiki != nil {
		object["has_wiki"], err = json.Marshal(a.HasWiki)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'has_wiki': %w", err)
		}
	}

	if a.IsPrivate != nil {
		object["is_private"], err = json.Marshal(a.IsPrivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_private': %w", err)
		}
	}

	if a.Language != nil {
		object["language"], err = json.Marshal(a.Language)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'language': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Mainbranch != nil {
		object["mainbranch"], err = json.Marshal(a.Mainbranch)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'mainbranch': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	if a.Parent != nil {
		object["parent"], err = json.Marshal(a.Parent)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parent': %w", err)
		}
	}

	if a.Project != nil {
		object["project"], err = json.Marshal(a.Project)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'project': %w", err)
		}
	}

	if a.Scm != nil {
		object["scm"], err = json.Marshal(a.Scm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scm': %w", err)
		}
	}

	if a.Size != nil {
		object["size"], err = json.Marshal(a.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RepositoryGroupPermission. Returns the specified
// element and whether it was found
func (a RepositoryGroupPermission) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RepositoryGroupPermission
func (a *RepositoryGroupPermission) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RepositoryGroupPermission to handle AdditionalProperties
func (a *RepositoryGroupPermission) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["group"]; found {
		err = json.Unmarshal(raw, &a.Group)
		if err != nil {
			return fmt.Errorf("error reading 'group': %w", err)
		}
		delete(object, "group")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RepositoryGroupPermission to handle AdditionalProperties
func (a RepositoryGroupPermission) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Group != nil {
		object["group"], err = json.Marshal(a.Group)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'group': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RepositoryInheritanceState. Returns the specified
// element and whether it was found
func (a RepositoryInheritanceState) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RepositoryInheritanceState
func (a *RepositoryInheritanceState) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RepositoryInheritanceState to handle AdditionalProperties
func (a *RepositoryInheritanceState) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["override_settings"]; found {
		err = json.Unmarshal(raw, &a.OverrideSettings)
		if err != nil {
			return fmt.Errorf("error reading 'override_settings': %w", err)
		}
		delete(object, "override_settings")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RepositoryInheritanceState to handle AdditionalProperties
func (a RepositoryInheritanceState) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.OverrideSettings != nil {
		object["override_settings"], err = json.Marshal(a.OverrideSettings)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'override_settings': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RepositoryPermission. Returns the specified
// element and whether it was found
func (a RepositoryPermission) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RepositoryPermission
func (a *RepositoryPermission) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RepositoryPermission to handle AdditionalProperties
func (a *RepositoryPermission) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RepositoryPermission to handle AdditionalProperties
func (a RepositoryPermission) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RepositoryUserPermission. Returns the specified
// element and whether it was found
func (a RepositoryUserPermission) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RepositoryUserPermission
func (a *RepositoryUserPermission) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RepositoryUserPermission to handle AdditionalProperties
func (a *RepositoryUserPermission) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["permission"]; found {
		err = json.Unmarshal(raw, &a.Permission)
		if err != nil {
			return fmt.Errorf("error reading 'permission': %w", err)
		}
		delete(object, "permission")
	}

	if raw, found := object["repository"]; found {
		err = json.Unmarshal(raw, &a.Repository)
		if err != nil {
			return fmt.Errorf("error reading 'repository': %w", err)
		}
		delete(object, "repository")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RepositoryUserPermission to handle AdditionalProperties
func (a RepositoryUserPermission) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Permission != nil {
		object["permission"], err = json.Marshal(a.Permission)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'permission': %w", err)
		}
	}

	if a.Repository != nil {
		object["repository"], err = json.Marshal(a.Repository)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repository': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Snippet. Returns the specified
// element and whether it was found
func (a Snippet) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Snippet
func (a *Snippet) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Snippet to handle AdditionalProperties
func (a *Snippet) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["creator"]; found {
		err = json.Unmarshal(raw, &a.Creator)
		if err != nil {
			return fmt.Errorf("error reading 'creator': %w", err)
		}
		delete(object, "creator")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["is_private"]; found {
		err = json.Unmarshal(raw, &a.IsPrivate)
		if err != nil {
			return fmt.Errorf("error reading 'is_private': %w", err)
		}
		delete(object, "is_private")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["scm"]; found {
		err = json.Unmarshal(raw, &a.Scm)
		if err != nil {
			return fmt.Errorf("error reading 'scm': %w", err)
		}
		delete(object, "scm")
	}

	if raw, found := object["title"]; found {
		err = json.Unmarshal(raw, &a.Title)
		if err != nil {
			return fmt.Errorf("error reading 'title': %w", err)
		}
		delete(object, "title")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Snippet to handle AdditionalProperties
func (a Snippet) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Creator != nil {
		object["creator"], err = json.Marshal(a.Creator)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'creator': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.IsPrivate != nil {
		object["is_private"], err = json.Marshal(a.IsPrivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_private': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	if a.Scm != nil {
		object["scm"], err = json.Marshal(a.Scm)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'scm': %w", err)
		}
	}

	if a.Title != nil {
		object["title"], err = json.Marshal(a.Title)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'title': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnippetComment. Returns the specified
// element and whether it was found
func (a SnippetComment) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnippetComment
func (a *SnippetComment) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnippetComment to handle AdditionalProperties
func (a *SnippetComment) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["snippet"]; found {
		err = json.Unmarshal(raw, &a.Snippet)
		if err != nil {
			return fmt.Errorf("error reading 'snippet': %w", err)
		}
		delete(object, "snippet")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnippetComment to handle AdditionalProperties
func (a SnippetComment) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Snippet != nil {
		object["snippet"], err = json.Marshal(a.Snippet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snippet': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SnippetCommit. Returns the specified
// element and whether it was found
func (a SnippetCommit) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SnippetCommit
func (a *SnippetCommit) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SnippetCommit to handle AdditionalProperties
func (a *SnippetCommit) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["author"]; found {
		err = json.Unmarshal(raw, &a.Author)
		if err != nil {
			return fmt.Errorf("error reading 'author': %w", err)
		}
		delete(object, "author")
	}

	if raw, found := object["date"]; found {
		err = json.Unmarshal(raw, &a.Date)
		if err != nil {
			return fmt.Errorf("error reading 'date': %w", err)
		}
		delete(object, "date")
	}

	if raw, found := object["hash"]; found {
		err = json.Unmarshal(raw, &a.Hash)
		if err != nil {
			return fmt.Errorf("error reading 'hash': %w", err)
		}
		delete(object, "hash")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["parents"]; found {
		err = json.Unmarshal(raw, &a.Parents)
		if err != nil {
			return fmt.Errorf("error reading 'parents': %w", err)
		}
		delete(object, "parents")
	}

	if raw, found := object["snippet"]; found {
		err = json.Unmarshal(raw, &a.Snippet)
		if err != nil {
			return fmt.Errorf("error reading 'snippet': %w", err)
		}
		delete(object, "snippet")
	}

	if raw, found := object["summary"]; found {
		err = json.Unmarshal(raw, &a.Summary)
		if err != nil {
			return fmt.Errorf("error reading 'summary': %w", err)
		}
		delete(object, "summary")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SnippetCommit to handle AdditionalProperties
func (a SnippetCommit) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Author != nil {
		object["author"], err = json.Marshal(a.Author)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'author': %w", err)
		}
	}

	if a.Date != nil {
		object["date"], err = json.Marshal(a.Date)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date': %w", err)
		}
	}

	if a.Hash != nil {
		object["hash"], err = json.Marshal(a.Hash)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'hash': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Parents != nil {
		object["parents"], err = json.Marshal(a.Parents)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'parents': %w", err)
		}
	}

	if a.Snippet != nil {
		object["snippet"], err = json.Marshal(a.Snippet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'snippet': %w", err)
		}
	}

	if a.Summary != nil {
		object["summary"], err = json.Marshal(a.Summary)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'summary': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SshAccountKey. Returns the specified
// element and whether it was found
func (a SshAccountKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SshAccountKey
func (a *SshAccountKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SshAccountKey to handle AdditionalProperties
func (a *SshAccountKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["comment"]; found {
		err = json.Unmarshal(raw, &a.Comment)
		if err != nil {
			return fmt.Errorf("error reading 'comment': %w", err)
		}
		delete(object, "comment")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["label"]; found {
		err = json.Unmarshal(raw, &a.Label)
		if err != nil {
			return fmt.Errorf("error reading 'label': %w", err)
		}
		delete(object, "label")
	}

	if raw, found := object["last_used"]; found {
		err = json.Unmarshal(raw, &a.LastUsed)
		if err != nil {
			return fmt.Errorf("error reading 'last_used': %w", err)
		}
		delete(object, "last_used")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["owner"]; found {
		err = json.Unmarshal(raw, &a.Owner)
		if err != nil {
			return fmt.Errorf("error reading 'owner': %w", err)
		}
		delete(object, "owner")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SshAccountKey to handle AdditionalProperties
func (a SshAccountKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Comment != nil {
		object["comment"], err = json.Marshal(a.Comment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'comment': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Label != nil {
		object["label"], err = json.Marshal(a.Label)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'label': %w", err)
		}
	}

	if a.LastUsed != nil {
		object["last_used"], err = json.Marshal(a.LastUsed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last_used': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Owner != nil {
		object["owner"], err = json.Marshal(a.Owner)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'owner': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SshKey. Returns the specified
// element and whether it was found
func (a SshKey) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SshKey
func (a *SshKey) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SshKey to handle AdditionalProperties
func (a *SshKey) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["comment"]; found {
		err = json.Unmarshal(raw, &a.Comment)
		if err != nil {
			return fmt.Errorf("error reading 'comment': %w", err)
		}
		delete(object, "comment")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["key"]; found {
		err = json.Unmarshal(raw, &a.Key)
		if err != nil {
			return fmt.Errorf("error reading 'key': %w", err)
		}
		delete(object, "key")
	}

	if raw, found := object["label"]; found {
		err = json.Unmarshal(raw, &a.Label)
		if err != nil {
			return fmt.Errorf("error reading 'label': %w", err)
		}
		delete(object, "label")
	}

	if raw, found := object["last_used"]; found {
		err = json.Unmarshal(raw, &a.LastUsed)
		if err != nil {
			return fmt.Errorf("error reading 'last_used': %w", err)
		}
		delete(object, "last_used")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SshKey to handle AdditionalProperties
func (a SshKey) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Comment != nil {
		object["comment"], err = json.Marshal(a.Comment)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'comment': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.Key != nil {
		object["key"], err = json.Marshal(a.Key)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'key': %w", err)
		}
	}

	if a.Label != nil {
		object["label"], err = json.Marshal(a.Label)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'label': %w", err)
		}
	}

	if a.LastUsed != nil {
		object["last_used"], err = json.Marshal(a.LastUsed)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'last_used': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Tag. Returns the specified
// element and whether it was found
func (a Tag) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Tag
func (a *Tag) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Tag to handle AdditionalProperties
func (a *Tag) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["date"]; found {
		err = json.Unmarshal(raw, &a.Date)
		if err != nil {
			return fmt.Errorf("error reading 'date': %w", err)
		}
		delete(object, "date")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["message"]; found {
		err = json.Unmarshal(raw, &a.Message)
		if err != nil {
			return fmt.Errorf("error reading 'message': %w", err)
		}
		delete(object, "message")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["tagger"]; found {
		err = json.Unmarshal(raw, &a.Tagger)
		if err != nil {
			return fmt.Errorf("error reading 'tagger': %w", err)
		}
		delete(object, "tagger")
	}

	if raw, found := object["target"]; found {
		err = json.Unmarshal(raw, &a.Target)
		if err != nil {
			return fmt.Errorf("error reading 'target': %w", err)
		}
		delete(object, "target")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Tag to handle AdditionalProperties
func (a Tag) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Date != nil {
		object["date"], err = json.Marshal(a.Date)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'date': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Message != nil {
		object["message"], err = json.Marshal(a.Message)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'message': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Tagger != nil {
		object["tagger"], err = json.Marshal(a.Tagger)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'tagger': %w", err)
		}
	}

	if a.Target != nil {
		object["target"], err = json.Marshal(a.Target)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'target': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Team. Returns the specified
// element and whether it was found
func (a Team) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Team
func (a *Team) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Team to handle AdditionalProperties
func (a *Team) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["display_name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'display_name': %w", err)
		}
		delete(object, "display_name")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Team to handle AdditionalProperties
func (a Team) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.DisplayName != nil {
		object["display_name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'display_name': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TeamLinks. Returns the specified
// element and whether it was found
func (a TeamLinks) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TeamLinks
func (a *TeamLinks) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TeamLinks to handle AdditionalProperties
func (a *TeamLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["avatar"]; found {
		err = json.Unmarshal(raw, &a.Avatar)
		if err != nil {
			return fmt.Errorf("error reading 'avatar': %w", err)
		}
		delete(object, "avatar")
	}

	if raw, found := object["html"]; found {
		err = json.Unmarshal(raw, &a.Html)
		if err != nil {
			return fmt.Errorf("error reading 'html': %w", err)
		}
		delete(object, "html")
	}

	if raw, found := object["members"]; found {
		err = json.Unmarshal(raw, &a.Members)
		if err != nil {
			return fmt.Errorf("error reading 'members': %w", err)
		}
		delete(object, "members")
	}

	if raw, found := object["projects"]; found {
		err = json.Unmarshal(raw, &a.Projects)
		if err != nil {
			return fmt.Errorf("error reading 'projects': %w", err)
		}
		delete(object, "projects")
	}

	if raw, found := object["repositories"]; found {
		err = json.Unmarshal(raw, &a.Repositories)
		if err != nil {
			return fmt.Errorf("error reading 'repositories': %w", err)
		}
		delete(object, "repositories")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TeamLinks to handle AdditionalProperties
func (a TeamLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Avatar != nil {
		object["avatar"], err = json.Marshal(a.Avatar)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'avatar': %w", err)
		}
	}

	if a.Html != nil {
		object["html"], err = json.Marshal(a.Html)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'html': %w", err)
		}
	}

	if a.Members != nil {
		object["members"], err = json.Marshal(a.Members)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'members': %w", err)
		}
	}

	if a.Projects != nil {
		object["projects"], err = json.Marshal(a.Projects)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'projects': %w", err)
		}
	}

	if a.Repositories != nil {
		object["repositories"], err = json.Marshal(a.Repositories)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repositories': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Treeentry. Returns the specified
// element and whether it was found
func (a Treeentry) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Treeentry
func (a *Treeentry) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Treeentry to handle AdditionalProperties
func (a *Treeentry) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["commit"]; found {
		err = json.Unmarshal(raw, &a.Commit)
		if err != nil {
			return fmt.Errorf("error reading 'commit': %w", err)
		}
		delete(object, "commit")
	}

	if raw, found := object["path"]; found {
		err = json.Unmarshal(raw, &a.Path)
		if err != nil {
			return fmt.Errorf("error reading 'path': %w", err)
		}
		delete(object, "path")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Treeentry to handle AdditionalProperties
func (a Treeentry) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Commit != nil {
		object["commit"], err = json.Marshal(a.Commit)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'commit': %w", err)
		}
	}

	if a.Path != nil {
		object["path"], err = json.Marshal(a.Path)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'path': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for User. Returns the specified
// element and whether it was found
func (a User) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for User
func (a *User) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for User to handle AdditionalProperties
func (a *User) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["account_id"]; found {
		err = json.Unmarshal(raw, &a.AccountId)
		if err != nil {
			return fmt.Errorf("error reading 'account_id': %w", err)
		}
		delete(object, "account_id")
	}

	if raw, found := object["account_status"]; found {
		err = json.Unmarshal(raw, &a.AccountStatus)
		if err != nil {
			return fmt.Errorf("error reading 'account_status': %w", err)
		}
		delete(object, "account_status")
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["display_name"]; found {
		err = json.Unmarshal(raw, &a.DisplayName)
		if err != nil {
			return fmt.Errorf("error reading 'display_name': %w", err)
		}
		delete(object, "display_name")
	}

	if raw, found := object["has_2fa_enabled"]; found {
		err = json.Unmarshal(raw, &a.Has2faEnabled)
		if err != nil {
			return fmt.Errorf("error reading 'has_2fa_enabled': %w", err)
		}
		delete(object, "has_2fa_enabled")
	}

	if raw, found := object["is_staff"]; found {
		err = json.Unmarshal(raw, &a.IsStaff)
		if err != nil {
			return fmt.Errorf("error reading 'is_staff': %w", err)
		}
		delete(object, "is_staff")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["nickname"]; found {
		err = json.Unmarshal(raw, &a.Nickname)
		if err != nil {
			return fmt.Errorf("error reading 'nickname': %w", err)
		}
		delete(object, "nickname")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for User to handle AdditionalProperties
func (a User) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.AccountId != nil {
		object["account_id"], err = json.Marshal(a.AccountId)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'account_id': %w", err)
		}
	}

	if a.AccountStatus != nil {
		object["account_status"], err = json.Marshal(a.AccountStatus)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'account_status': %w", err)
		}
	}

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.DisplayName != nil {
		object["display_name"], err = json.Marshal(a.DisplayName)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'display_name': %w", err)
		}
	}

	if a.Has2faEnabled != nil {
		object["has_2fa_enabled"], err = json.Marshal(a.Has2faEnabled)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'has_2fa_enabled': %w", err)
		}
	}

	if a.IsStaff != nil {
		object["is_staff"], err = json.Marshal(a.IsStaff)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_staff': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Nickname != nil {
		object["nickname"], err = json.Marshal(a.Nickname)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'nickname': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for UserLinks. Returns the specified
// element and whether it was found
func (a UserLinks) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UserLinks
func (a *UserLinks) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UserLinks to handle AdditionalProperties
func (a *UserLinks) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["avatar"]; found {
		err = json.Unmarshal(raw, &a.Avatar)
		if err != nil {
			return fmt.Errorf("error reading 'avatar': %w", err)
		}
		delete(object, "avatar")
	}

	if raw, found := object["html"]; found {
		err = json.Unmarshal(raw, &a.Html)
		if err != nil {
			return fmt.Errorf("error reading 'html': %w", err)
		}
		delete(object, "html")
	}

	if raw, found := object["repositories"]; found {
		err = json.Unmarshal(raw, &a.Repositories)
		if err != nil {
			return fmt.Errorf("error reading 'repositories': %w", err)
		}
		delete(object, "repositories")
	}

	if raw, found := object["self"]; found {
		err = json.Unmarshal(raw, &a.Self)
		if err != nil {
			return fmt.Errorf("error reading 'self': %w", err)
		}
		delete(object, "self")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UserLinks to handle AdditionalProperties
func (a UserLinks) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Avatar != nil {
		object["avatar"], err = json.Marshal(a.Avatar)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'avatar': %w", err)
		}
	}

	if a.Html != nil {
		object["html"], err = json.Marshal(a.Html)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'html': %w", err)
		}
	}

	if a.Repositories != nil {
		object["repositories"], err = json.Marshal(a.Repositories)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'repositories': %w", err)
		}
	}

	if a.Self != nil {
		object["self"], err = json.Marshal(a.Self)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'self': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Version. Returns the specified
// element and whether it was found
func (a Version) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Version
func (a *Version) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Version to handle AdditionalProperties
func (a *Version) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Version to handle AdditionalProperties
func (a Version) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WebhookSubscription. Returns the specified
// element and whether it was found
func (a WebhookSubscription) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WebhookSubscription
func (a *WebhookSubscription) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WebhookSubscription to handle AdditionalProperties
func (a *WebhookSubscription) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["active"]; found {
		err = json.Unmarshal(raw, &a.Active)
		if err != nil {
			return fmt.Errorf("error reading 'active': %w", err)
		}
		delete(object, "active")
	}

	if raw, found := object["created_at"]; found {
		err = json.Unmarshal(raw, &a.CreatedAt)
		if err != nil {
			return fmt.Errorf("error reading 'created_at': %w", err)
		}
		delete(object, "created_at")
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["events"]; found {
		err = json.Unmarshal(raw, &a.Events)
		if err != nil {
			return fmt.Errorf("error reading 'events': %w", err)
		}
		delete(object, "events")
	}

	if raw, found := object["secret"]; found {
		err = json.Unmarshal(raw, &a.Secret)
		if err != nil {
			return fmt.Errorf("error reading 'secret': %w", err)
		}
		delete(object, "secret")
	}

	if raw, found := object["secret_set"]; found {
		err = json.Unmarshal(raw, &a.SecretSet)
		if err != nil {
			return fmt.Errorf("error reading 'secret_set': %w", err)
		}
		delete(object, "secret_set")
	}

	if raw, found := object["subject"]; found {
		err = json.Unmarshal(raw, &a.Subject)
		if err != nil {
			return fmt.Errorf("error reading 'subject': %w", err)
		}
		delete(object, "subject")
	}

	if raw, found := object["subject_type"]; found {
		err = json.Unmarshal(raw, &a.SubjectType)
		if err != nil {
			return fmt.Errorf("error reading 'subject_type': %w", err)
		}
		delete(object, "subject_type")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.Url)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WebhookSubscription to handle AdditionalProperties
func (a WebhookSubscription) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Active != nil {
		object["active"], err = json.Marshal(a.Active)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'active': %w", err)
		}
	}

	if a.CreatedAt != nil {
		object["created_at"], err = json.Marshal(a.CreatedAt)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_at': %w", err)
		}
	}

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	if a.Events != nil {
		object["events"], err = json.Marshal(a.Events)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'events': %w", err)
		}
	}

	if a.Secret != nil {
		object["secret"], err = json.Marshal(a.Secret)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secret': %w", err)
		}
	}

	if a.SecretSet != nil {
		object["secret_set"], err = json.Marshal(a.SecretSet)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'secret_set': %w", err)
		}
	}

	if a.Subject != nil {
		object["subject"], err = json.Marshal(a.Subject)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subject': %w", err)
		}
	}

	if a.SubjectType != nil {
		object["subject_type"], err = json.Marshal(a.SubjectType)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'subject_type': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.Url != nil {
		object["url"], err = json.Marshal(a.Url)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Workspace. Returns the specified
// element and whether it was found
func (a Workspace) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Workspace
func (a *Workspace) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Workspace to handle AdditionalProperties
func (a *Workspace) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["created_on"]; found {
		err = json.Unmarshal(raw, &a.CreatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'created_on': %w", err)
		}
		delete(object, "created_on")
	}

	if raw, found := object["forking_mode"]; found {
		err = json.Unmarshal(raw, &a.ForkingMode)
		if err != nil {
			return fmt.Errorf("error reading 'forking_mode': %w", err)
		}
		delete(object, "forking_mode")
	}

	if raw, found := object["is_privacy_enforced"]; found {
		err = json.Unmarshal(raw, &a.IsPrivacyEnforced)
		if err != nil {
			return fmt.Errorf("error reading 'is_privacy_enforced': %w", err)
		}
		delete(object, "is_privacy_enforced")
	}

	if raw, found := object["is_private"]; found {
		err = json.Unmarshal(raw, &a.IsPrivate)
		if err != nil {
			return fmt.Errorf("error reading 'is_private': %w", err)
		}
		delete(object, "is_private")
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["slug"]; found {
		err = json.Unmarshal(raw, &a.Slug)
		if err != nil {
			return fmt.Errorf("error reading 'slug': %w", err)
		}
		delete(object, "slug")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["updated_on"]; found {
		err = json.Unmarshal(raw, &a.UpdatedOn)
		if err != nil {
			return fmt.Errorf("error reading 'updated_on': %w", err)
		}
		delete(object, "updated_on")
	}

	if raw, found := object["uuid"]; found {
		err = json.Unmarshal(raw, &a.Uuid)
		if err != nil {
			return fmt.Errorf("error reading 'uuid': %w", err)
		}
		delete(object, "uuid")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Workspace to handle AdditionalProperties
func (a Workspace) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.CreatedOn != nil {
		object["created_on"], err = json.Marshal(a.CreatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'created_on': %w", err)
		}
	}

	if a.ForkingMode != nil {
		object["forking_mode"], err = json.Marshal(a.ForkingMode)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'forking_mode': %w", err)
		}
	}

	if a.IsPrivacyEnforced != nil {
		object["is_privacy_enforced"], err = json.Marshal(a.IsPrivacyEnforced)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_privacy_enforced': %w", err)
		}
	}

	if a.IsPrivate != nil {
		object["is_private"], err = json.Marshal(a.IsPrivate)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'is_private': %w", err)
		}
	}

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	if a.Name != nil {
		object["name"], err = json.Marshal(a.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}

	if a.Slug != nil {
		object["slug"], err = json.Marshal(a.Slug)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'slug': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.UpdatedOn != nil {
		object["updated_on"], err = json.Marshal(a.UpdatedOn)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'updated_on': %w", err)
		}
	}

	if a.Uuid != nil {
		object["uuid"], err = json.Marshal(a.Uuid)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'uuid': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for WorkspaceMembership. Returns the specified
// element and whether it was found
func (a WorkspaceMembership) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WorkspaceMembership
func (a *WorkspaceMembership) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WorkspaceMembership to handle AdditionalProperties
func (a *WorkspaceMembership) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["links"]; found {
		err = json.Unmarshal(raw, &a.Links)
		if err != nil {
			return fmt.Errorf("error reading 'links': %w", err)
		}
		delete(object, "links")
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if raw, found := object["user"]; found {
		err = json.Unmarshal(raw, &a.User)
		if err != nil {
			return fmt.Errorf("error reading 'user': %w", err)
		}
		delete(object, "user")
	}

	if raw, found := object["workspace"]; found {
		err = json.Unmarshal(raw, &a.Workspace)
		if err != nil {
			return fmt.Errorf("error reading 'workspace': %w", err)
		}
		delete(object, "workspace")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WorkspaceMembership to handle AdditionalProperties
func (a WorkspaceMembership) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Links != nil {
		object["links"], err = json.Marshal(a.Links)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'links': %w", err)
		}
	}

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	if a.User != nil {
		object["user"], err = json.Marshal(a.User)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'user': %w", err)
		}
	}

	if a.Workspace != nil {
		object["workspace"], err = json.Marshal(a.Workspace)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'workspace': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAddon request
	DeleteAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAddon request
	PutAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddonLinkers request
	GetAddonLinkers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddonLinkersLinkerKey request
	GetAddonLinkersLinkerKey(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAddonLinkersLinkerKeyValues request
	DeleteAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddonLinkersLinkerKeyValues request
	GetAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAddonLinkersLinkerKeyValues request
	PostAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAddonLinkersLinkerKeyValues request
	PutAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAddonLinkersLinkerKeyValuesValueId request
	DeleteAddonLinkersLinkerKeyValuesValueId(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddonLinkersLinkerKeyValuesValueId request
	GetAddonLinkersLinkerKeyValuesValueId(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHookEvents request
	GetHookEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHookEventsSubjectType request
	GetHookEventsSubjectType(ctx context.Context, subjectType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPullrequestsSelectedUser request
	GetPullrequestsSelectedUser(ctx context.Context, selectedUser string, params *GetPullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositories request
	GetRepositories(ctx context.Context, params *GetRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspace request
	GetRepositoriesWorkspace(ctx context.Context, workspace string, params *GetRepositoriesWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlug request
	DeleteRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoriesWorkspaceRepoSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlug request
	GetRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, body PutRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugBranchRestrictions request
	GetRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId request
	DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsId request
	GetRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBody(ctx context.Context, workspace string, repoSlug string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, body PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugBranchingModel request
	GetRepositoriesWorkspaceRepoSlugBranchingModel(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugBranchingModelSettings request
	GetRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugBranchingModelSettings request
	PutRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommit request
	GetRepositoriesWorkspaceRepoSlugCommitCommit(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugCommitCommitApprove request
	DeleteRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitApprove request
	PostRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitComments request
	GetRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBody(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId request
	DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId request
	GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, body PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCommitHostedPropertyValue request
	DeleteCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommitHostedPropertyValue request
	GetCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCommitHostedPropertyValueWithBody request with any body
	UpdateCommitHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, body UpdateCommitHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPullrequestsForCommit request
	GetPullrequestsForCommit(ctx context.Context, workspace string, repoSlug string, commit string, params *GetPullrequestsForCommitParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReportsForCommit request
	GetReportsForCommit(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteReport request
	DeleteReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReport request
	GetReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateReportWithBody request with any body
	CreateOrUpdateReportWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body CreateOrUpdateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnotationsForReport request
	GetAnnotationsForReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BulkCreateOrUpdateAnnotationsWithBody request with any body
	BulkCreateOrUpdateAnnotationsWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkCreateOrUpdateAnnotations(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body BulkCreateOrUpdateAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAnnotation request
	DeleteAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAnnotation request
	GetAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateAnnotationWithBody request with any body
	CreateOrUpdateAnnotationWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, body CreateOrUpdateAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses request
	GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBody(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey request
	GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx context.Context, workspace string, repoSlug string, commit string, key string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBody(ctx context.Context, workspace string, repoSlug string, commit string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx context.Context, workspace string, repoSlug string, commit string, key string, body PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommits request
	GetRepositoriesWorkspaceRepoSlugCommits(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugCommits request
	PostRepositoriesWorkspaceRepoSlugCommits(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugCommitsRevision request
	GetRepositoriesWorkspaceRepoSlugCommitsRevision(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugCommitsRevision request
	PostRepositoriesWorkspaceRepoSlugCommitsRevision(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugComponents request
	GetRepositoriesWorkspaceRepoSlugComponents(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugComponentsComponentId request
	GetRepositoriesWorkspaceRepoSlugComponentsComponentId(ctx context.Context, workspace string, repoSlug string, componentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDefaultReviewers request
	GetRepositoriesWorkspaceRepoSlugDefaultReviewers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername request
	DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername request
	GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername request
	PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDeployKeys request
	GetRepositoriesWorkspaceRepoSlugDeployKeys(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugDeployKeys request
	PostRepositoriesWorkspaceRepoSlugDeployKeys(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId request
	DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDeployKeysKeyId request
	GetRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugDeployKeysKeyId request
	PutRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentsForRepository request
	GetDeploymentsForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentForRepository request
	GetDeploymentForRepository(ctx context.Context, workspace string, repoSlug string, deploymentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDeploymentVariables request
	GetDeploymentVariables(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDeploymentVariableWithBody request with any body
	CreateDeploymentVariableWithBody(ctx context.Context, workspace string, repoSlug string, environmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, body CreateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDeploymentVariable request
	DeleteDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDeploymentVariableWithBody request with any body
	UpdateDeploymentVariableWithBody(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, body UpdateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDiffSpec request
	GetRepositoriesWorkspaceRepoSlugDiffSpec(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDiffstatSpec request
	GetRepositoriesWorkspaceRepoSlugDiffstatSpec(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDownloads request
	GetRepositoriesWorkspaceRepoSlugDownloads(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugDownloads request
	PostRepositoriesWorkspaceRepoSlugDownloads(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename request
	DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugDownloadsFilename request
	GetRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModel request
	GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModel(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewers request
	GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentsForRepository request
	GetEnvironmentsForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, workspace string, repoSlug string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentForRepository request
	DeleteEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentForRepository request
	GetEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentForRepository request
	UpdateEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath request
	GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugForks request
	GetRepositoriesWorkspaceRepoSlugForks(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugForksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugForksWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugForksWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugForks(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugHooks request
	GetRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugHooks request
	PostRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugHooksUid request
	DeleteRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugHooksUid request
	GetRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugHooksUid request
	PutRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssues request
	GetRepositoriesWorkspaceRepoSlugIssues(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugIssues(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesExportWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesExportWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugIssuesExport(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip request
	GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip(ctx context.Context, workspace string, repoSlug string, repoName string, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesImport request
	GetRepositoriesWorkspaceRepoSlugIssuesImport(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesImport request
	PostRepositoriesWorkspaceRepoSlugIssuesImport(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueId request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueId request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueId request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments request
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId(ctx context.Context, workspace string, repoSlug string, issueId string, changeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, body PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVote request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVote request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec request
	GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec(ctx context.Context, workspace string, repoSlug string, revspec string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugMilestones request
	GetRepositoriesWorkspaceRepoSlugMilestones(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneId request
	GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneId(ctx context.Context, workspace string, repoSlug string, milestoneId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugOverrideSettings request
	GetRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugOverrideSettings request
	PutRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPatchSpec request
	GetRepositoriesWorkspaceRepoSlugPatchSpec(ctx context.Context, workspace string, repoSlug string, spec string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug request
	DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBody(ctx context.Context, workspace string, repoSlug string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId request
	DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBody(ctx context.Context, workspace string, repoSlug string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelinesForRepository request
	GetPipelinesForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineForRepositoryWithBody request with any body
	CreatePipelineForRepositoryWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineForRepository(ctx context.Context, workspace string, repoSlug string, body CreatePipelineForRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineCaches request
	DeleteRepositoryPipelineCaches(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoryPipelineCachesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineCaches request
	GetRepositoryPipelineCaches(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineCache request
	DeleteRepositoryPipelineCache(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineCacheContentURI request
	GetRepositoryPipelineCacheContentURI(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineForRepository request
	GetPipelineForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineStepsForRepository request
	GetPipelineStepsForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineStepForRepository request
	GetPipelineStepForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineStepLogForRepository request
	GetPipelineStepLogForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineContainerLog request
	GetPipelineContainerLog(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, logUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineTestReports request
	GetPipelineTestReports(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineTestReportTestCases request
	GetPipelineTestReportTestCases(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineTestReportTestCaseReasons request
	GetPipelineTestReportTestCaseReasons(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, testCaseUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopPipeline request
	StopPipeline(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineConfig request
	GetRepositoryPipelineConfig(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryPipelineConfigWithBody request with any body
	UpdateRepositoryPipelineConfigWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryPipelineConfig(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryBuildNumberWithBody request with any body
	UpdateRepositoryBuildNumberWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryBuildNumber(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryBuildNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineSchedules request
	GetRepositoryPipelineSchedules(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRepositoryPipelineScheduleWithBody request with any body
	CreateRepositoryPipelineScheduleWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineSchedule request
	DeleteRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineSchedule request
	GetRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryPipelineScheduleWithBody request with any body
	UpdateRepositoryPipelineScheduleWithBody(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, body UpdateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineScheduleExecutions request
	GetRepositoryPipelineScheduleExecutions(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineKeyPair request
	DeleteRepositoryPipelineKeyPair(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineSshKeyPair request
	GetRepositoryPipelineSshKeyPair(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryPipelineKeyPairWithBody request with any body
	UpdateRepositoryPipelineKeyPairWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryPipelineKeyPair(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineKnownHosts request
	GetRepositoryPipelineKnownHosts(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRepositoryPipelineKnownHostWithBody request with any body
	CreateRepositoryPipelineKnownHostWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineKnownHost request
	DeleteRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineKnownHost request
	GetRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryPipelineKnownHostWithBody request with any body
	UpdateRepositoryPipelineKnownHostWithBody(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, body UpdateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineVariables request
	GetRepositoryPipelineVariables(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRepositoryPipelineVariableWithBody request with any body
	CreateRepositoryPipelineVariableWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryPipelineVariable request
	DeleteRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryPipelineVariable request
	GetRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryPipelineVariableWithBody request with any body
	UpdateRepositoryPipelineVariableWithBody(ctx context.Context, workspace string, repoSlug string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, body UpdateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoryHostedPropertyValue request
	DeleteRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoryHostedPropertyValue request
	GetRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRepositoryHostedPropertyValueWithBody request with any body
	UpdateRepositoryHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, body UpdateRepositoryHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequests request
	GetRepositoriesWorkspaceRepoSlugPullrequests(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugPullrequests(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsActivity request
	GetRepositoriesWorkspaceRepoSlugPullrequestsActivity(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivity request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivity(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommits request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommits(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDecline request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDecline(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiff request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiff(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstat request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstat(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskId request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatch request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatch(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBody request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePullRequestHostedPropertyValue request
	DeletePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPullRequestHostedPropertyValue request
	GetPullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePullRequestHostedPropertyValueWithBody request with any body
	UpdatePullRequestHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, body UpdatePullRequestHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugRefs request
	GetRepositoriesWorkspaceRepoSlugRefs(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugRefsBranches request
	GetRepositoriesWorkspaceRepoSlugRefsBranches(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugRefsBranches request
	PostRepositoriesWorkspaceRepoSlugRefsBranches(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName request
	DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugRefsBranchesName request
	GetRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugRefsTags request
	GetRepositoriesWorkspaceRepoSlugRefsTags(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugRefsTagsWithBody request with any body
	PostRepositoriesWorkspaceRepoSlugRefsTagsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRepositoriesWorkspaceRepoSlugRefsTags(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRepositoriesWorkspaceRepoSlugRefsTagsName request
	DeleteRepositoriesWorkspaceRepoSlugRefsTagsName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugRefsTagsName request
	GetRepositoriesWorkspaceRepoSlugRefsTagsName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugSrc request
	GetRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRepositoriesWorkspaceRepoSlugSrc request
	PostRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, workspace string, repoSlug string, params *PostRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugSrcCommitPath request
	GetRepositoriesWorkspaceRepoSlugSrcCommitPath(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugVersions request
	GetRepositoriesWorkspaceRepoSlugVersions(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugVersionsVersionId request
	GetRepositoriesWorkspaceRepoSlugVersionsVersionId(ctx context.Context, workspace string, repoSlug string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRepositoriesWorkspaceRepoSlugWatchers request
	GetRepositoriesWorkspaceRepoSlugWatchers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippets request
	GetSnippets(ctx context.Context, params *GetSnippetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSnippetsWithBody request with any body
	PostSnippetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSnippets(ctx context.Context, body PostSnippetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspace request
	GetSnippetsWorkspace(ctx context.Context, workspace string, params *GetSnippetsWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSnippetsWorkspaceWithBody request with any body
	PostSnippetsWorkspaceWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSnippetsWorkspace(ctx context.Context, workspace string, body PostSnippetsWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnippetsWorkspaceEncodedId request
	DeleteSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedId request
	GetSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnippetsWorkspaceEncodedId request
	PutSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdComments request
	GetSnippetsWorkspaceEncodedIdComments(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSnippetsWorkspaceEncodedIdCommentsWithBody request with any body
	PostSnippetsWorkspaceEncodedIdCommentsWithBody(ctx context.Context, workspace string, encodedId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSnippetsWorkspaceEncodedIdComments(ctx context.Context, workspace string, encodedId string, body PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnippetsWorkspaceEncodedIdCommentsCommentId request
	DeleteSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdCommentsCommentId request
	GetSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBody request with any body
	PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBody(ctx context.Context, workspace string, encodedId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, body PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdCommits request
	GetSnippetsWorkspaceEncodedIdCommits(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdCommitsRevision request
	GetSnippetsWorkspaceEncodedIdCommitsRevision(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdFilesPath request
	GetSnippetsWorkspaceEncodedIdFilesPath(ctx context.Context, workspace string, encodedId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnippetsWorkspaceEncodedIdWatch request
	DeleteSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdWatch request
	GetSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnippetsWorkspaceEncodedIdWatch request
	PutSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdWatchers request
	GetSnippetsWorkspaceEncodedIdWatchers(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSnippetsWorkspaceEncodedIdNodeId request
	DeleteSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdNodeId request
	GetSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSnippetsWorkspaceEncodedIdNodeId request
	PutSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdNodeIdFilesPath request
	GetSnippetsWorkspaceEncodedIdNodeIdFilesPath(ctx context.Context, workspace string, encodedId string, nodeId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdRevisionDiff request
	GetSnippetsWorkspaceEncodedIdRevisionDiff(ctx context.Context, workspace string, encodedId string, revision string, params *GetSnippetsWorkspaceEncodedIdRevisionDiffParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippetsWorkspaceEncodedIdRevisionPatch request
	GetSnippetsWorkspaceEncodedIdRevisionPatch(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariablesForTeam request
	GetPipelineVariablesForTeam(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineVariableForTeamWithBody request with any body
	CreatePipelineVariableForTeamWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineVariableForTeam(ctx context.Context, username string, body CreatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineVariableForTeam request
	DeletePipelineVariableForTeam(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariableForTeam request
	GetPipelineVariableForTeam(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineVariableForTeamWithBody request with any body
	UpdatePipelineVariableForTeamWithBody(ctx context.Context, username string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePipelineVariableForTeam(ctx context.Context, username string, variableUuid string, body UpdatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchTeam request
	SearchTeam(ctx context.Context, username string, params *SearchTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserEmails request
	GetUserEmails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserEmailsEmail request
	GetUserEmailsEmail(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissionsRepositories request
	GetUserPermissionsRepositories(ctx context.Context, params *GetUserPermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissionsWorkspaces request
	GetUserPermissionsWorkspaces(ctx context.Context, params *GetUserPermissionsWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersSelectedUser request
	GetUsersSelectedUser(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariablesForUser request
	GetPipelineVariablesForUser(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineVariableForUserWithBody request with any body
	CreatePipelineVariableForUserWithBody(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineVariableForUser(ctx context.Context, selectedUser string, body CreatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineVariableForUser request
	DeletePipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariableForUser request
	GetPipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineVariableForUserWithBody request with any body
	UpdatePipelineVariableForUserWithBody(ctx context.Context, selectedUser string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, body UpdatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserHostedPropertyValue request
	DeleteUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetrieveUserHostedPropertyValue request
	RetrieveUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserHostedPropertyValueWithBody request with any body
	UpdateUserHostedPropertyValueWithBody(ctx context.Context, selectedUser string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, body UpdateUserHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchAccount request
	SearchAccount(ctx context.Context, selectedUser string, params *SearchAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersSelectedUserSshKeys request
	GetUsersSelectedUserSshKeys(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersSelectedUserSshKeysWithBody request with any body
	PostUsersSelectedUserSshKeysWithBody(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersSelectedUserSshKeys(ctx context.Context, selectedUser string, body PostUsersSelectedUserSshKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersSelectedUserSshKeysKeyId request
	DeleteUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersSelectedUserSshKeysKeyId request
	GetUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutUsersSelectedUserSshKeysKeyIdWithBody request with any body
	PutUsersSelectedUserSshKeysKeyIdWithBody(ctx context.Context, selectedUser string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, body PutUsersSelectedUserSshKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaces request
	GetWorkspaces(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspace request
	GetWorkspacesWorkspace(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceHooks request
	GetWorkspacesWorkspaceHooks(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkspacesWorkspaceHooks request
	PostWorkspacesWorkspaceHooks(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceHooksUid request
	DeleteWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceHooksUid request
	GetWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceHooksUid request
	PutWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceMembers request
	GetWorkspacesWorkspaceMembers(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceMembersMember request
	GetWorkspacesWorkspaceMembersMember(ctx context.Context, workspace string, member string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspacePermissions request
	GetWorkspacesWorkspacePermissions(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspacePermissionsRepositories request
	GetWorkspacesWorkspacePermissionsRepositories(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug request
	GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug(ctx context.Context, workspace string, repoSlug string, params *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOIDCConfiguration request
	GetOIDCConfiguration(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOIDCKeys request
	GetOIDCKeys(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariablesForWorkspace request
	GetPipelineVariablesForWorkspace(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePipelineVariableForWorkspaceWithBody request with any body
	CreatePipelineVariableForWorkspaceWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePipelineVariableForWorkspace(ctx context.Context, workspace string, body CreatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePipelineVariableForWorkspace request
	DeletePipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPipelineVariableForWorkspace request
	GetPipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePipelineVariableForWorkspaceWithBody request with any body
	UpdatePipelineVariableForWorkspaceWithBody(ctx context.Context, workspace string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, body UpdatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjects request
	GetWorkspacesWorkspaceProjects(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkspacesWorkspaceProjectsWithBody request with any body
	PostWorkspacesWorkspaceProjectsWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkspacesWorkspaceProjects(ctx context.Context, workspace string, body PostWorkspacesWorkspaceProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKey request
	DeleteWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKey request
	GetWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyWithBody request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyWithBody(ctx context.Context, workspace string, projectKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, body PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModel request
	GetWorkspacesWorkspaceProjectsProjectKeyBranchingModel(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings request
	GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings request
	PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewers request
	GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewers(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser request
	DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser request
	GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser request
	PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeys request
	GetWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkspacesWorkspaceProjectsProjectKeyDeployKeys request
	PostWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId request
	DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId request
	GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroups request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroups(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug request
	DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBody request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBody(ctx context.Context, workspace string, projectKey string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsers request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsers(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId request
	DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBody request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBody(ctx context.Context, workspace string, projectKey string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspacesWorkspacePullrequestsSelectedUser request
	GetWorkspacesWorkspacePullrequestsSelectedUser(ctx context.Context, workspace string, selectedUser string, params *GetWorkspacesWorkspacePullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchWorkspace request
	SearchWorkspace(ctx context.Context, workspace string, params *SearchWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAddonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddonLinkers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonLinkersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddonLinkersLinkerKey(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonLinkersLinkerKeyRequest(c.Server, linkerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddonLinkersLinkerKeyValuesRequest(c.Server, linkerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonLinkersLinkerKeyValuesRequest(c.Server, linkerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAddonLinkersLinkerKeyValuesRequest(c.Server, linkerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAddonLinkersLinkerKeyValues(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAddonLinkersLinkerKeyValuesRequest(c.Server, linkerKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAddonLinkersLinkerKeyValuesValueId(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddonLinkersLinkerKeyValuesValueIdRequest(c.Server, linkerKey, valueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddonLinkersLinkerKeyValuesValueId(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddonLinkersLinkerKeyValuesValueIdRequest(c.Server, linkerKey, valueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHookEvents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHookEventsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHookEventsSubjectType(ctx context.Context, subjectType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHookEventsSubjectTypeRequest(c.Server, subjectType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPullrequestsSelectedUser(ctx context.Context, selectedUser string, params *GetPullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPullrequestsSelectedUserRequest(c.Server, selectedUser, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositories(ctx context.Context, params *GetRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspace(ctx context.Context, workspace string, params *GetRepositoriesWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRequest(c.Server, workspace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoriesWorkspaceRepoSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlug(ctx context.Context, workspace string, repoSlug string, body PutRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(c.Server, workspace, repoSlug, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(c.Server, workspace, repoSlug, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBody(ctx context.Context, workspace string, repoSlug string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequestWithBody(c.Server, workspace, repoSlug, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx context.Context, workspace string, repoSlug string, id string, body PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(c.Server, workspace, repoSlug, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugBranchingModel(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugBranchingModelRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitCommit(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitCommitRequest(c.Server, workspace, repoSlug, commit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest(c.Server, workspace, repoSlug, commit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest(c.Server, workspace, repoSlug, commit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest(c.Server, workspace, repoSlug, commit, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBody(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequestWithBody(c.Server, workspace, repoSlug, commit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest(c.Server, workspace, repoSlug, commit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(c.Server, workspace, repoSlug, commit, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(c.Server, workspace, repoSlug, commit, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequestWithBody(c.Server, workspace, repoSlug, commit, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, body PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(c.Server, workspace, repoSlug, commit, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCommitHostedPropertyValueRequest(c.Server, workspace, repoSlug, commit, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommitHostedPropertyValueRequest(c.Server, workspace, repoSlug, commit, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommitHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommitHostedPropertyValueRequestWithBody(c.Server, workspace, repoSlug, commit, appKey, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCommitHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, body UpdateCommitHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCommitHostedPropertyValueRequest(c.Server, workspace, repoSlug, commit, appKey, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPullrequestsForCommit(ctx context.Context, workspace string, repoSlug string, commit string, params *GetPullrequestsForCommitParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPullrequestsForCommitRequest(c.Server, workspace, repoSlug, commit, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReportsForCommit(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportsForCommitRequest(c.Server, workspace, repoSlug, commit)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteReportRequest(c.Server, workspace, repoSlug, commit, reportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReportRequest(c.Server, workspace, repoSlug, commit, reportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateReportWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateReportRequestWithBody(c.Server, workspace, repoSlug, commit, reportId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body CreateOrUpdateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateReportRequest(c.Server, workspace, repoSlug, commit, reportId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnotationsForReport(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnotationsForReportRequest(c.Server, workspace, repoSlug, commit, reportId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkCreateOrUpdateAnnotationsWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkCreateOrUpdateAnnotationsRequestWithBody(c.Server, workspace, repoSlug, commit, reportId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkCreateOrUpdateAnnotations(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body BulkCreateOrUpdateAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkCreateOrUpdateAnnotationsRequest(c.Server, workspace, repoSlug, commit, reportId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAnnotationRequest(c.Server, workspace, repoSlug, commit, reportId, annotationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAnnotationRequest(c.Server, workspace, repoSlug, commit, reportId, annotationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateAnnotationWithBody(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateAnnotationRequestWithBody(c.Server, workspace, repoSlug, commit, reportId, annotationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateAnnotation(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, body CreateOrUpdateAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateAnnotationRequest(c.Server, workspace, repoSlug, commit, reportId, annotationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest(c.Server, workspace, repoSlug, commit, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBody(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequestWithBody(c.Server, workspace, repoSlug, commit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequest(c.Server, workspace, repoSlug, commit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx context.Context, workspace string, repoSlug string, commit string, key string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest(c.Server, workspace, repoSlug, commit, key)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBody(ctx context.Context, workspace string, repoSlug string, commit string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequestWithBody(c.Server, workspace, repoSlug, commit, key, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx context.Context, workspace string, repoSlug string, commit string, key string, body PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest(c.Server, workspace, repoSlug, commit, key, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommits(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommits(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugCommitsRevision(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugCommitsRevisionRequest(c.Server, workspace, repoSlug, revision)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugCommitsRevision(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionRequest(c.Server, workspace, repoSlug, revision)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugComponents(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugComponentsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugComponentsComponentId(ctx context.Context, workspace string, repoSlug string, componentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIdRequest(c.Server, workspace, repoSlug, componentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDefaultReviewers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(c.Server, workspace, repoSlug, targetUsername)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(c.Server, workspace, repoSlug, targetUsername)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(c.Server, workspace, repoSlug, targetUsername)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDeployKeys(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDeployKeysRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugDeployKeys(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugDeployKeysRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(c.Server, workspace, repoSlug, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(c.Server, workspace, repoSlug, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(c.Server, workspace, repoSlug, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentsForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentsForRepositoryRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentForRepository(ctx context.Context, workspace string, repoSlug string, deploymentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentForRepositoryRequest(c.Server, workspace, repoSlug, deploymentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDeploymentVariables(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDeploymentVariablesRequest(c.Server, workspace, repoSlug, environmentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentVariableWithBody(ctx context.Context, workspace string, repoSlug string, environmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentVariableRequestWithBody(c.Server, workspace, repoSlug, environmentUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, body CreateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDeploymentVariableRequest(c.Server, workspace, repoSlug, environmentUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDeploymentVariableRequest(c.Server, workspace, repoSlug, environmentUuid, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploymentVariableWithBody(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentVariableRequestWithBody(c.Server, workspace, repoSlug, environmentUuid, variableUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDeploymentVariable(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, body UpdateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDeploymentVariableRequest(c.Server, workspace, repoSlug, environmentUuid, variableUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDiffSpec(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDiffSpecRequest(c.Server, workspace, repoSlug, spec, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDiffstatSpec(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecRequest(c.Server, workspace, repoSlug, spec, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDownloads(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDownloadsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugDownloads(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugDownloadsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest(c.Server, workspace, repoSlug, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest(c.Server, workspace, repoSlug, filename)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModel(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentsForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentsForRepositoryRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, workspace string, repoSlug string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentForRepositoryRequest(c.Server, workspace, repoSlug, environmentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentForRepositoryRequest(c.Server, workspace, repoSlug, environmentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentForRepository(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentForRepositoryRequest(c.Server, workspace, repoSlug, environmentUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest(c.Server, workspace, repoSlug, commit, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugForks(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugForksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugForksRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugForksWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugForksRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugForks(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugForksRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugHooksRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugHooks(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugHooksRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugHooksUidRequest(c.Server, workspace, repoSlug, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugHooksUidRequest(c.Server, workspace, repoSlug, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugHooksUid(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugHooksUidRequest(c.Server, workspace, repoSlug, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssues(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssues(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesExportWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesExport(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip(ctx context.Context, workspace string, repoSlug string, repoName string, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipRequest(c.Server, workspace, repoSlug, repoName, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesImport(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesImportRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesImport(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesImportRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest(c.Server, workspace, repoSlug, issueId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest(c.Server, workspace, repoSlug, issueId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest(c.Server, workspace, repoSlug, issueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequestWithBody(c.Server, workspace, repoSlug, issueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest(c.Server, workspace, repoSlug, issueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId(ctx context.Context, workspace string, repoSlug string, issueId string, changeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdRequest(c.Server, workspace, repoSlug, issueId, changeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest(c.Server, workspace, repoSlug, issueId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequestWithBody(c.Server, workspace, repoSlug, issueId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest(c.Server, workspace, repoSlug, issueId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, issueId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, issueId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequestWithBody(c.Server, workspace, repoSlug, issueId, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, body PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, issueId, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(c.Server, workspace, repoSlug, issueId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec(ctx context.Context, workspace string, repoSlug string, revspec string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecRequest(c.Server, workspace, repoSlug, revspec)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugMilestones(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugMilestonesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneId(ctx context.Context, workspace string, repoSlug string, milestoneId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdRequest(c.Server, workspace, repoSlug, milestoneId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugOverrideSettings(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPatchSpec(ctx context.Context, workspace string, repoSlug string, spec string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPatchSpecRequest(c.Server, workspace, repoSlug, spec)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, repoSlug, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, repoSlug, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBody(ctx context.Context, workspace string, repoSlug string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequestWithBody(c.Server, workspace, repoSlug, groupSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, repoSlug string, groupSlug string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, repoSlug, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, repoSlug, selectedUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, repoSlug, selectedUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBody(ctx context.Context, workspace string, repoSlug string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequestWithBody(c.Server, workspace, repoSlug, selectedUserId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, repoSlug string, selectedUserId string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, repoSlug, selectedUserId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelinesForRepository(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelinesForRepositoryRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineForRepositoryWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineForRepositoryRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineForRepository(ctx context.Context, workspace string, repoSlug string, body CreatePipelineForRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineForRepositoryRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineCaches(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoryPipelineCachesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineCachesRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineCaches(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineCachesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineCache(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineCacheRequest(c.Server, workspace, repoSlug, cacheUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineCacheContentURI(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineCacheContentURIRequest(c.Server, workspace, repoSlug, cacheUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineForRepositoryRequest(c.Server, workspace, repoSlug, pipelineUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineStepsForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineStepsForRepositoryRequest(c.Server, workspace, repoSlug, pipelineUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineStepForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineStepForRepositoryRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineStepLogForRepository(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineStepLogForRepositoryRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineContainerLog(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, logUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineContainerLogRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid, logUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineTestReports(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineTestReportsRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineTestReportTestCases(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineTestReportTestCasesRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineTestReportTestCaseReasons(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, testCaseUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineTestReportTestCaseReasonsRequest(c.Server, workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopPipeline(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopPipelineRequest(c.Server, workspace, repoSlug, pipelineUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineConfig(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineConfigRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineConfigWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineConfigRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineConfig(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineConfigRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryBuildNumberWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryBuildNumberRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryBuildNumber(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryBuildNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryBuildNumberRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineSchedules(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineSchedulesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineScheduleWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineScheduleRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineScheduleRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineScheduleRequest(c.Server, workspace, repoSlug, scheduleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineScheduleRequest(c.Server, workspace, repoSlug, scheduleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineScheduleWithBody(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineScheduleRequestWithBody(c.Server, workspace, repoSlug, scheduleUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineSchedule(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, body UpdateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineScheduleRequest(c.Server, workspace, repoSlug, scheduleUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineScheduleExecutions(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineScheduleExecutionsRequest(c.Server, workspace, repoSlug, scheduleUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineKeyPair(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineKeyPairRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineSshKeyPair(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineSshKeyPairRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineKeyPairWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineKeyPairRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineKeyPair(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineKeyPairRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineKnownHosts(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineKnownHostsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineKnownHostWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineKnownHostRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineKnownHostRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineKnownHostRequest(c.Server, workspace, repoSlug, knownHostUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineKnownHostRequest(c.Server, workspace, repoSlug, knownHostUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineKnownHostWithBody(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineKnownHostRequestWithBody(c.Server, workspace, repoSlug, knownHostUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineKnownHost(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, body UpdateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineKnownHostRequest(c.Server, workspace, repoSlug, knownHostUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineVariables(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineVariablesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineVariableWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineVariableRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRepositoryPipelineVariableRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryPipelineVariableRequest(c.Server, workspace, repoSlug, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryPipelineVariableRequest(c.Server, workspace, repoSlug, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineVariableWithBody(ctx context.Context, workspace string, repoSlug string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineVariableRequestWithBody(c.Server, workspace, repoSlug, variableUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryPipelineVariable(ctx context.Context, workspace string, repoSlug string, variableUuid string, body UpdateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryPipelineVariableRequest(c.Server, workspace, repoSlug, variableUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoryHostedPropertyValueRequest(c.Server, workspace, repoSlug, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoryHostedPropertyValueRequest(c.Server, workspace, repoSlug, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryHostedPropertyValueRequestWithBody(c.Server, workspace, repoSlug, appKey, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRepositoryHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, body UpdateRepositoryHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRepositoryHostedPropertyValueRequest(c.Server, workspace, repoSlug, appKey, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequests(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequests(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsActivity(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest(c.Server, workspace, repoSlug, pullRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivity(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest(c.Server, workspace, repoSlug, pullRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, pullRequestId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, pullRequestId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(c.Server, workspace, repoSlug, pullRequestId, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest(c.Server, workspace, repoSlug, pullRequestId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest(c.Server, workspace, repoSlug, pullRequestId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommits(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDecline(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiff(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstat(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequest(c.Server, workspace, repoSlug, pullRequestId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdRequest(c.Server, workspace, repoSlug, pullRequestId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatch(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest(c.Server, workspace, repoSlug, pullRequestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesRequest(c.Server, workspace, repoSlug, pullRequestId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest(c.Server, workspace, repoSlug, pullRequestId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest(c.Server, workspace, repoSlug, pullRequestId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(c.Server, workspace, repoSlug, pullRequestId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(c.Server, workspace, repoSlug, pullRequestId, taskId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBody(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequestWithBody(c.Server, workspace, repoSlug, pullRequestId, taskId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(c.Server, workspace, repoSlug, pullRequestId, taskId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePullRequestHostedPropertyValueRequest(c.Server, workspace, repoSlug, pullrequestId, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPullRequestHostedPropertyValueRequest(c.Server, workspace, repoSlug, pullrequestId, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePullRequestHostedPropertyValueWithBody(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePullRequestHostedPropertyValueRequestWithBody(c.Server, workspace, repoSlug, pullrequestId, appKey, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePullRequestHostedPropertyValue(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, body UpdatePullRequestHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePullRequestHostedPropertyValueRequest(c.Server, workspace, repoSlug, pullrequestId, appKey, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugRefs(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRefsRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugRefsBranches(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugRefsBranches(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugRefsBranchesRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest(c.Server, workspace, repoSlug, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest(c.Server, workspace, repoSlug, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugRefsTags(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRefsTagsRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugRefsTagsWithBody(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequestWithBody(c.Server, workspace, repoSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugRefsTags(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequest(c.Server, workspace, repoSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRepositoriesWorkspaceRepoSlugRefsTagsName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameRequest(c.Server, workspace, repoSlug, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugRefsTagsName(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameRequest(c.Server, workspace, repoSlug, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugSrcRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRepositoriesWorkspaceRepoSlugSrc(ctx context.Context, workspace string, repoSlug string, params *PostRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRepositoriesWorkspaceRepoSlugSrcRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugSrcCommitPath(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest(c.Server, workspace, repoSlug, commit, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugVersions(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugVersionsRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugVersionsVersionId(ctx context.Context, workspace string, repoSlug string, versionId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugVersionsVersionIdRequest(c.Server, workspace, repoSlug, versionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRepositoriesWorkspaceRepoSlugWatchers(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRepositoriesWorkspaceRepoSlugWatchersRequest(c.Server, workspace, repoSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippets(ctx context.Context, params *GetSnippetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippetsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippets(ctx context.Context, body PostSnippetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspace(ctx context.Context, workspace string, params *GetSnippetsWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceRequest(c.Server, workspace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippetsWorkspaceWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsWorkspaceRequestWithBody(c.Server, workspace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippetsWorkspace(ctx context.Context, workspace string, body PostSnippetsWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsWorkspaceRequest(c.Server, workspace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnippetsWorkspaceEncodedIdRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnippetsWorkspaceEncodedId(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnippetsWorkspaceEncodedIdRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdComments(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdCommentsRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippetsWorkspaceEncodedIdCommentsWithBody(ctx context.Context, workspace string, encodedId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsWorkspaceEncodedIdCommentsRequestWithBody(c.Server, workspace, encodedId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSnippetsWorkspaceEncodedIdComments(ctx context.Context, workspace string, encodedId string, body PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSnippetsWorkspaceEncodedIdCommentsRequest(c.Server, workspace, encodedId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(c.Server, workspace, encodedId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(c.Server, workspace, encodedId, commentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBody(ctx context.Context, workspace string, encodedId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequestWithBody(c.Server, workspace, encodedId, commentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnippetsWorkspaceEncodedIdCommentsCommentId(ctx context.Context, workspace string, encodedId string, commentId int, body PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(c.Server, workspace, encodedId, commentId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdCommits(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdCommitsRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdCommitsRevision(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdCommitsRevisionRequest(c.Server, workspace, encodedId, revision)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdFilesPath(ctx context.Context, workspace string, encodedId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdFilesPathRequest(c.Server, workspace, encodedId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnippetsWorkspaceEncodedIdWatchRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdWatchRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnippetsWorkspaceEncodedIdWatch(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnippetsWorkspaceEncodedIdWatchRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdWatchers(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdWatchersRequest(c.Server, workspace, encodedId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSnippetsWorkspaceEncodedIdNodeIdRequest(c.Server, workspace, encodedId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdNodeIdRequest(c.Server, workspace, encodedId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSnippetsWorkspaceEncodedIdNodeId(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSnippetsWorkspaceEncodedIdNodeIdRequest(c.Server, workspace, encodedId, nodeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdNodeIdFilesPath(ctx context.Context, workspace string, encodedId string, nodeId string, path string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdNodeIdFilesPathRequest(c.Server, workspace, encodedId, nodeId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdRevisionDiff(ctx context.Context, workspace string, encodedId string, revision string, params *GetSnippetsWorkspaceEncodedIdRevisionDiffParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdRevisionDiffRequest(c.Server, workspace, encodedId, revision, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippetsWorkspaceEncodedIdRevisionPatch(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetsWorkspaceEncodedIdRevisionPatchRequest(c.Server, workspace, encodedId, revision)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariablesForTeam(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariablesForTeamRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForTeamWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForTeamRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForTeam(ctx context.Context, username string, body CreatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForTeamRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineVariableForTeam(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineVariableForTeamRequest(c.Server, username, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariableForTeam(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariableForTeamRequest(c.Server, username, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForTeamWithBody(ctx context.Context, username string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForTeamRequestWithBody(c.Server, username, variableUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForTeam(ctx context.Context, username string, variableUuid string, body UpdatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForTeamRequest(c.Server, username, variableUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchTeam(ctx context.Context, username string, params *SearchTeamParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchTeamRequest(c.Server, username, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserEmails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserEmailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserEmailsEmail(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserEmailsEmailRequest(c.Server, email)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissionsRepositories(ctx context.Context, params *GetUserPermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsRepositoriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissionsWorkspaces(ctx context.Context, params *GetUserPermissionsWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsWorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersSelectedUser(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersSelectedUserRequest(c.Server, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariablesForUser(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariablesForUserRequest(c.Server, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForUserWithBody(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForUserRequestWithBody(c.Server, selectedUser, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForUser(ctx context.Context, selectedUser string, body CreatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForUserRequest(c.Server, selectedUser, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineVariableForUserRequest(c.Server, selectedUser, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariableForUserRequest(c.Server, selectedUser, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForUserWithBody(ctx context.Context, selectedUser string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForUserRequestWithBody(c.Server, selectedUser, variableUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForUser(ctx context.Context, selectedUser string, variableUuid string, body UpdatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForUserRequest(c.Server, selectedUser, variableUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserHostedPropertyValueRequest(c.Server, selectedUser, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetrieveUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetrieveUserHostedPropertyValueRequest(c.Server, selectedUser, appKey, propertyName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserHostedPropertyValueWithBody(ctx context.Context, selectedUser string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserHostedPropertyValueRequestWithBody(c.Server, selectedUser, appKey, propertyName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserHostedPropertyValue(ctx context.Context, selectedUser string, appKey string, propertyName string, body UpdateUserHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserHostedPropertyValueRequest(c.Server, selectedUser, appKey, propertyName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchAccount(ctx context.Context, selectedUser string, params *SearchAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchAccountRequest(c.Server, selectedUser, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersSelectedUserSshKeys(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersSelectedUserSshKeysRequest(c.Server, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersSelectedUserSshKeysWithBody(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersSelectedUserSshKeysRequestWithBody(c.Server, selectedUser, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersSelectedUserSshKeys(ctx context.Context, selectedUser string, body PostUsersSelectedUserSshKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersSelectedUserSshKeysRequest(c.Server, selectedUser, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersSelectedUserSshKeysKeyIdRequest(c.Server, selectedUser, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersSelectedUserSshKeysKeyIdRequest(c.Server, selectedUser, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersSelectedUserSshKeysKeyIdWithBody(ctx context.Context, selectedUser string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersSelectedUserSshKeysKeyIdRequestWithBody(c.Server, selectedUser, keyId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutUsersSelectedUserSshKeysKeyId(ctx context.Context, selectedUser string, keyId string, body PutUsersSelectedUserSshKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutUsersSelectedUserSshKeysKeyIdRequest(c.Server, selectedUser, keyId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaces(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspace(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceHooks(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceHooksRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkspacesWorkspaceHooks(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkspacesWorkspaceHooksRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceHooksUidRequest(c.Server, workspace, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceHooksUidRequest(c.Server, workspace, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceHooksUid(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceHooksUidRequest(c.Server, workspace, uid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceMembers(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceMembersRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceMembersMember(ctx context.Context, workspace string, member string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceMembersMemberRequest(c.Server, workspace, member)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspacePermissions(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspacePermissionsRequest(c.Server, workspace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspacePermissionsRepositories(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspacePermissionsRepositoriesRequest(c.Server, workspace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug(ctx context.Context, workspace string, repoSlug string, params *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest(c.Server, workspace, repoSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOIDCConfiguration(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOIDCConfigurationRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOIDCKeys(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOIDCKeysRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariablesForWorkspace(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariablesForWorkspaceRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForWorkspaceWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForWorkspaceRequestWithBody(c.Server, workspace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePipelineVariableForWorkspace(ctx context.Context, workspace string, body CreatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePipelineVariableForWorkspaceRequest(c.Server, workspace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePipelineVariableForWorkspaceRequest(c.Server, workspace, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPipelineVariableForWorkspaceRequest(c.Server, workspace, variableUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForWorkspaceWithBody(ctx context.Context, workspace string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForWorkspaceRequestWithBody(c.Server, workspace, variableUuid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePipelineVariableForWorkspace(ctx context.Context, workspace string, variableUuid string, body UpdatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePipelineVariableForWorkspaceRequest(c.Server, workspace, variableUuid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjects(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsRequest(c.Server, workspace)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkspacesWorkspaceProjectsWithBody(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkspacesWorkspaceProjectsRequestWithBody(c.Server, workspace, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkspacesWorkspaceProjects(ctx context.Context, workspace string, body PostWorkspacesWorkspaceProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkspacesWorkspaceProjectsRequest(c.Server, workspace, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceProjectsProjectKeyRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyWithBody(ctx context.Context, workspace string, projectKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyRequestWithBody(c.Server, workspace, projectKey, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKey(ctx context.Context, workspace string, projectKey string, body PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyRequest(c.Server, workspace, projectKey, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyBranchingModel(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewers(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(c.Server, workspace, projectKey, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(c.Server, workspace, projectKey, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(c.Server, workspace, projectKey, selectedUser)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(c.Server, workspace, projectKey, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(c.Server, workspace, projectKey, keyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroups(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, projectKey, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, projectKey, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBody(ctx context.Context, workspace string, projectKey string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequestWithBody(c.Server, workspace, projectKey, groupSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx context.Context, workspace string, projectKey string, groupSlug string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(c.Server, workspace, projectKey, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsers(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersRequest(c.Server, workspace, projectKey)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, projectKey, selectedUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, projectKey, selectedUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBody(ctx context.Context, workspace string, projectKey string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequestWithBody(c.Server, workspace, projectKey, selectedUserId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx context.Context, workspace string, projectKey string, selectedUserId string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(c.Server, workspace, projectKey, selectedUserId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspacesWorkspacePullrequestsSelectedUser(ctx context.Context, workspace string, selectedUser string, params *GetWorkspacesWorkspacePullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspacesWorkspacePullrequestsSelectedUserRequest(c.Server, workspace, selectedUser, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchWorkspace(ctx context.Context, workspace string, params *SearchWorkspaceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchWorkspaceRequest(c.Server, workspace, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAddonRequest generates requests for DeleteAddon
func NewDeleteAddonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAddonRequest generates requests for PutAddon
func NewPutAddonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddonLinkersRequest generates requests for GetAddonLinkers
func NewGetAddonLinkersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddonLinkersLinkerKeyRequest generates requests for GetAddonLinkersLinkerKey
func NewGetAddonLinkersLinkerKeyRequest(server string, linkerKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAddonLinkersLinkerKeyValuesRequest generates requests for DeleteAddonLinkersLinkerKeyValues
func NewDeleteAddonLinkersLinkerKeyValuesRequest(server string, linkerKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddonLinkersLinkerKeyValuesRequest generates requests for GetAddonLinkersLinkerKeyValues
func NewGetAddonLinkersLinkerKeyValuesRequest(server string, linkerKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAddonLinkersLinkerKeyValuesRequest generates requests for PostAddonLinkersLinkerKeyValues
func NewPostAddonLinkersLinkerKeyValuesRequest(server string, linkerKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAddonLinkersLinkerKeyValuesRequest generates requests for PutAddonLinkersLinkerKeyValues
func NewPutAddonLinkersLinkerKeyValuesRequest(server string, linkerKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAddonLinkersLinkerKeyValuesValueIdRequest generates requests for DeleteAddonLinkersLinkerKeyValuesValueId
func NewDeleteAddonLinkersLinkerKeyValuesValueIdRequest(server string, linkerKey string, valueId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "value_id", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddonLinkersLinkerKeyValuesValueIdRequest generates requests for GetAddonLinkersLinkerKeyValuesValueId
func NewGetAddonLinkersLinkerKeyValuesValueIdRequest(server string, linkerKey string, valueId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "linker_key", runtime.ParamLocationPath, linkerKey)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "value_id", runtime.ParamLocationPath, valueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addon/linkers/%s/values/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHookEventsRequest generates requests for GetHookEvents
func NewGetHookEventsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hook_events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHookEventsSubjectTypeRequest generates requests for GetHookEventsSubjectType
func NewGetHookEventsSubjectTypeRequest(server string, subjectType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subject_type", runtime.ParamLocationPath, subjectType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hook_events/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPullrequestsSelectedUserRequest generates requests for GetPullrequestsSelectedUser
func NewGetPullrequestsSelectedUserRequest(server string, selectedUser string, params *GetPullrequestsSelectedUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pullrequests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesRequest generates requests for GetRepositories
func NewGetRepositoriesRequest(server string, params *GetRepositoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.After != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRequest generates requests for GetRepositoriesWorkspace
func NewGetRepositoriesWorkspaceRequest(server string, workspace string, params *GetRepositoriesWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRequest generates requests for DeleteRepositoriesWorkspaceRepoSlug
func NewDeleteRepositoriesWorkspaceRepoSlugRequest(server string, workspace string, repoSlug string, params *DeleteRepositoriesWorkspaceRepoSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RedirectTo != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_to", runtime.ParamLocationQuery, *params.RedirectTo); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRequest generates requests for GetRepositoriesWorkspaceRepoSlug
func NewGetRepositoriesWorkspaceRepoSlugRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugRequest calls the generic PostRepositoriesWorkspaceRepoSlug builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlug with any type of body
func NewPostRepositoriesWorkspaceRepoSlugRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugRequest calls the generic PutRepositoriesWorkspaceRepoSlug builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugRequest(server string, workspace string, repoSlug string, body PutRepositoriesWorkspaceRepoSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlug with any type of body
func NewPutRepositoriesWorkspaceRepoSlugRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest generates requests for GetRepositoriesWorkspaceRepoSlugBranchRestrictions
func NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branch-restrictions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Kind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pattern != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pattern", runtime.ParamLocationQuery, *params.Pattern); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest calls the generic PostRepositoriesWorkspaceRepoSlugBranchRestrictions builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugBranchRestrictions with any type of body
func NewPostRepositoriesWorkspaceRepoSlugBranchRestrictionsRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branch-restrictions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId
func NewDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(server string, workspace string, repoSlug string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branch-restrictions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugBranchRestrictionsId
func NewGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(server string, workspace string, repoSlug string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branch-restrictions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequest(server string, workspace string, repoSlug string, id string, body PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequestWithBody(server, workspace, repoSlug, id, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdRequestWithBody(server string, workspace string, repoSlug string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branch-restrictions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugBranchingModelRequest generates requests for GetRepositoriesWorkspaceRepoSlugBranchingModel
func NewGetRepositoriesWorkspaceRepoSlugBranchingModelRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branching-model", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest generates requests for GetRepositoriesWorkspaceRepoSlugBranchingModelSettings
func NewGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branching-model/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest generates requests for PutRepositoriesWorkspaceRepoSlugBranchingModelSettings
func NewPutRepositoriesWorkspaceRepoSlugBranchingModelSettingsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/branching-model/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitCommitRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitCommit
func NewGetRepositoriesWorkspaceRepoSlugCommitCommitRequest(server string, workspace string, repoSlug string, commit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugCommitCommitApprove
func NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest(server string, workspace string, repoSlug string, commit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/approve", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest generates requests for PostRepositoriesWorkspaceRepoSlugCommitCommitApprove
func NewPostRepositoriesWorkspaceRepoSlugCommitCommitApproveRequest(server string, workspace string, repoSlug string, commit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/approve", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitCommitComments
func NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest(server string, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest calls the generic PostRepositoriesWorkspaceRepoSlugCommitCommitComments builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequest(server string, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequestWithBody(server, workspace, repoSlug, commit, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugCommitCommitComments with any type of body
func NewPostRepositoriesWorkspaceRepoSlugCommitCommitCommentsRequestWithBody(server string, workspace string, repoSlug string, commit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId
func NewDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(server string, workspace string, repoSlug string, commit string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId
func NewGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(server string, workspace string, repoSlug string, commit string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequest(server string, workspace string, repoSlug string, commit string, commentId int, body PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequestWithBody(server, workspace, repoSlug, commit, commentId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdRequestWithBody(server string, workspace string, repoSlug string, commit string, commentId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCommitHostedPropertyValueRequest generates requests for DeleteCommitHostedPropertyValue
func NewDeleteCommitHostedPropertyValueRequest(server string, workspace string, repoSlug string, commit string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommitHostedPropertyValueRequest generates requests for GetCommitHostedPropertyValue
func NewGetCommitHostedPropertyValueRequest(server string, workspace string, repoSlug string, commit string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCommitHostedPropertyValueRequest calls the generic UpdateCommitHostedPropertyValue builder with application/json body
func NewUpdateCommitHostedPropertyValueRequest(server string, workspace string, repoSlug string, commit string, appKey string, propertyName string, body UpdateCommitHostedPropertyValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCommitHostedPropertyValueRequestWithBody(server, workspace, repoSlug, commit, appKey, propertyName, "application/json", bodyReader)
}

// NewUpdateCommitHostedPropertyValueRequestWithBody generates requests for UpdateCommitHostedPropertyValue with any type of body
func NewUpdateCommitHostedPropertyValueRequestWithBody(server string, workspace string, repoSlug string, commit string, appKey string, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPullrequestsForCommitRequest generates requests for GetPullrequestsForCommit
func NewGetPullrequestsForCommitRequest(server string, workspace string, repoSlug string, commit string, params *GetPullrequestsForCommitParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/pullrequests", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pagelen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagelen", runtime.ParamLocationQuery, *params.Pagelen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReportsForCommitRequest generates requests for GetReportsForCommit
func NewGetReportsForCommitRequest(server string, workspace string, repoSlug string, commit string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteReportRequest generates requests for DeleteReport
func NewDeleteReportRequest(server string, workspace string, repoSlug string, commit string, reportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReportRequest generates requests for GetReport
func NewGetReportRequest(server string, workspace string, repoSlug string, commit string, reportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateReportRequest calls the generic CreateOrUpdateReport builder with application/json body
func NewCreateOrUpdateReportRequest(server string, workspace string, repoSlug string, commit string, reportId string, body CreateOrUpdateReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateReportRequestWithBody(server, workspace, repoSlug, commit, reportId, "application/json", bodyReader)
}

// NewCreateOrUpdateReportRequestWithBody generates requests for CreateOrUpdateReport with any type of body
func NewCreateOrUpdateReportRequestWithBody(server string, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAnnotationsForReportRequest generates requests for GetAnnotationsForReport
func NewGetAnnotationsForReportRequest(server string, workspace string, repoSlug string, commit string, reportId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s/annotations", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBulkCreateOrUpdateAnnotationsRequest calls the generic BulkCreateOrUpdateAnnotations builder with application/json body
func NewBulkCreateOrUpdateAnnotationsRequest(server string, workspace string, repoSlug string, commit string, reportId string, body BulkCreateOrUpdateAnnotationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkCreateOrUpdateAnnotationsRequestWithBody(server, workspace, repoSlug, commit, reportId, "application/json", bodyReader)
}

// NewBulkCreateOrUpdateAnnotationsRequestWithBody generates requests for BulkCreateOrUpdateAnnotations with any type of body
func NewBulkCreateOrUpdateAnnotationsRequestWithBody(server string, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s/annotations", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAnnotationRequest generates requests for DeleteAnnotation
func NewDeleteAnnotationRequest(server string, workspace string, repoSlug string, commit string, reportId string, annotationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "annotationId", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s/annotations/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAnnotationRequest generates requests for GetAnnotation
func NewGetAnnotationRequest(server string, workspace string, repoSlug string, commit string, reportId string, annotationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "annotationId", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s/annotations/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateAnnotationRequest calls the generic CreateOrUpdateAnnotation builder with application/json body
func NewCreateOrUpdateAnnotationRequest(server string, workspace string, repoSlug string, commit string, reportId string, annotationId string, body CreateOrUpdateAnnotationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateAnnotationRequestWithBody(server, workspace, repoSlug, commit, reportId, annotationId, "application/json", bodyReader)
}

// NewCreateOrUpdateAnnotationRequestWithBody generates requests for CreateOrUpdateAnnotation with any type of body
func NewCreateOrUpdateAnnotationRequestWithBody(server string, workspace string, repoSlug string, commit string, reportId string, annotationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "reportId", runtime.ParamLocationPath, reportId)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "annotationId", runtime.ParamLocationPath, annotationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/reports/%s/annotations/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses
func NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesRequest(server string, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/statuses", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Refname != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refname", runtime.ParamLocationQuery, *params.Refname); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequest calls the generic PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequest(server string, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequestWithBody(server, workspace, repoSlug, commit, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild with any type of body
func NewPostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildRequestWithBody(server string, workspace string, repoSlug string, commit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/statuses/build", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey
func NewGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest(server string, workspace string, repoSlug string, commit string, key string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/statuses/build/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest calls the generic PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequest(server string, workspace string, repoSlug string, commit string, key string, body PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequestWithBody(server, workspace, repoSlug, commit, key, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey with any type of body
func NewPutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyRequestWithBody(server string, workspace string, repoSlug string, commit string, key string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "key", runtime.ParamLocationPath, key)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commit/%s/statuses/build/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitsRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommits
func NewGetRepositoriesWorkspaceRepoSlugCommitsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitsRequest generates requests for PostRepositoriesWorkspaceRepoSlugCommits
func NewPostRepositoriesWorkspaceRepoSlugCommitsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugCommitsRevisionRequest generates requests for GetRepositoriesWorkspaceRepoSlugCommitsRevision
func NewGetRepositoriesWorkspaceRepoSlugCommitsRevisionRequest(server string, workspace string, repoSlug string, revision string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationPath, revision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commits/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionRequest generates requests for PostRepositoriesWorkspaceRepoSlugCommitsRevision
func NewPostRepositoriesWorkspaceRepoSlugCommitsRevisionRequest(server string, workspace string, repoSlug string, revision string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationPath, revision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/commits/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugComponentsRequest generates requests for GetRepositoriesWorkspaceRepoSlugComponents
func NewGetRepositoriesWorkspaceRepoSlugComponentsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/components", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugComponentsComponentId
func NewGetRepositoriesWorkspaceRepoSlugComponentsComponentIdRequest(server string, workspace string, repoSlug string, componentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "component_id", runtime.ParamLocationPath, componentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/components/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersRequest generates requests for GetRepositoriesWorkspaceRepoSlugDefaultReviewers
func NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/default-reviewers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername
func NewDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(server string, workspace string, repoSlug string, targetUsername string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "target_username", runtime.ParamLocationPath, targetUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest generates requests for GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername
func NewGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(server string, workspace string, repoSlug string, targetUsername string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "target_username", runtime.ParamLocationPath, targetUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest generates requests for PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername
func NewPutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameRequest(server string, workspace string, repoSlug string, targetUsername string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "target_username", runtime.ParamLocationPath, targetUsername)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysRequest generates requests for GetRepositoriesWorkspaceRepoSlugDeployKeys
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deploy-keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugDeployKeysRequest generates requests for PostRepositoriesWorkspaceRepoSlugDeployKeys
func NewPostRepositoriesWorkspaceRepoSlugDeployKeysRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deploy-keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId
func NewDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(server string, workspace string, repoSlug string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deploy-keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugDeployKeysKeyId
func NewGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(server string, workspace string, repoSlug string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deploy-keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest generates requests for PutRepositoriesWorkspaceRepoSlugDeployKeysKeyId
func NewPutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdRequest(server string, workspace string, repoSlug string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deploy-keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentsForRepositoryRequest generates requests for GetDeploymentsForRepository
func NewGetDeploymentsForRepositoryRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentForRepositoryRequest generates requests for GetDeploymentForRepository
func NewGetDeploymentForRepositoryRequest(server string, workspace string, repoSlug string, deploymentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "deployment_uuid", runtime.ParamLocationPath, deploymentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDeploymentVariablesRequest generates requests for GetDeploymentVariables
func NewGetDeploymentVariablesRequest(server string, workspace string, repoSlug string, environmentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments_config/environments/%s/variables", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDeploymentVariableRequest calls the generic CreateDeploymentVariable builder with application/json body
func NewCreateDeploymentVariableRequest(server string, workspace string, repoSlug string, environmentUuid string, body CreateDeploymentVariableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDeploymentVariableRequestWithBody(server, workspace, repoSlug, environmentUuid, "application/json", bodyReader)
}

// NewCreateDeploymentVariableRequestWithBody generates requests for CreateDeploymentVariable with any type of body
func NewCreateDeploymentVariableRequestWithBody(server string, workspace string, repoSlug string, environmentUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments_config/environments/%s/variables", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDeploymentVariableRequest generates requests for DeleteDeploymentVariable
func NewDeleteDeploymentVariableRequest(server string, workspace string, repoSlug string, environmentUuid string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments_config/environments/%s/variables/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDeploymentVariableRequest calls the generic UpdateDeploymentVariable builder with application/json body
func NewUpdateDeploymentVariableRequest(server string, workspace string, repoSlug string, environmentUuid string, variableUuid string, body UpdateDeploymentVariableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDeploymentVariableRequestWithBody(server, workspace, repoSlug, environmentUuid, variableUuid, "application/json", bodyReader)
}

// NewUpdateDeploymentVariableRequestWithBody generates requests for UpdateDeploymentVariable with any type of body
func NewUpdateDeploymentVariableRequestWithBody(server string, workspace string, repoSlug string, environmentUuid string, variableUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/deployments_config/environments/%s/variables/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDiffSpecRequest generates requests for GetRepositoriesWorkspaceRepoSlugDiffSpec
func NewGetRepositoriesWorkspaceRepoSlugDiffSpecRequest(server string, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffSpecParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "spec", runtime.ParamLocationPath, spec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/diff/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IgnoreWhitespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore_whitespace", runtime.ParamLocationQuery, *params.IgnoreWhitespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Binary != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "binary", runtime.ParamLocationQuery, *params.Binary); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Renames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "renames", runtime.ParamLocationQuery, *params.Renames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Merge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge", runtime.ParamLocationQuery, *params.Merge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Topic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topic", runtime.ParamLocationQuery, *params.Topic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecRequest generates requests for GetRepositoriesWorkspaceRepoSlugDiffstatSpec
func NewGetRepositoriesWorkspaceRepoSlugDiffstatSpecRequest(server string, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "spec", runtime.ParamLocationPath, spec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/diffstat/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IgnoreWhitespace != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ignore_whitespace", runtime.ParamLocationQuery, *params.IgnoreWhitespace); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Merge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "merge", runtime.ParamLocationQuery, *params.Merge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Renames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "renames", runtime.ParamLocationQuery, *params.Renames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Topic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "topic", runtime.ParamLocationQuery, *params.Topic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDownloadsRequest generates requests for GetRepositoriesWorkspaceRepoSlugDownloads
func NewGetRepositoriesWorkspaceRepoSlugDownloadsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/downloads", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugDownloadsRequest generates requests for PostRepositoriesWorkspaceRepoSlugDownloads
func NewPostRepositoriesWorkspaceRepoSlugDownloadsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/downloads", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename
func NewDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest(server string, workspace string, repoSlug string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/downloads/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest generates requests for GetRepositoriesWorkspaceRepoSlugDownloadsFilename
func NewGetRepositoriesWorkspaceRepoSlugDownloadsFilenameRequest(server string, workspace string, repoSlug string, filename string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "filename", runtime.ParamLocationPath, filename)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/downloads/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelRequest generates requests for GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModel
func NewGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/effective-branching-model", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersRequest generates requests for GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewers
func NewGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/effective-default-reviewers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentsForRepositoryRequest generates requests for GetEnvironmentsForRepository
func NewGetEnvironmentsForRepositoryRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/environments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, workspace string, repoSlug string, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/environments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentForRepositoryRequest generates requests for DeleteEnvironmentForRepository
func NewDeleteEnvironmentForRepositoryRequest(server string, workspace string, repoSlug string, environmentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/environments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentForRepositoryRequest generates requests for GetEnvironmentForRepository
func NewGetEnvironmentForRepositoryRequest(server string, workspace string, repoSlug string, environmentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/environments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEnvironmentForRepositoryRequest generates requests for UpdateEnvironmentForRepository
func NewUpdateEnvironmentForRepositoryRequest(server string, workspace string, repoSlug string, environmentUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "environment_uuid", runtime.ParamLocationPath, environmentUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/environments/%s/changes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest generates requests for GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath
func NewGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathRequest(server string, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/filehistory/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Renames != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "renames", runtime.ParamLocationQuery, *params.Renames); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugForksRequest generates requests for GetRepositoriesWorkspaceRepoSlugForks
func NewGetRepositoriesWorkspaceRepoSlugForksRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugForksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/forks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugForksRequest calls the generic PostRepositoriesWorkspaceRepoSlugForks builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugForksRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugForksRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugForksRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugForks with any type of body
func NewPostRepositoriesWorkspaceRepoSlugForksRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/forks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugHooksRequest generates requests for GetRepositoriesWorkspaceRepoSlugHooks
func NewGetRepositoriesWorkspaceRepoSlugHooksRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/hooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugHooksRequest generates requests for PostRepositoriesWorkspaceRepoSlugHooks
func NewPostRepositoriesWorkspaceRepoSlugHooksRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/hooks", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugHooksUidRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugHooksUid
func NewDeleteRepositoriesWorkspaceRepoSlugHooksUidRequest(server string, workspace string, repoSlug string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/hooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugHooksUidRequest generates requests for GetRepositoriesWorkspaceRepoSlugHooksUid
func NewGetRepositoriesWorkspaceRepoSlugHooksUidRequest(server string, workspace string, repoSlug string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/hooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugHooksUidRequest generates requests for PutRepositoriesWorkspaceRepoSlugHooksUid
func NewPutRepositoriesWorkspaceRepoSlugHooksUidRequest(server string, workspace string, repoSlug string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/hooks/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssues
func NewGetRepositoriesWorkspaceRepoSlugIssuesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesRequest calls the generic PostRepositoriesWorkspaceRepoSlugIssues builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugIssuesRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugIssuesRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugIssues with any type of body
func NewPostRepositoriesWorkspaceRepoSlugIssuesRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequest calls the generic PostRepositoriesWorkspaceRepoSlugIssuesExport builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugIssuesExport with any type of body
func NewPostRepositoriesWorkspaceRepoSlugIssuesExportRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/export", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip
func NewGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipRequest(server string, workspace string, repoSlug string, repoName string, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "repo_name", runtime.ParamLocationPath, repoName)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/export/%s-issues-%s.zip", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesImportRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesImport
func NewGetRepositoriesWorkspaceRepoSlugIssuesImportRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/import", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesImportRequest generates requests for PostRepositoriesWorkspaceRepoSlugIssuesImport
func NewPostRepositoriesWorkspaceRepoSlugIssuesImportRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/import", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugIssuesIssueId
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueId
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest generates requests for PutRepositoriesWorkspaceRepoSlugIssuesIssueId
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest generates requests for PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest(server string, workspace string, repoSlug string, issueId string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/attachments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathRequest(server string, workspace string, repoSlug string, issueId string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/attachments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest(server string, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/changes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest calls the generic PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequest(server string, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequestWithBody(server, workspace, repoSlug, issueId, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges with any type of body
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesRequestWithBody(server string, workspace string, repoSlug string, issueId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/changes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdRequest(server string, workspace string, repoSlug string, issueId string, changeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "change_id", runtime.ParamLocationPath, changeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/changes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest(server string, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest calls the generic PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequest(server string, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequestWithBody(server, workspace, repoSlug, issueId, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments with any type of body
func NewPostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsRequestWithBody(server string, workspace string, repoSlug string, issueId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, issueId string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, issueId string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, issueId string, commentId int, body PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequestWithBody(server, workspace, repoSlug, issueId, commentId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdRequestWithBody(server string, workspace string, repoSlug string, issueId string, commentId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/vote", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVote
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/vote", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest generates requests for PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVote
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/vote", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch
func NewDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/watch", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest generates requests for GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch
func NewGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/watch", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest generates requests for PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch
func NewPutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchRequest(server string, workspace string, repoSlug string, issueId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "issue_id", runtime.ParamLocationPath, issueId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/issues/%s/watch", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecRequest generates requests for GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec
func NewGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecRequest(server string, workspace string, repoSlug string, revspec string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revspec", runtime.ParamLocationPath, revspec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/merge-base/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugMilestonesRequest generates requests for GetRepositoriesWorkspaceRepoSlugMilestones
func NewGetRepositoriesWorkspaceRepoSlugMilestonesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/milestones", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneId
func NewGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdRequest(server string, workspace string, repoSlug string, milestoneId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "milestone_id", runtime.ParamLocationPath, milestoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/milestones/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest generates requests for GetRepositoriesWorkspaceRepoSlugOverrideSettings
func NewGetRepositoriesWorkspaceRepoSlugOverrideSettingsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/override-settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest generates requests for PutRepositoriesWorkspaceRepoSlugOverrideSettings
func NewPutRepositoriesWorkspaceRepoSlugOverrideSettingsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/override-settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPatchSpecRequest generates requests for GetRepositoriesWorkspaceRepoSlugPatchSpec
func NewGetRepositoriesWorkspaceRepoSlugPatchSpecRequest(server string, workspace string, repoSlug string, spec string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "spec", runtime.ParamLocationPath, spec)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/patch/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest generates requests for GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups
func NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug
func NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, repoSlug string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest generates requests for GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug
func NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, repoSlug string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest calls the generic PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, repoSlug string, groupSlug string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequestWithBody(server, workspace, repoSlug, groupSlug, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug with any type of body
func NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugRequestWithBody(server string, workspace string, repoSlug string, groupSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest generates requests for GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers
func NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId
func NewDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, repoSlug string, selectedUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId
func NewGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, repoSlug string, selectedUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, repoSlug string, selectedUserId string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequestWithBody(server, workspace, repoSlug, selectedUserId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdRequestWithBody(server string, workspace string, repoSlug string, selectedUserId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPipelinesForRepositoryRequest generates requests for GetPipelinesForRepository
func NewGetPipelinesForRepositoryRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineForRepositoryRequest calls the generic CreatePipelineForRepository builder with application/json body
func NewCreatePipelineForRepositoryRequest(server string, workspace string, repoSlug string, body CreatePipelineForRepositoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineForRepositoryRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewCreatePipelineForRepositoryRequestWithBody generates requests for CreatePipelineForRepository with any type of body
func NewCreatePipelineForRepositoryRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoryPipelineCachesRequest generates requests for DeleteRepositoryPipelineCaches
func NewDeleteRepositoryPipelineCachesRequest(server string, workspace string, repoSlug string, params *DeleteRepositoryPipelineCachesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines-config/caches", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineCachesRequest generates requests for GetRepositoryPipelineCaches
func NewGetRepositoryPipelineCachesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines-config/caches", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoryPipelineCacheRequest generates requests for DeleteRepositoryPipelineCache
func NewDeleteRepositoryPipelineCacheRequest(server string, workspace string, repoSlug string, cacheUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cache_uuid", runtime.ParamLocationPath, cacheUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines-config/caches/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineCacheContentURIRequest generates requests for GetRepositoryPipelineCacheContentURI
func NewGetRepositoryPipelineCacheContentURIRequest(server string, workspace string, repoSlug string, cacheUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "cache_uuid", runtime.ParamLocationPath, cacheUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines-config/caches/%s/content-uri", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineForRepositoryRequest generates requests for GetPipelineForRepository
func NewGetPipelineForRepositoryRequest(server string, workspace string, repoSlug string, pipelineUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineStepsForRepositoryRequest generates requests for GetPipelineStepsForRepository
func NewGetPipelineStepsForRepositoryRequest(server string, workspace string, repoSlug string, pipelineUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineStepForRepositoryRequest generates requests for GetPipelineStepForRepository
func NewGetPipelineStepForRepositoryRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineStepLogForRepositoryRequest generates requests for GetPipelineStepLogForRepository
func NewGetPipelineStepLogForRepositoryRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s/log", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineContainerLogRequest generates requests for GetPipelineContainerLog
func NewGetPipelineContainerLogRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string, logUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "log_uuid", runtime.ParamLocationPath, logUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s/logs/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineTestReportsRequest generates requests for GetPipelineTestReports
func NewGetPipelineTestReportsRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s/test_reports", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineTestReportTestCasesRequest generates requests for GetPipelineTestReportTestCases
func NewGetPipelineTestReportTestCasesRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s/test_reports/test_cases", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineTestReportTestCaseReasonsRequest generates requests for GetPipelineTestReportTestCaseReasons
func NewGetPipelineTestReportTestCaseReasonsRequest(server string, workspace string, repoSlug string, pipelineUuid string, stepUuid string, testCaseUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "step_uuid", runtime.ParamLocationPath, stepUuid)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "test_case_uuid", runtime.ParamLocationPath, testCaseUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/steps/%s/test_reports/test_cases/%s/test_case_reasons", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStopPipelineRequest generates requests for StopPipeline
func NewStopPipelineRequest(server string, workspace string, repoSlug string, pipelineUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pipeline_uuid", runtime.ParamLocationPath, pipelineUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines/%s/stopPipeline", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineConfigRequest generates requests for GetRepositoryPipelineConfig
func NewGetRepositoryPipelineConfigRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryPipelineConfigRequest calls the generic UpdateRepositoryPipelineConfig builder with application/json body
func NewUpdateRepositoryPipelineConfigRequest(server string, workspace string, repoSlug string, body UpdateRepositoryPipelineConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryPipelineConfigRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewUpdateRepositoryPipelineConfigRequestWithBody generates requests for UpdateRepositoryPipelineConfig with any type of body
func NewUpdateRepositoryPipelineConfigRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateRepositoryBuildNumberRequest calls the generic UpdateRepositoryBuildNumber builder with application/json body
func NewUpdateRepositoryBuildNumberRequest(server string, workspace string, repoSlug string, body UpdateRepositoryBuildNumberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryBuildNumberRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewUpdateRepositoryBuildNumberRequestWithBody generates requests for UpdateRepositoryBuildNumber with any type of body
func NewUpdateRepositoryBuildNumberRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/build_number", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoryPipelineSchedulesRequest generates requests for GetRepositoryPipelineSchedules
func NewGetRepositoryPipelineSchedulesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRepositoryPipelineScheduleRequest calls the generic CreateRepositoryPipelineSchedule builder with application/json body
func NewCreateRepositoryPipelineScheduleRequest(server string, workspace string, repoSlug string, body CreateRepositoryPipelineScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRepositoryPipelineScheduleRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewCreateRepositoryPipelineScheduleRequestWithBody generates requests for CreateRepositoryPipelineSchedule with any type of body
func NewCreateRepositoryPipelineScheduleRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoryPipelineScheduleRequest generates requests for DeleteRepositoryPipelineSchedule
func NewDeleteRepositoryPipelineScheduleRequest(server string, workspace string, repoSlug string, scheduleUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schedule_uuid", runtime.ParamLocationPath, scheduleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineScheduleRequest generates requests for GetRepositoryPipelineSchedule
func NewGetRepositoryPipelineScheduleRequest(server string, workspace string, repoSlug string, scheduleUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schedule_uuid", runtime.ParamLocationPath, scheduleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryPipelineScheduleRequest calls the generic UpdateRepositoryPipelineSchedule builder with application/json body
func NewUpdateRepositoryPipelineScheduleRequest(server string, workspace string, repoSlug string, scheduleUuid string, body UpdateRepositoryPipelineScheduleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryPipelineScheduleRequestWithBody(server, workspace, repoSlug, scheduleUuid, "application/json", bodyReader)
}

// NewUpdateRepositoryPipelineScheduleRequestWithBody generates requests for UpdateRepositoryPipelineSchedule with any type of body
func NewUpdateRepositoryPipelineScheduleRequestWithBody(server string, workspace string, repoSlug string, scheduleUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schedule_uuid", runtime.ParamLocationPath, scheduleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoryPipelineScheduleExecutionsRequest generates requests for GetRepositoryPipelineScheduleExecutions
func NewGetRepositoryPipelineScheduleExecutionsRequest(server string, workspace string, repoSlug string, scheduleUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "schedule_uuid", runtime.ParamLocationPath, scheduleUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/schedules/%s/executions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoryPipelineKeyPairRequest generates requests for DeleteRepositoryPipelineKeyPair
func NewDeleteRepositoryPipelineKeyPairRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/key_pair", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineSshKeyPairRequest generates requests for GetRepositoryPipelineSshKeyPair
func NewGetRepositoryPipelineSshKeyPairRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/key_pair", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryPipelineKeyPairRequest calls the generic UpdateRepositoryPipelineKeyPair builder with application/json body
func NewUpdateRepositoryPipelineKeyPairRequest(server string, workspace string, repoSlug string, body UpdateRepositoryPipelineKeyPairJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryPipelineKeyPairRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewUpdateRepositoryPipelineKeyPairRequestWithBody generates requests for UpdateRepositoryPipelineKeyPair with any type of body
func NewUpdateRepositoryPipelineKeyPairRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/key_pair", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoryPipelineKnownHostsRequest generates requests for GetRepositoryPipelineKnownHosts
func NewGetRepositoryPipelineKnownHostsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/known_hosts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRepositoryPipelineKnownHostRequest calls the generic CreateRepositoryPipelineKnownHost builder with application/json body
func NewCreateRepositoryPipelineKnownHostRequest(server string, workspace string, repoSlug string, body CreateRepositoryPipelineKnownHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRepositoryPipelineKnownHostRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewCreateRepositoryPipelineKnownHostRequestWithBody generates requests for CreateRepositoryPipelineKnownHost with any type of body
func NewCreateRepositoryPipelineKnownHostRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/known_hosts", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoryPipelineKnownHostRequest generates requests for DeleteRepositoryPipelineKnownHost
func NewDeleteRepositoryPipelineKnownHostRequest(server string, workspace string, repoSlug string, knownHostUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "known_host_uuid", runtime.ParamLocationPath, knownHostUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/known_hosts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineKnownHostRequest generates requests for GetRepositoryPipelineKnownHost
func NewGetRepositoryPipelineKnownHostRequest(server string, workspace string, repoSlug string, knownHostUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "known_host_uuid", runtime.ParamLocationPath, knownHostUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/known_hosts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryPipelineKnownHostRequest calls the generic UpdateRepositoryPipelineKnownHost builder with application/json body
func NewUpdateRepositoryPipelineKnownHostRequest(server string, workspace string, repoSlug string, knownHostUuid string, body UpdateRepositoryPipelineKnownHostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryPipelineKnownHostRequestWithBody(server, workspace, repoSlug, knownHostUuid, "application/json", bodyReader)
}

// NewUpdateRepositoryPipelineKnownHostRequestWithBody generates requests for UpdateRepositoryPipelineKnownHost with any type of body
func NewUpdateRepositoryPipelineKnownHostRequestWithBody(server string, workspace string, repoSlug string, knownHostUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "known_host_uuid", runtime.ParamLocationPath, knownHostUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/ssh/known_hosts/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoryPipelineVariablesRequest generates requests for GetRepositoryPipelineVariables
func NewGetRepositoryPipelineVariablesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/variables", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRepositoryPipelineVariableRequest calls the generic CreateRepositoryPipelineVariable builder with application/json body
func NewCreateRepositoryPipelineVariableRequest(server string, workspace string, repoSlug string, body CreateRepositoryPipelineVariableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRepositoryPipelineVariableRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewCreateRepositoryPipelineVariableRequestWithBody generates requests for CreateRepositoryPipelineVariable with any type of body
func NewCreateRepositoryPipelineVariableRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/variables", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoryPipelineVariableRequest generates requests for DeleteRepositoryPipelineVariable
func NewDeleteRepositoryPipelineVariableRequest(server string, workspace string, repoSlug string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/variables/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryPipelineVariableRequest generates requests for GetRepositoryPipelineVariable
func NewGetRepositoryPipelineVariableRequest(server string, workspace string, repoSlug string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/variables/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryPipelineVariableRequest calls the generic UpdateRepositoryPipelineVariable builder with application/json body
func NewUpdateRepositoryPipelineVariableRequest(server string, workspace string, repoSlug string, variableUuid string, body UpdateRepositoryPipelineVariableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryPipelineVariableRequestWithBody(server, workspace, repoSlug, variableUuid, "application/json", bodyReader)
}

// NewUpdateRepositoryPipelineVariableRequestWithBody generates requests for UpdateRepositoryPipelineVariable with any type of body
func NewUpdateRepositoryPipelineVariableRequestWithBody(server string, workspace string, repoSlug string, variableUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pipelines_config/variables/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoryHostedPropertyValueRequest generates requests for DeleteRepositoryHostedPropertyValue
func NewDeleteRepositoryHostedPropertyValueRequest(server string, workspace string, repoSlug string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoryHostedPropertyValueRequest generates requests for GetRepositoryHostedPropertyValue
func NewGetRepositoryHostedPropertyValueRequest(server string, workspace string, repoSlug string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRepositoryHostedPropertyValueRequest calls the generic UpdateRepositoryHostedPropertyValue builder with application/json body
func NewUpdateRepositoryHostedPropertyValueRequest(server string, workspace string, repoSlug string, appKey string, propertyName string, body UpdateRepositoryHostedPropertyValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRepositoryHostedPropertyValueRequestWithBody(server, workspace, repoSlug, appKey, propertyName, "application/json", bodyReader)
}

// NewUpdateRepositoryHostedPropertyValueRequestWithBody generates requests for UpdateRepositoryHostedPropertyValue with any type of body
func NewUpdateRepositoryHostedPropertyValueRequestWithBody(server string, workspace string, repoSlug string, appKey string, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequests
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequest calls the generic PostRepositoriesWorkspaceRepoSlugPullrequests builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugPullrequests with any type of body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsActivity
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsActivityRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/activity", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequest(server string, workspace string, repoSlug string, pullRequestId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestWithBody(server, workspace, repoSlug, pullRequestId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivity
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/activity", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/approve", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/approve", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest calls the generic PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequest(server string, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequestWithBody(server, workspace, repoSlug, pullRequestId, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments with any type of body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, pullRequestId int, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, pullRequestId int, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequest(server string, workspace string, repoSlug string, pullRequestId int, commentId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequestWithBody(server, workspace, repoSlug, pullRequestId, commentId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, commentId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest(server string, workspace string, repoSlug string, pullRequestId int, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments/%s/resolve", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveRequest(server string, workspace string, repoSlug string, pullRequestId int, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/comments/%s/resolve", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommits
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/commits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineRequest generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDecline
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/decline", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiff
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/diff", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstat
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/diffstat", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequest calls the generic PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequest(server string, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequestWithBody(server, workspace, repoSlug, pullRequestId, params, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge with any type of body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/merge", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Async != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "async", runtime.ParamLocationQuery, *params.Async); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskId
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdRequest(server string, workspace string, repoSlug string, pullRequestId int, taskId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/merge/task-status/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatch
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/patch", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/request-changes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesRequest(server string, workspace string, repoSlug string, pullRequestId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/request-changes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesRequest(server string, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/statuses", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest(server string, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/tasks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pagelen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagelen", runtime.ParamLocationQuery, *params.Pagelen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest calls the generic PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequest(server string, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequestWithBody(server, workspace, repoSlug, pullRequestId, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks with any type of body
func NewPostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/tasks", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId
func NewDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(server string, workspace string, repoSlug string, pullRequestId int, taskId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/tasks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId
func NewGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(server string, workspace string, repoSlug string, pullRequestId int, taskId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/tasks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest calls the generic PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId builder with application/json body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequest(server string, workspace string, repoSlug string, pullRequestId int, taskId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequestWithBody(server, workspace, repoSlug, pullRequestId, taskId, "application/json", bodyReader)
}

// NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequestWithBody generates requests for PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId with any type of body
func NewPutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdRequestWithBody(server string, workspace string, repoSlug string, pullRequestId int, taskId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pull_request_id", runtime.ParamLocationPath, pullRequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "task_id", runtime.ParamLocationPath, taskId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/tasks/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePullRequestHostedPropertyValueRequest generates requests for DeletePullRequestHostedPropertyValue
func NewDeletePullRequestHostedPropertyValueRequest(server string, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pullrequest_id", runtime.ParamLocationPath, pullrequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPullRequestHostedPropertyValueRequest generates requests for GetPullRequestHostedPropertyValue
func NewGetPullRequestHostedPropertyValueRequest(server string, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pullrequest_id", runtime.ParamLocationPath, pullrequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePullRequestHostedPropertyValueRequest calls the generic UpdatePullRequestHostedPropertyValue builder with application/json body
func NewUpdatePullRequestHostedPropertyValueRequest(server string, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, body UpdatePullRequestHostedPropertyValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePullRequestHostedPropertyValueRequestWithBody(server, workspace, repoSlug, pullrequestId, appKey, propertyName, "application/json", bodyReader)
}

// NewUpdatePullRequestHostedPropertyValueRequestWithBody generates requests for UpdatePullRequestHostedPropertyValue with any type of body
func NewUpdatePullRequestHostedPropertyValueRequestWithBody(server string, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "pullrequest_id", runtime.ParamLocationPath, pullrequestId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam4 string

	pathParam4, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/pullrequests/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3, pathParam4)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsRequest generates requests for GetRepositoriesWorkspaceRepoSlugRefs
func NewGetRepositoriesWorkspaceRepoSlugRefsRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesRequest generates requests for GetRepositoriesWorkspaceRepoSlugRefsBranches
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/branches", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugRefsBranchesRequest generates requests for PostRepositoriesWorkspaceRepoSlugRefsBranches
func NewPostRepositoriesWorkspaceRepoSlugRefsBranchesRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/branches", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName
func NewDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest(server string, workspace string, repoSlug string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/branches/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest generates requests for GetRepositoriesWorkspaceRepoSlugRefsBranchesName
func NewGetRepositoriesWorkspaceRepoSlugRefsBranchesNameRequest(server string, workspace string, repoSlug string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/branches/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsTagsRequest generates requests for GetRepositoriesWorkspaceRepoSlugRefsTags
func NewGetRepositoriesWorkspaceRepoSlugRefsTagsRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsTagsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/tags", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequest calls the generic PostRepositoriesWorkspaceRepoSlugRefsTags builder with application/json body
func NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequest(server string, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequestWithBody(server, workspace, repoSlug, "application/json", bodyReader)
}

// NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequestWithBody generates requests for PostRepositoriesWorkspaceRepoSlugRefsTags with any type of body
func NewPostRepositoriesWorkspaceRepoSlugRefsTagsRequestWithBody(server string, workspace string, repoSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/tags", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameRequest generates requests for DeleteRepositoriesWorkspaceRepoSlugRefsTagsName
func NewDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameRequest(server string, workspace string, repoSlug string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/tags/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameRequest generates requests for GetRepositoriesWorkspaceRepoSlugRefsTagsName
func NewGetRepositoriesWorkspaceRepoSlugRefsTagsNameRequest(server string, workspace string, repoSlug string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/refs/tags/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugSrcRequest generates requests for GetRepositoriesWorkspaceRepoSlugSrc
func NewGetRepositoriesWorkspaceRepoSlugSrcRequest(server string, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugSrcParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/src", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRepositoriesWorkspaceRepoSlugSrcRequest generates requests for PostRepositoriesWorkspaceRepoSlugSrc
func NewPostRepositoriesWorkspaceRepoSlugSrcRequest(server string, workspace string, repoSlug string, params *PostRepositoriesWorkspaceRepoSlugSrcParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/src", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Message != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message", runtime.ParamLocationQuery, *params.Message); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Author != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "author", runtime.ParamLocationQuery, *params.Author); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parents != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parents", runtime.ParamLocationQuery, *params.Parents); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Files != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "files", runtime.ParamLocationQuery, *params.Files); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Branch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "branch", runtime.ParamLocationQuery, *params.Branch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest generates requests for GetRepositoriesWorkspaceRepoSlugSrcCommitPath
func NewGetRepositoriesWorkspaceRepoSlugSrcCommitPathRequest(server string, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "commit", runtime.ParamLocationPath, commit)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/src/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Format != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "format", runtime.ParamLocationQuery, *params.Format); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MaxDepth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "max_depth", runtime.ParamLocationQuery, *params.MaxDepth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugVersionsRequest generates requests for GetRepositoriesWorkspaceRepoSlugVersions
func NewGetRepositoriesWorkspaceRepoSlugVersionsRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/versions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugVersionsVersionIdRequest generates requests for GetRepositoriesWorkspaceRepoSlugVersionsVersionId
func NewGetRepositoriesWorkspaceRepoSlugVersionsVersionIdRequest(server string, workspace string, repoSlug string, versionId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "version_id", runtime.ParamLocationPath, versionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/versions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRepositoriesWorkspaceRepoSlugWatchersRequest generates requests for GetRepositoriesWorkspaceRepoSlugWatchers
func NewGetRepositoriesWorkspaceRepoSlugWatchersRequest(server string, workspace string, repoSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/repositories/%s/%s/watchers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsRequest generates requests for GetSnippets
func NewGetSnippetsRequest(server string, params *GetSnippetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSnippetsRequest calls the generic PostSnippets builder with application/json body
func NewPostSnippetsRequest(server string, body PostSnippetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSnippetsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSnippetsRequestWithBody generates requests for PostSnippets with any type of body
func NewPostSnippetsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnippetsWorkspaceRequest generates requests for GetSnippetsWorkspace
func NewGetSnippetsWorkspaceRequest(server string, workspace string, params *GetSnippetsWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSnippetsWorkspaceRequest calls the generic PostSnippetsWorkspace builder with application/json body
func NewPostSnippetsWorkspaceRequest(server string, workspace string, body PostSnippetsWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSnippetsWorkspaceRequestWithBody(server, workspace, "application/json", bodyReader)
}

// NewPostSnippetsWorkspaceRequestWithBody generates requests for PostSnippetsWorkspace with any type of body
func NewPostSnippetsWorkspaceRequestWithBody(server string, workspace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnippetsWorkspaceEncodedIdRequest generates requests for DeleteSnippetsWorkspaceEncodedId
func NewDeleteSnippetsWorkspaceEncodedIdRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdRequest generates requests for GetSnippetsWorkspaceEncodedId
func NewGetSnippetsWorkspaceEncodedIdRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnippetsWorkspaceEncodedIdRequest generates requests for PutSnippetsWorkspaceEncodedId
func NewPutSnippetsWorkspaceEncodedIdRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdCommentsRequest generates requests for GetSnippetsWorkspaceEncodedIdComments
func NewGetSnippetsWorkspaceEncodedIdCommentsRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/comments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSnippetsWorkspaceEncodedIdCommentsRequest calls the generic PostSnippetsWorkspaceEncodedIdComments builder with application/json body
func NewPostSnippetsWorkspaceEncodedIdCommentsRequest(server string, workspace string, encodedId string, body PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSnippetsWorkspaceEncodedIdCommentsRequestWithBody(server, workspace, encodedId, "application/json", bodyReader)
}

// NewPostSnippetsWorkspaceEncodedIdCommentsRequestWithBody generates requests for PostSnippetsWorkspaceEncodedIdComments with any type of body
func NewPostSnippetsWorkspaceEncodedIdCommentsRequestWithBody(server string, workspace string, encodedId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/comments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdRequest generates requests for DeleteSnippetsWorkspaceEncodedIdCommentsCommentId
func NewDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(server string, workspace string, encodedId string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/comments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdCommentsCommentIdRequest generates requests for GetSnippetsWorkspaceEncodedIdCommentsCommentId
func NewGetSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(server string, workspace string, encodedId string, commentId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/comments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequest calls the generic PutSnippetsWorkspaceEncodedIdCommentsCommentId builder with application/json body
func NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequest(server string, workspace string, encodedId string, commentId int, body PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequestWithBody(server, workspace, encodedId, commentId, "application/json", bodyReader)
}

// NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequestWithBody generates requests for PutSnippetsWorkspaceEncodedIdCommentsCommentId with any type of body
func NewPutSnippetsWorkspaceEncodedIdCommentsCommentIdRequestWithBody(server string, workspace string, encodedId string, commentId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "comment_id", runtime.ParamLocationPath, commentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/comments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdCommitsRequest generates requests for GetSnippetsWorkspaceEncodedIdCommits
func NewGetSnippetsWorkspaceEncodedIdCommitsRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/commits", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdCommitsRevisionRequest generates requests for GetSnippetsWorkspaceEncodedIdCommitsRevision
func NewGetSnippetsWorkspaceEncodedIdCommitsRevisionRequest(server string, workspace string, encodedId string, revision string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationPath, revision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/commits/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdFilesPathRequest generates requests for GetSnippetsWorkspaceEncodedIdFilesPath
func NewGetSnippetsWorkspaceEncodedIdFilesPathRequest(server string, workspace string, encodedId string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/files/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSnippetsWorkspaceEncodedIdWatchRequest generates requests for DeleteSnippetsWorkspaceEncodedIdWatch
func NewDeleteSnippetsWorkspaceEncodedIdWatchRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/watch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdWatchRequest generates requests for GetSnippetsWorkspaceEncodedIdWatch
func NewGetSnippetsWorkspaceEncodedIdWatchRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/watch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnippetsWorkspaceEncodedIdWatchRequest generates requests for PutSnippetsWorkspaceEncodedIdWatch
func NewPutSnippetsWorkspaceEncodedIdWatchRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/watch", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdWatchersRequest generates requests for GetSnippetsWorkspaceEncodedIdWatchers
func NewGetSnippetsWorkspaceEncodedIdWatchersRequest(server string, workspace string, encodedId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/watchers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSnippetsWorkspaceEncodedIdNodeIdRequest generates requests for DeleteSnippetsWorkspaceEncodedIdNodeId
func NewDeleteSnippetsWorkspaceEncodedIdNodeIdRequest(server string, workspace string, encodedId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdNodeIdRequest generates requests for GetSnippetsWorkspaceEncodedIdNodeId
func NewGetSnippetsWorkspaceEncodedIdNodeIdRequest(server string, workspace string, encodedId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutSnippetsWorkspaceEncodedIdNodeIdRequest generates requests for PutSnippetsWorkspaceEncodedIdNodeId
func NewPutSnippetsWorkspaceEncodedIdNodeIdRequest(server string, workspace string, encodedId string, nodeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdNodeIdFilesPathRequest generates requests for GetSnippetsWorkspaceEncodedIdNodeIdFilesPath
func NewGetSnippetsWorkspaceEncodedIdNodeIdFilesPathRequest(server string, workspace string, encodedId string, nodeId string, path string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "node_id", runtime.ParamLocationPath, nodeId)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s/files/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdRevisionDiffRequest generates requests for GetSnippetsWorkspaceEncodedIdRevisionDiff
func NewGetSnippetsWorkspaceEncodedIdRevisionDiffRequest(server string, workspace string, encodedId string, revision string, params *GetSnippetsWorkspaceEncodedIdRevisionDiffParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationPath, revision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s/diff", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetsWorkspaceEncodedIdRevisionPatchRequest generates requests for GetSnippetsWorkspaceEncodedIdRevisionPatch
func NewGetSnippetsWorkspaceEncodedIdRevisionPatchRequest(server string, workspace string, encodedId string, revision string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "encoded_id", runtime.ParamLocationPath, encodedId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "revision", runtime.ParamLocationPath, revision)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/snippets/%s/%s/%s/patch", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariablesForTeamRequest generates requests for GetPipelineVariablesForTeam
func NewGetPipelineVariablesForTeamRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/pipelines_config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineVariableForTeamRequest calls the generic CreatePipelineVariableForTeam builder with application/json body
func NewCreatePipelineVariableForTeamRequest(server string, username string, body CreatePipelineVariableForTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineVariableForTeamRequestWithBody(server, username, "application/json", bodyReader)
}

// NewCreatePipelineVariableForTeamRequestWithBody generates requests for CreatePipelineVariableForTeam with any type of body
func NewCreatePipelineVariableForTeamRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/pipelines_config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineVariableForTeamRequest generates requests for DeletePipelineVariableForTeam
func NewDeletePipelineVariableForTeamRequest(server string, username string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariableForTeamRequest generates requests for GetPipelineVariableForTeam
func NewGetPipelineVariableForTeamRequest(server string, username string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineVariableForTeamRequest calls the generic UpdatePipelineVariableForTeam builder with application/json body
func NewUpdatePipelineVariableForTeamRequest(server string, username string, variableUuid string, body UpdatePipelineVariableForTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePipelineVariableForTeamRequestWithBody(server, username, variableUuid, "application/json", bodyReader)
}

// NewUpdatePipelineVariableForTeamRequestWithBody generates requests for UpdatePipelineVariableForTeam with any type of body
func NewUpdatePipelineVariableForTeamRequestWithBody(server string, username string, variableUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchTeamRequest generates requests for SearchTeam
func NewSearchTeamRequest(server string, username string, params *SearchTeamParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/teams/%s/search/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_query", runtime.ParamLocationQuery, params.SearchQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pagelen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagelen", runtime.ParamLocationQuery, *params.Pagelen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserEmailsRequest generates requests for GetUserEmails
func NewGetUserEmailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/emails")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserEmailsEmailRequest generates requests for GetUserEmailsEmail
func NewGetUserEmailsEmailRequest(server string, email string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/emails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPermissionsRepositoriesRequest generates requests for GetUserPermissionsRepositories
func NewGetUserPermissionsRepositoriesRequest(server string, params *GetUserPermissionsRepositoriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/permissions/repositories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPermissionsWorkspacesRequest generates requests for GetUserPermissionsWorkspaces
func NewGetUserPermissionsWorkspacesRequest(server string, params *GetUserPermissionsWorkspacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/permissions/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersSelectedUserRequest generates requests for GetUsersSelectedUser
func NewGetUsersSelectedUserRequest(server string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariablesForUserRequest generates requests for GetPipelineVariablesForUser
func NewGetPipelineVariablesForUserRequest(server string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/pipelines_config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineVariableForUserRequest calls the generic CreatePipelineVariableForUser builder with application/json body
func NewCreatePipelineVariableForUserRequest(server string, selectedUser string, body CreatePipelineVariableForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineVariableForUserRequestWithBody(server, selectedUser, "application/json", bodyReader)
}

// NewCreatePipelineVariableForUserRequestWithBody generates requests for CreatePipelineVariableForUser with any type of body
func NewCreatePipelineVariableForUserRequestWithBody(server string, selectedUser string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/pipelines_config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineVariableForUserRequest generates requests for DeletePipelineVariableForUser
func NewDeletePipelineVariableForUserRequest(server string, selectedUser string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariableForUserRequest generates requests for GetPipelineVariableForUser
func NewGetPipelineVariableForUserRequest(server string, selectedUser string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineVariableForUserRequest calls the generic UpdatePipelineVariableForUser builder with application/json body
func NewUpdatePipelineVariableForUserRequest(server string, selectedUser string, variableUuid string, body UpdatePipelineVariableForUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePipelineVariableForUserRequestWithBody(server, selectedUser, variableUuid, "application/json", bodyReader)
}

// NewUpdatePipelineVariableForUserRequestWithBody generates requests for UpdatePipelineVariableForUser with any type of body
func NewUpdatePipelineVariableForUserRequestWithBody(server string, selectedUser string, variableUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/pipelines_config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserHostedPropertyValueRequest generates requests for DeleteUserHostedPropertyValue
func NewDeleteUserHostedPropertyValueRequest(server string, selectedUser string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetrieveUserHostedPropertyValueRequest generates requests for RetrieveUserHostedPropertyValue
func NewRetrieveUserHostedPropertyValueRequest(server string, selectedUser string, appKey string, propertyName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserHostedPropertyValueRequest calls the generic UpdateUserHostedPropertyValue builder with application/json body
func NewUpdateUserHostedPropertyValueRequest(server string, selectedUser string, appKey string, propertyName string, body UpdateUserHostedPropertyValueJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserHostedPropertyValueRequestWithBody(server, selectedUser, appKey, propertyName, "application/json", bodyReader)
}

// NewUpdateUserHostedPropertyValueRequestWithBody generates requests for UpdateUserHostedPropertyValue with any type of body
func NewUpdateUserHostedPropertyValueRequestWithBody(server string, selectedUser string, appKey string, propertyName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "app_key", runtime.ParamLocationPath, appKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "property_name", runtime.ParamLocationPath, propertyName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/properties/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchAccountRequest generates requests for SearchAccount
func NewSearchAccountRequest(server string, selectedUser string, params *SearchAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/search/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_query", runtime.ParamLocationQuery, params.SearchQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pagelen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagelen", runtime.ParamLocationQuery, *params.Pagelen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersSelectedUserSshKeysRequest generates requests for GetUsersSelectedUserSshKeys
func NewGetUsersSelectedUserSshKeysRequest(server string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/ssh-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersSelectedUserSshKeysRequest calls the generic PostUsersSelectedUserSshKeys builder with application/json body
func NewPostUsersSelectedUserSshKeysRequest(server string, selectedUser string, body PostUsersSelectedUserSshKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersSelectedUserSshKeysRequestWithBody(server, selectedUser, "application/json", bodyReader)
}

// NewPostUsersSelectedUserSshKeysRequestWithBody generates requests for PostUsersSelectedUserSshKeys with any type of body
func NewPostUsersSelectedUserSshKeysRequestWithBody(server string, selectedUser string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/ssh-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersSelectedUserSshKeysKeyIdRequest generates requests for DeleteUsersSelectedUserSshKeysKeyId
func NewDeleteUsersSelectedUserSshKeysKeyIdRequest(server string, selectedUser string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/ssh-keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersSelectedUserSshKeysKeyIdRequest generates requests for GetUsersSelectedUserSshKeysKeyId
func NewGetUsersSelectedUserSshKeysKeyIdRequest(server string, selectedUser string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/ssh-keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutUsersSelectedUserSshKeysKeyIdRequest calls the generic PutUsersSelectedUserSshKeysKeyId builder with application/json body
func NewPutUsersSelectedUserSshKeysKeyIdRequest(server string, selectedUser string, keyId string, body PutUsersSelectedUserSshKeysKeyIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutUsersSelectedUserSshKeysKeyIdRequestWithBody(server, selectedUser, keyId, "application/json", bodyReader)
}

// NewPutUsersSelectedUserSshKeysKeyIdRequestWithBody generates requests for PutUsersSelectedUserSshKeysKeyId with any type of body
func NewPutUsersSelectedUserSshKeysKeyIdRequestWithBody(server string, selectedUser string, keyId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/ssh-keys/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspacesRequest generates requests for GetWorkspaces
func NewGetWorkspacesRequest(server string, params *GetWorkspacesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Role != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceRequest generates requests for GetWorkspacesWorkspace
func NewGetWorkspacesWorkspaceRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceHooksRequest generates requests for GetWorkspacesWorkspaceHooks
func NewGetWorkspacesWorkspaceHooksRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/hooks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkspacesWorkspaceHooksRequest generates requests for PostWorkspacesWorkspaceHooks
func NewPostWorkspacesWorkspaceHooksRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/hooks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspacesWorkspaceHooksUidRequest generates requests for DeleteWorkspacesWorkspaceHooksUid
func NewDeleteWorkspacesWorkspaceHooksUidRequest(server string, workspace string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/hooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceHooksUidRequest generates requests for GetWorkspacesWorkspaceHooksUid
func NewGetWorkspacesWorkspaceHooksUidRequest(server string, workspace string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/hooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceHooksUidRequest generates requests for PutWorkspacesWorkspaceHooksUid
func NewPutWorkspacesWorkspaceHooksUidRequest(server string, workspace string, uid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "uid", runtime.ParamLocationPath, uid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/hooks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceMembersRequest generates requests for GetWorkspacesWorkspaceMembers
func NewGetWorkspacesWorkspaceMembersRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceMembersMemberRequest generates requests for GetWorkspacesWorkspaceMembersMember
func NewGetWorkspacesWorkspaceMembersMemberRequest(server string, workspace string, member string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "member", runtime.ParamLocationPath, member)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspacePermissionsRequest generates requests for GetWorkspacesWorkspacePermissions
func NewGetWorkspacesWorkspacePermissionsRequest(server string, workspace string, params *GetWorkspacesWorkspacePermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspacePermissionsRepositoriesRequest generates requests for GetWorkspacesWorkspacePermissionsRepositories
func NewGetWorkspacesWorkspacePermissionsRepositoriesRequest(server string, workspace string, params *GetWorkspacesWorkspacePermissionsRepositoriesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/permissions/repositories", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest generates requests for GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug
func NewGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugRequest(server string, workspace string, repoSlug string, params *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "repo_slug", runtime.ParamLocationPath, repoSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/permissions/repositories/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOIDCConfigurationRequest generates requests for GetOIDCConfiguration
func NewGetOIDCConfigurationRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/identity/oidc/.well-known/openid-configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOIDCKeysRequest generates requests for GetOIDCKeys
func NewGetOIDCKeysRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/identity/oidc/keys.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariablesForWorkspaceRequest generates requests for GetPipelineVariablesForWorkspace
func NewGetPipelineVariablesForWorkspaceRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePipelineVariableForWorkspaceRequest calls the generic CreatePipelineVariableForWorkspace builder with application/json body
func NewCreatePipelineVariableForWorkspaceRequest(server string, workspace string, body CreatePipelineVariableForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePipelineVariableForWorkspaceRequestWithBody(server, workspace, "application/json", bodyReader)
}

// NewCreatePipelineVariableForWorkspaceRequestWithBody generates requests for CreatePipelineVariableForWorkspace with any type of body
func NewCreatePipelineVariableForWorkspaceRequestWithBody(server string, workspace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/variables", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePipelineVariableForWorkspaceRequest generates requests for DeletePipelineVariableForWorkspace
func NewDeletePipelineVariableForWorkspaceRequest(server string, workspace string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPipelineVariableForWorkspaceRequest generates requests for GetPipelineVariableForWorkspace
func NewGetPipelineVariableForWorkspaceRequest(server string, workspace string, variableUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePipelineVariableForWorkspaceRequest calls the generic UpdatePipelineVariableForWorkspace builder with application/json body
func NewUpdatePipelineVariableForWorkspaceRequest(server string, workspace string, variableUuid string, body UpdatePipelineVariableForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePipelineVariableForWorkspaceRequestWithBody(server, workspace, variableUuid, "application/json", bodyReader)
}

// NewUpdatePipelineVariableForWorkspaceRequestWithBody generates requests for UpdatePipelineVariableForWorkspace with any type of body
func NewUpdatePipelineVariableForWorkspaceRequestWithBody(server string, workspace string, variableUuid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "variable_uuid", runtime.ParamLocationPath, variableUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pipelines-config/variables/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsRequest generates requests for GetWorkspacesWorkspaceProjects
func NewGetWorkspacesWorkspaceProjectsRequest(server string, workspace string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkspacesWorkspaceProjectsRequest calls the generic PostWorkspacesWorkspaceProjects builder with application/json body
func NewPostWorkspacesWorkspaceProjectsRequest(server string, workspace string, body PostWorkspacesWorkspaceProjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkspacesWorkspaceProjectsRequestWithBody(server, workspace, "application/json", bodyReader)
}

// NewPostWorkspacesWorkspaceProjectsRequestWithBody generates requests for PostWorkspacesWorkspaceProjects with any type of body
func NewPostWorkspacesWorkspaceProjectsRequestWithBody(server string, workspace string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspacesWorkspaceProjectsProjectKeyRequest generates requests for DeleteWorkspacesWorkspaceProjectsProjectKey
func NewDeleteWorkspacesWorkspaceProjectsProjectKeyRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKey
func NewGetWorkspacesWorkspaceProjectsProjectKeyRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyRequest calls the generic PutWorkspacesWorkspaceProjectsProjectKey builder with application/json body
func NewPutWorkspacesWorkspaceProjectsProjectKeyRequest(server string, workspace string, projectKey string, body PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWorkspacesWorkspaceProjectsProjectKeyRequestWithBody(server, workspace, projectKey, "application/json", bodyReader)
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyRequestWithBody generates requests for PutWorkspacesWorkspaceProjectsProjectKey with any type of body
func NewPutWorkspacesWorkspaceProjectsProjectKeyRequestWithBody(server string, workspace string, projectKey string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyBranchingModel
func NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/branching-model", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings
func NewGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/branching-model/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest generates requests for PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings
func NewPutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/branching-model/settings", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewers
func NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/default-reviewers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest generates requests for DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser
func NewDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(server string, workspace string, projectKey string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser
func NewGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(server string, workspace string, projectKey string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest generates requests for PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser
func NewPutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserRequest(server string, workspace string, projectKey string, selectedUser string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/default-reviewers/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyDeployKeys
func NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/deploy-keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest generates requests for PostWorkspacesWorkspaceProjectsProjectKeyDeployKeys
func NewPostWorkspacesWorkspaceProjectsProjectKeyDeployKeysRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/deploy-keys", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest generates requests for DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId
func NewDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(server string, workspace string, projectKey string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/deploy-keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId
func NewGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdRequest(server string, workspace string, projectKey string, keyId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "key_id", runtime.ParamLocationPath, keyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/deploy-keys/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroups
func NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/groups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest generates requests for DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug
func NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, projectKey string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug
func NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, projectKey string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest calls the generic PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug builder with application/json body
func NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequest(server string, workspace string, projectKey string, groupSlug string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequestWithBody(server, workspace, projectKey, groupSlug, "application/json", bodyReader)
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequestWithBody generates requests for PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug with any type of body
func NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugRequestWithBody(server string, workspace string, projectKey string, groupSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "group_slug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/groups/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsers
func NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersRequest(server string, workspace string, projectKey string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/users", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest generates requests for DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId
func NewDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, projectKey string, selectedUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest generates requests for GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId
func NewGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, projectKey string, selectedUserId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest calls the generic PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId builder with application/json body
func NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequest(server string, workspace string, projectKey string, selectedUserId string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequestWithBody(server, workspace, projectKey, selectedUserId, "application/json", bodyReader)
}

// NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequestWithBody generates requests for PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId with any type of body
func NewPutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdRequestWithBody(server string, workspace string, projectKey string, selectedUserId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "project_key", runtime.ParamLocationPath, projectKey)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "selected_user_id", runtime.ParamLocationPath, selectedUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/projects/%s/permissions-config/users/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspacesWorkspacePullrequestsSelectedUserRequest generates requests for GetWorkspacesWorkspacePullrequestsSelectedUser
func NewGetWorkspacesWorkspacePullrequestsSelectedUserRequest(server string, workspace string, selectedUser string, params *GetWorkspacesWorkspacePullrequestsSelectedUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "selected_user", runtime.ParamLocationPath, selectedUser)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/pullrequests/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchWorkspaceRequest generates requests for SearchWorkspace
func NewSearchWorkspaceRequest(server string, workspace string, params *SearchWorkspaceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workspace", runtime.ParamLocationPath, workspace)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workspaces/%s/search/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_query", runtime.ParamLocationQuery, params.SearchQuery); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pagelen != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pagelen", runtime.ParamLocationQuery, *params.Pagelen); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAddonWithResponse request
	DeleteAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAddonResponse, error)

	// PutAddonWithResponse request
	PutAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutAddonResponse, error)

	// GetAddonLinkersWithResponse request
	GetAddonLinkersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddonLinkersResponse, error)

	// GetAddonLinkersLinkerKeyWithResponse request
	GetAddonLinkersLinkerKeyWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyResponse, error)

	// DeleteAddonLinkersLinkerKeyValuesWithResponse request
	DeleteAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*DeleteAddonLinkersLinkerKeyValuesResponse, error)

	// GetAddonLinkersLinkerKeyValuesWithResponse request
	GetAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyValuesResponse, error)

	// PostAddonLinkersLinkerKeyValuesWithResponse request
	PostAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*PostAddonLinkersLinkerKeyValuesResponse, error)

	// PutAddonLinkersLinkerKeyValuesWithResponse request
	PutAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*PutAddonLinkersLinkerKeyValuesResponse, error)

	// DeleteAddonLinkersLinkerKeyValuesValueIdWithResponse request
	DeleteAddonLinkersLinkerKeyValuesValueIdWithResponse(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*DeleteAddonLinkersLinkerKeyValuesValueIdResponse, error)

	// GetAddonLinkersLinkerKeyValuesValueIdWithResponse request
	GetAddonLinkersLinkerKeyValuesValueIdWithResponse(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyValuesValueIdResponse, error)

	// GetHookEventsWithResponse request
	GetHookEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHookEventsResponse, error)

	// GetHookEventsSubjectTypeWithResponse request
	GetHookEventsSubjectTypeWithResponse(ctx context.Context, subjectType string, reqEditors ...RequestEditorFn) (*GetHookEventsSubjectTypeResponse, error)

	// GetPullrequestsSelectedUserWithResponse request
	GetPullrequestsSelectedUserWithResponse(ctx context.Context, selectedUser string, params *GetPullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*GetPullrequestsSelectedUserResponse, error)

	// GetRepositoriesWithResponse request
	GetRepositoriesWithResponse(ctx context.Context, params *GetRepositoriesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesResponse, error)

	// GetRepositoriesWorkspaceWithResponse request
	GetRepositoriesWorkspaceWithResponse(ctx context.Context, workspace string, params *GetRepositoriesWorkspaceParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoriesWorkspaceRepoSlugParams, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugResponse, error)

	// GetRepositoriesWorkspaceRepoSlugWithResponse request
	GetRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugResponse, error)

	// PostRepositoriesWorkspaceRepoSlugWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugResponse, error)

	PostRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugResponse, error)

	// PutRepositoriesWorkspaceRepoSlugWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugResponse, error)

	PutRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, body PutRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugResponse, error)

	// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse request
	GetRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error)

	PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, body PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugBranchingModelWithResponse request
	GetRepositoriesWorkspaceRepoSlugBranchingModelWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchingModelResponse, error)

	// GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse request
	GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error)

	// PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse request
	PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse request
	PostRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error)

	PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, body PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error)

	// DeleteCommitHostedPropertyValueWithResponse request
	DeleteCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteCommitHostedPropertyValueResponse, error)

	// GetCommitHostedPropertyValueWithResponse request
	GetCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetCommitHostedPropertyValueResponse, error)

	// UpdateCommitHostedPropertyValueWithBodyWithResponse request with any body
	UpdateCommitHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommitHostedPropertyValueResponse, error)

	UpdateCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, body UpdateCommitHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommitHostedPropertyValueResponse, error)

	// GetPullrequestsForCommitWithResponse request
	GetPullrequestsForCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetPullrequestsForCommitParams, reqEditors ...RequestEditorFn) (*GetPullrequestsForCommitResponse, error)

	// GetReportsForCommitWithResponse request
	GetReportsForCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*GetReportsForCommitResponse, error)

	// DeleteReportWithResponse request
	DeleteReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*DeleteReportResponse, error)

	// GetReportWithResponse request
	GetReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*GetReportResponse, error)

	// CreateOrUpdateReportWithBodyWithResponse request with any body
	CreateOrUpdateReportWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateReportResponse, error)

	CreateOrUpdateReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body CreateOrUpdateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateReportResponse, error)

	// GetAnnotationsForReportWithResponse request
	GetAnnotationsForReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*GetAnnotationsForReportResponse, error)

	// BulkCreateOrUpdateAnnotationsWithBodyWithResponse request with any body
	BulkCreateOrUpdateAnnotationsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkCreateOrUpdateAnnotationsResponse, error)

	BulkCreateOrUpdateAnnotationsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body BulkCreateOrUpdateAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkCreateOrUpdateAnnotationsResponse, error)

	// DeleteAnnotationWithResponse request
	DeleteAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*DeleteAnnotationResponse, error)

	// GetAnnotationWithResponse request
	GetAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*GetAnnotationResponse, error)

	// CreateOrUpdateAnnotationWithBodyWithResponse request with any body
	CreateOrUpdateAnnotationWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateAnnotationResponse, error)

	CreateOrUpdateAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, body CreateOrUpdateAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateAnnotationResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse, error)

	PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error)

	// PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error)

	PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, body PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitsWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugCommitsWithResponse request
	PostRepositoriesWorkspaceRepoSlugCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse request
	GetRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error)

	// PostRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse request
	PostRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error)

	// GetRepositoriesWorkspaceRepoSlugComponentsWithResponse request
	GetRepositoriesWorkspaceRepoSlugComponentsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugComponentsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugComponentsComponentIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugComponentsComponentIdWithResponse(ctx context.Context, workspace string, repoSlug string, componentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDefaultReviewersWithResponse request
	GetRepositoriesWorkspaceRepoSlugDefaultReviewersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request
	GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error)

	// PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request
	PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDeployKeysWithResponse request
	GetRepositoriesWorkspaceRepoSlugDeployKeysWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDeployKeysResponse, error)

	// PostRepositoriesWorkspaceRepoSlugDeployKeysWithResponse request
	PostRepositoriesWorkspaceRepoSlugDeployKeysWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugDeployKeysResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request
	PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error)

	// GetDeploymentsForRepositoryWithResponse request
	GetDeploymentsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetDeploymentsForRepositoryResponse, error)

	// GetDeploymentForRepositoryWithResponse request
	GetDeploymentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, deploymentUuid string, reqEditors ...RequestEditorFn) (*GetDeploymentForRepositoryResponse, error)

	// GetDeploymentVariablesWithResponse request
	GetDeploymentVariablesWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*GetDeploymentVariablesResponse, error)

	// CreateDeploymentVariableWithBodyWithResponse request with any body
	CreateDeploymentVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentVariableResponse, error)

	CreateDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, body CreateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentVariableResponse, error)

	// DeleteDeploymentVariableWithResponse request
	DeleteDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, reqEditors ...RequestEditorFn) (*DeleteDeploymentVariableResponse, error)

	// UpdateDeploymentVariableWithBodyWithResponse request with any body
	UpdateDeploymentVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentVariableResponse, error)

	UpdateDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, body UpdateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentVariableResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDiffSpecWithResponse request
	GetRepositoriesWorkspaceRepoSlugDiffSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffSpecParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDiffSpecResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDiffstatSpecWithResponse request
	GetRepositoriesWorkspaceRepoSlugDiffstatSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDownloadsWithResponse request
	GetRepositoriesWorkspaceRepoSlugDownloadsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDownloadsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugDownloadsWithResponse request
	PostRepositoriesWorkspaceRepoSlugDownloadsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugDownloadsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse request
	GetRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelWithResponse request
	GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse, error)

	// GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersWithResponse request
	GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse, error)

	// GetEnvironmentsForRepositoryWithResponse request
	GetEnvironmentsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetEnvironmentsForRepositoryResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentForRepositoryWithResponse request
	DeleteEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentForRepositoryResponse, error)

	// GetEnvironmentForRepositoryWithResponse request
	GetEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*GetEnvironmentForRepositoryResponse, error)

	// UpdateEnvironmentForRepositoryWithResponse request
	UpdateEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*UpdateEnvironmentForRepositoryResponse, error)

	// GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathWithResponse request
	GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse, error)

	// GetRepositoriesWorkspaceRepoSlugForksWithResponse request
	GetRepositoriesWorkspaceRepoSlugForksWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugForksParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugForksResponse, error)

	// PostRepositoriesWorkspaceRepoSlugForksWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugForksWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugForksResponse, error)

	PostRepositoriesWorkspaceRepoSlugForksWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugForksResponse, error)

	// GetRepositoriesWorkspaceRepoSlugHooksWithResponse request
	GetRepositoriesWorkspaceRepoSlugHooksWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugHooksResponse, error)

	// PostRepositoriesWorkspaceRepoSlugHooksWithResponse request
	PostRepositoriesWorkspaceRepoSlugHooksWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugHooksResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugHooksUidWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse, error)

	// GetRepositoriesWorkspaceRepoSlugHooksUidWithResponse request
	GetRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugHooksUidResponse, error)

	// PutRepositoriesWorkspaceRepoSlugHooksUidWithResponse request
	PutRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugHooksUidResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesResponse, error)

	PostRepositoriesWorkspaceRepoSlugIssuesWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesExportWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesExportWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesExportResponse, error)

	PostRepositoriesWorkspaceRepoSlugIssuesExportWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesExportResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipWithResponse(ctx context.Context, workspace string, repoSlug string, repoName string, taskId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesImportWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesImportWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesImportResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesImportWithResponse request
	PostRepositoriesWorkspaceRepoSlugIssuesImportWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesImportResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse request
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error)

	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, changeId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error)

	PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, body PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error)

	// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request
	GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error)

	// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request
	PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error)

	// GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecWithResponse request
	GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecWithResponse(ctx context.Context, workspace string, repoSlug string, revspec string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse, error)

	// GetRepositoriesWorkspaceRepoSlugMilestonesWithResponse request
	GetRepositoriesWorkspaceRepoSlugMilestonesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMilestonesResponse, error)

	// GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdWithResponse(ctx context.Context, workspace string, repoSlug string, milestoneId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse request
	GetRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error)

	// PutRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse request
	PutRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPatchSpecWithResponse request
	GetRepositoriesWorkspaceRepoSlugPatchSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPatchSpecResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsWithResponse request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error)

	// PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error)

	PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersWithResponse request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error)

	// GetPipelinesForRepositoryWithResponse request
	GetPipelinesForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetPipelinesForRepositoryResponse, error)

	// CreatePipelineForRepositoryWithBodyWithResponse request with any body
	CreatePipelineForRepositoryWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineForRepositoryResponse, error)

	CreatePipelineForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, body CreatePipelineForRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineForRepositoryResponse, error)

	// DeleteRepositoryPipelineCachesWithResponse request
	DeleteRepositoryPipelineCachesWithResponse(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoryPipelineCachesParams, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineCachesResponse, error)

	// GetRepositoryPipelineCachesWithResponse request
	GetRepositoryPipelineCachesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineCachesResponse, error)

	// DeleteRepositoryPipelineCacheWithResponse request
	DeleteRepositoryPipelineCacheWithResponse(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineCacheResponse, error)

	// GetRepositoryPipelineCacheContentURIWithResponse request
	GetRepositoryPipelineCacheContentURIWithResponse(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineCacheContentURIResponse, error)

	// GetPipelineForRepositoryWithResponse request
	GetPipelineForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*GetPipelineForRepositoryResponse, error)

	// GetPipelineStepsForRepositoryWithResponse request
	GetPipelineStepsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepsForRepositoryResponse, error)

	// GetPipelineStepForRepositoryWithResponse request
	GetPipelineStepForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepForRepositoryResponse, error)

	// GetPipelineStepLogForRepositoryWithResponse request
	GetPipelineStepLogForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepLogForRepositoryResponse, error)

	// GetPipelineContainerLogWithResponse request
	GetPipelineContainerLogWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, logUuid string, reqEditors ...RequestEditorFn) (*GetPipelineContainerLogResponse, error)

	// GetPipelineTestReportsWithResponse request
	GetPipelineTestReportsWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportsResponse, error)

	// GetPipelineTestReportTestCasesWithResponse request
	GetPipelineTestReportTestCasesWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportTestCasesResponse, error)

	// GetPipelineTestReportTestCaseReasonsWithResponse request
	GetPipelineTestReportTestCaseReasonsWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, testCaseUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportTestCaseReasonsResponse, error)

	// StopPipelineWithResponse request
	StopPipelineWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*StopPipelineResponse, error)

	// GetRepositoryPipelineConfigWithResponse request
	GetRepositoryPipelineConfigWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineConfigResponse, error)

	// UpdateRepositoryPipelineConfigWithBodyWithResponse request with any body
	UpdateRepositoryPipelineConfigWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineConfigResponse, error)

	UpdateRepositoryPipelineConfigWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineConfigResponse, error)

	// UpdateRepositoryBuildNumberWithBodyWithResponse request with any body
	UpdateRepositoryBuildNumberWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryBuildNumberResponse, error)

	UpdateRepositoryBuildNumberWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryBuildNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryBuildNumberResponse, error)

	// GetRepositoryPipelineSchedulesWithResponse request
	GetRepositoryPipelineSchedulesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineSchedulesResponse, error)

	// CreateRepositoryPipelineScheduleWithBodyWithResponse request with any body
	CreateRepositoryPipelineScheduleWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineScheduleResponse, error)

	CreateRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineScheduleResponse, error)

	// DeleteRepositoryPipelineScheduleWithResponse request
	DeleteRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineScheduleResponse, error)

	// GetRepositoryPipelineScheduleWithResponse request
	GetRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineScheduleResponse, error)

	// UpdateRepositoryPipelineScheduleWithBodyWithResponse request with any body
	UpdateRepositoryPipelineScheduleWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineScheduleResponse, error)

	UpdateRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, body UpdateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineScheduleResponse, error)

	// GetRepositoryPipelineScheduleExecutionsWithResponse request
	GetRepositoryPipelineScheduleExecutionsWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineScheduleExecutionsResponse, error)

	// DeleteRepositoryPipelineKeyPairWithResponse request
	DeleteRepositoryPipelineKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineKeyPairResponse, error)

	// GetRepositoryPipelineSshKeyPairWithResponse request
	GetRepositoryPipelineSshKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineSshKeyPairResponse, error)

	// UpdateRepositoryPipelineKeyPairWithBodyWithResponse request with any body
	UpdateRepositoryPipelineKeyPairWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKeyPairResponse, error)

	UpdateRepositoryPipelineKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKeyPairResponse, error)

	// GetRepositoryPipelineKnownHostsWithResponse request
	GetRepositoryPipelineKnownHostsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineKnownHostsResponse, error)

	// CreateRepositoryPipelineKnownHostWithBodyWithResponse request with any body
	CreateRepositoryPipelineKnownHostWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineKnownHostResponse, error)

	CreateRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineKnownHostResponse, error)

	// DeleteRepositoryPipelineKnownHostWithResponse request
	DeleteRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineKnownHostResponse, error)

	// GetRepositoryPipelineKnownHostWithResponse request
	GetRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineKnownHostResponse, error)

	// UpdateRepositoryPipelineKnownHostWithBodyWithResponse request with any body
	UpdateRepositoryPipelineKnownHostWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKnownHostResponse, error)

	UpdateRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, body UpdateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKnownHostResponse, error)

	// GetRepositoryPipelineVariablesWithResponse request
	GetRepositoryPipelineVariablesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineVariablesResponse, error)

	// CreateRepositoryPipelineVariableWithBodyWithResponse request with any body
	CreateRepositoryPipelineVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineVariableResponse, error)

	CreateRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineVariableResponse, error)

	// DeleteRepositoryPipelineVariableWithResponse request
	DeleteRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineVariableResponse, error)

	// GetRepositoryPipelineVariableWithResponse request
	GetRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineVariableResponse, error)

	// UpdateRepositoryPipelineVariableWithBodyWithResponse request with any body
	UpdateRepositoryPipelineVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineVariableResponse, error)

	UpdateRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, body UpdateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineVariableResponse, error)

	// DeleteRepositoryHostedPropertyValueWithResponse request
	DeleteRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteRepositoryHostedPropertyValueResponse, error)

	// GetRepositoryHostedPropertyValueWithResponse request
	GetRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetRepositoryHostedPropertyValueResponse, error)

	// UpdateRepositoryHostedPropertyValueWithBodyWithResponse request with any body
	UpdateRepositoryHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryHostedPropertyValueResponse, error)

	UpdateRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, body UpdateRepositoryHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryHostedPropertyValueResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsResponse, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsActivityWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsActivityWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineWithResponse request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse request
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error)

	// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error)

	PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error)

	// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBodyWithResponse request with any body
	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error)

	PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error)

	// DeletePullRequestHostedPropertyValueWithResponse request
	DeletePullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeletePullRequestHostedPropertyValueResponse, error)

	// GetPullRequestHostedPropertyValueWithResponse request
	GetPullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetPullRequestHostedPropertyValueResponse, error)

	// UpdatePullRequestHostedPropertyValueWithBodyWithResponse request with any body
	UpdatePullRequestHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePullRequestHostedPropertyValueResponse, error)

	UpdatePullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, body UpdatePullRequestHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePullRequestHostedPropertyValueResponse, error)

	// GetRepositoriesWorkspaceRepoSlugRefsWithResponse request
	GetRepositoriesWorkspaceRepoSlugRefsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse request
	GetRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error)

	// PostRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse request
	PostRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse request
	GetRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugRefsTagsWithResponse request
	GetRepositoriesWorkspaceRepoSlugRefsTagsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsTagsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsTagsResponse, error)

	// PostRepositoriesWorkspaceRepoSlugRefsTagsWithBodyWithResponse request with any body
	PostRepositoriesWorkspaceRepoSlugRefsTagsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsTagsResponse, error)

	PostRepositoriesWorkspaceRepoSlugRefsTagsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsTagsResponse, error)

	// DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse request
	DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse request
	GetRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error)

	// GetRepositoriesWorkspaceRepoSlugSrcWithResponse request
	GetRepositoriesWorkspaceRepoSlugSrcWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugSrcResponse, error)

	// PostRepositoriesWorkspaceRepoSlugSrcWithResponse request
	PostRepositoriesWorkspaceRepoSlugSrcWithResponse(ctx context.Context, workspace string, repoSlug string, params *PostRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugSrcResponse, error)

	// GetRepositoriesWorkspaceRepoSlugSrcCommitPathWithResponse request
	GetRepositoriesWorkspaceRepoSlugSrcCommitPathWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse, error)

	// GetRepositoriesWorkspaceRepoSlugVersionsWithResponse request
	GetRepositoriesWorkspaceRepoSlugVersionsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugVersionsResponse, error)

	// GetRepositoriesWorkspaceRepoSlugVersionsVersionIdWithResponse request
	GetRepositoriesWorkspaceRepoSlugVersionsVersionIdWithResponse(ctx context.Context, workspace string, repoSlug string, versionId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse, error)

	// GetRepositoriesWorkspaceRepoSlugWatchersWithResponse request
	GetRepositoriesWorkspaceRepoSlugWatchersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugWatchersResponse, error)

	// GetSnippetsWithResponse request
	GetSnippetsWithResponse(ctx context.Context, params *GetSnippetsParams, reqEditors ...RequestEditorFn) (*GetSnippetsResponse, error)

	// PostSnippetsWithBodyWithResponse request with any body
	PostSnippetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsResponse, error)

	PostSnippetsWithResponse(ctx context.Context, body PostSnippetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsResponse, error)

	// GetSnippetsWorkspaceWithResponse request
	GetSnippetsWorkspaceWithResponse(ctx context.Context, workspace string, params *GetSnippetsWorkspaceParams, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceResponse, error)

	// PostSnippetsWorkspaceWithBodyWithResponse request with any body
	PostSnippetsWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceResponse, error)

	PostSnippetsWorkspaceWithResponse(ctx context.Context, workspace string, body PostSnippetsWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceResponse, error)

	// DeleteSnippetsWorkspaceEncodedIdWithResponse request
	DeleteSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdWithResponse request
	GetSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdResponse, error)

	// PutSnippetsWorkspaceEncodedIdWithResponse request
	PutSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdCommentsWithResponse request
	GetSnippetsWorkspaceEncodedIdCommentsWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommentsResponse, error)

	// PostSnippetsWorkspaceEncodedIdCommentsWithBodyWithResponse request with any body
	PostSnippetsWorkspaceEncodedIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, encodedId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceEncodedIdCommentsResponse, error)

	PostSnippetsWorkspaceEncodedIdCommentsWithResponse(ctx context.Context, workspace string, encodedId string, body PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceEncodedIdCommentsResponse, error)

	// DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse request
	DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse request
	GetSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error)

	// PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBodyWithResponse request with any body
	PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error)

	PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, body PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdCommitsWithResponse request
	GetSnippetsWorkspaceEncodedIdCommitsWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommitsResponse, error)

	// GetSnippetsWorkspaceEncodedIdCommitsRevisionWithResponse request
	GetSnippetsWorkspaceEncodedIdCommitsRevisionWithResponse(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse, error)

	// GetSnippetsWorkspaceEncodedIdFilesPathWithResponse request
	GetSnippetsWorkspaceEncodedIdFilesPathWithResponse(ctx context.Context, workspace string, encodedId string, path string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdFilesPathResponse, error)

	// DeleteSnippetsWorkspaceEncodedIdWatchWithResponse request
	DeleteSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdWatchResponse, error)

	// GetSnippetsWorkspaceEncodedIdWatchWithResponse request
	GetSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdWatchResponse, error)

	// PutSnippetsWorkspaceEncodedIdWatchWithResponse request
	PutSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdWatchResponse, error)

	// GetSnippetsWorkspaceEncodedIdWatchersWithResponse request
	GetSnippetsWorkspaceEncodedIdWatchersWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdWatchersResponse, error)

	// DeleteSnippetsWorkspaceEncodedIdNodeIdWithResponse request
	DeleteSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdNodeIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdNodeIdWithResponse request
	GetSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdNodeIdResponse, error)

	// PutSnippetsWorkspaceEncodedIdNodeIdWithResponse request
	PutSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdNodeIdResponse, error)

	// GetSnippetsWorkspaceEncodedIdNodeIdFilesPathWithResponse request
	GetSnippetsWorkspaceEncodedIdNodeIdFilesPathWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, path string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse, error)

	// GetSnippetsWorkspaceEncodedIdRevisionDiffWithResponse request
	GetSnippetsWorkspaceEncodedIdRevisionDiffWithResponse(ctx context.Context, workspace string, encodedId string, revision string, params *GetSnippetsWorkspaceEncodedIdRevisionDiffParams, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdRevisionDiffResponse, error)

	// GetSnippetsWorkspaceEncodedIdRevisionPatchWithResponse request
	GetSnippetsWorkspaceEncodedIdRevisionPatchWithResponse(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdRevisionPatchResponse, error)

	// GetPipelineVariablesForTeamWithResponse request
	GetPipelineVariablesForTeamWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForTeamResponse, error)

	// CreatePipelineVariableForTeamWithBodyWithResponse request with any body
	CreatePipelineVariableForTeamWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForTeamResponse, error)

	CreatePipelineVariableForTeamWithResponse(ctx context.Context, username string, body CreatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForTeamResponse, error)

	// DeletePipelineVariableForTeamWithResponse request
	DeletePipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForTeamResponse, error)

	// GetPipelineVariableForTeamWithResponse request
	GetPipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForTeamResponse, error)

	// UpdatePipelineVariableForTeamWithBodyWithResponse request with any body
	UpdatePipelineVariableForTeamWithBodyWithResponse(ctx context.Context, username string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForTeamResponse, error)

	UpdatePipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, body UpdatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForTeamResponse, error)

	// SearchTeamWithResponse request
	SearchTeamWithResponse(ctx context.Context, username string, params *SearchTeamParams, reqEditors ...RequestEditorFn) (*SearchTeamResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetUserEmailsWithResponse request
	GetUserEmailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserEmailsResponse, error)

	// GetUserEmailsEmailWithResponse request
	GetUserEmailsEmailWithResponse(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*GetUserEmailsEmailResponse, error)

	// GetUserPermissionsRepositoriesWithResponse request
	GetUserPermissionsRepositoriesWithResponse(ctx context.Context, params *GetUserPermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsRepositoriesResponse, error)

	// GetUserPermissionsWorkspacesWithResponse request
	GetUserPermissionsWorkspacesWithResponse(ctx context.Context, params *GetUserPermissionsWorkspacesParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsWorkspacesResponse, error)

	// GetUsersSelectedUserWithResponse request
	GetUsersSelectedUserWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserResponse, error)

	// GetPipelineVariablesForUserWithResponse request
	GetPipelineVariablesForUserWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForUserResponse, error)

	// CreatePipelineVariableForUserWithBodyWithResponse request with any body
	CreatePipelineVariableForUserWithBodyWithResponse(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForUserResponse, error)

	CreatePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, body CreatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForUserResponse, error)

	// DeletePipelineVariableForUserWithResponse request
	DeletePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForUserResponse, error)

	// GetPipelineVariableForUserWithResponse request
	GetPipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForUserResponse, error)

	// UpdatePipelineVariableForUserWithBodyWithResponse request with any body
	UpdatePipelineVariableForUserWithBodyWithResponse(ctx context.Context, selectedUser string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForUserResponse, error)

	UpdatePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, body UpdatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForUserResponse, error)

	// DeleteUserHostedPropertyValueWithResponse request
	DeleteUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteUserHostedPropertyValueResponse, error)

	// RetrieveUserHostedPropertyValueWithResponse request
	RetrieveUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*RetrieveUserHostedPropertyValueResponse, error)

	// UpdateUserHostedPropertyValueWithBodyWithResponse request with any body
	UpdateUserHostedPropertyValueWithBodyWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserHostedPropertyValueResponse, error)

	UpdateUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, body UpdateUserHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserHostedPropertyValueResponse, error)

	// SearchAccountWithResponse request
	SearchAccountWithResponse(ctx context.Context, selectedUser string, params *SearchAccountParams, reqEditors ...RequestEditorFn) (*SearchAccountResponse, error)

	// GetUsersSelectedUserSshKeysWithResponse request
	GetUsersSelectedUserSshKeysWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserSshKeysResponse, error)

	// PostUsersSelectedUserSshKeysWithBodyWithResponse request with any body
	PostUsersSelectedUserSshKeysWithBodyWithResponse(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersSelectedUserSshKeysResponse, error)

	PostUsersSelectedUserSshKeysWithResponse(ctx context.Context, selectedUser string, body PostUsersSelectedUserSshKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersSelectedUserSshKeysResponse, error)

	// DeleteUsersSelectedUserSshKeysKeyIdWithResponse request
	DeleteUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*DeleteUsersSelectedUserSshKeysKeyIdResponse, error)

	// GetUsersSelectedUserSshKeysKeyIdWithResponse request
	GetUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserSshKeysKeyIdResponse, error)

	// PutUsersSelectedUserSshKeysKeyIdWithBodyWithResponse request with any body
	PutUsersSelectedUserSshKeysKeyIdWithBodyWithResponse(ctx context.Context, selectedUser string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersSelectedUserSshKeysKeyIdResponse, error)

	PutUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, body PutUsersSelectedUserSshKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersSelectedUserSshKeysKeyIdResponse, error)

	// GetWorkspacesWithResponse request
	GetWorkspacesWithResponse(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesResponse, error)

	// GetWorkspacesWorkspaceWithResponse request
	GetWorkspacesWorkspaceWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceResponse, error)

	// GetWorkspacesWorkspaceHooksWithResponse request
	GetWorkspacesWorkspaceHooksWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceHooksResponse, error)

	// PostWorkspacesWorkspaceHooksWithResponse request
	PostWorkspacesWorkspaceHooksWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceHooksResponse, error)

	// DeleteWorkspacesWorkspaceHooksUidWithResponse request
	DeleteWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceHooksUidResponse, error)

	// GetWorkspacesWorkspaceHooksUidWithResponse request
	GetWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceHooksUidResponse, error)

	// PutWorkspacesWorkspaceHooksUidWithResponse request
	PutWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceHooksUidResponse, error)

	// GetWorkspacesWorkspaceMembersWithResponse request
	GetWorkspacesWorkspaceMembersWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceMembersResponse, error)

	// GetWorkspacesWorkspaceMembersMemberWithResponse request
	GetWorkspacesWorkspaceMembersMemberWithResponse(ctx context.Context, workspace string, member string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceMembersMemberResponse, error)

	// GetWorkspacesWorkspacePermissionsWithResponse request
	GetWorkspacesWorkspacePermissionsWithResponse(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsResponse, error)

	// GetWorkspacesWorkspacePermissionsRepositoriesWithResponse request
	GetWorkspacesWorkspacePermissionsRepositoriesWithResponse(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsRepositoriesResponse, error)

	// GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugWithResponse request
	GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse, error)

	// GetOIDCConfigurationWithResponse request
	GetOIDCConfigurationWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetOIDCConfigurationResponse, error)

	// GetOIDCKeysWithResponse request
	GetOIDCKeysWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetOIDCKeysResponse, error)

	// GetPipelineVariablesForWorkspaceWithResponse request
	GetPipelineVariablesForWorkspaceWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForWorkspaceResponse, error)

	// CreatePipelineVariableForWorkspaceWithBodyWithResponse request with any body
	CreatePipelineVariableForWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForWorkspaceResponse, error)

	CreatePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, body CreatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForWorkspaceResponse, error)

	// DeletePipelineVariableForWorkspaceWithResponse request
	DeletePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForWorkspaceResponse, error)

	// GetPipelineVariableForWorkspaceWithResponse request
	GetPipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForWorkspaceResponse, error)

	// UpdatePipelineVariableForWorkspaceWithBodyWithResponse request with any body
	UpdatePipelineVariableForWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForWorkspaceResponse, error)

	UpdatePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, body UpdatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForWorkspaceResponse, error)

	// GetWorkspacesWorkspaceProjectsWithResponse request
	GetWorkspacesWorkspaceProjectsWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsResponse, error)

	// PostWorkspacesWorkspaceProjectsWithBodyWithResponse request with any body
	PostWorkspacesWorkspaceProjectsWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsResponse, error)

	PostWorkspacesWorkspaceProjectsWithResponse(ctx context.Context, workspace string, body PostWorkspacesWorkspaceProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsResponse, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyWithResponse request
	DeleteWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyResponse, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyWithBodyWithResponse request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyResponse, error)

	PutWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, body PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse request
	PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request
	DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request
	PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error)

	// PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse request
	PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse request
	DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse request
	DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBodyWithResponse request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error)

	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse, error)

	// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse request
	DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error)

	// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse request
	GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error)

	// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBodyWithResponse request with any body
	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error)

	PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error)

	// GetWorkspacesWorkspacePullrequestsSelectedUserWithResponse request
	GetWorkspacesWorkspacePullrequestsSelectedUserWithResponse(ctx context.Context, workspace string, selectedUser string, params *GetWorkspacesWorkspacePullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePullrequestsSelectedUserResponse, error)

	// SearchWorkspaceWithResponse request
	SearchWorkspaceWithResponse(ctx context.Context, workspace string, params *SearchWorkspaceParams, reqEditors ...RequestEditorFn) (*SearchWorkspaceResponse, error)
}

type DeleteAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PutAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddonLinkersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetAddonLinkersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonLinkersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddonLinkersLinkerKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetAddonLinkersLinkerKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonLinkersLinkerKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAddonLinkersLinkerKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAddonLinkersLinkerKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddonLinkersLinkerKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddonLinkersLinkerKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetAddonLinkersLinkerKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonLinkersLinkerKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAddonLinkersLinkerKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostAddonLinkersLinkerKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAddonLinkersLinkerKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAddonLinkersLinkerKeyValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutAddonLinkersLinkerKeyValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAddonLinkersLinkerKeyValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAddonLinkersLinkerKeyValuesValueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteAddonLinkersLinkerKeyValuesValueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddonLinkersLinkerKeyValuesValueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddonLinkersLinkerKeyValuesValueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetAddonLinkersLinkerKeyValuesValueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddonLinkersLinkerKeyValuesValueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHookEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubjectTypes
}

// Status returns HTTPResponse.Status
func (r GetHookEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHookEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHookEventsSubjectTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedHookEvents
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetHookEventsSubjectTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHookEventsSubjectTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPullrequestsSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPullrequests
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPullrequestsSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPullrequestsSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositories
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositories
	JSON404      *Error
	JSON410      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repository
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repository
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Repository
	JSON201      *Repository
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBranchrestrictions
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Branchrestriction
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Branchrestriction
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Branchrestriction
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugBranchingModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchingModel
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugBranchingModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugBranchingModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchingModelSettings
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchingModelSettings
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Commit
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Participant
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommitComments
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommitComment
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCommitHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCommitHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCommitHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommitHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationProperty
}

// Status returns HTTPResponse.Status
func (r GetCommitHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommitHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCommitHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateCommitHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCommitHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPullrequestsForCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPullrequests
	JSON202      *PaginatedPullrequests
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPullrequestsForCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPullrequestsForCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportsForCommitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedReports
}

// Status returns HTTPResponse.Status
func (r GetReportsForCommitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportsForCommitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Report
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnotationsForReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAnnotations
}

// Status returns HTTPResponse.Status
func (r GetAnnotationsForReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnotationsForReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BulkCreateOrUpdateAnnotationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ReportAnnotation
}

// Status returns HTTPResponse.Status
func (r BulkCreateOrUpdateAnnotationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkCreateOrUpdateAnnotationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportAnnotation
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateAnnotationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReportAnnotation
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateAnnotationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateAnnotationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommitstatuses
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Commitstatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Commitstatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Commitstatus
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedChangeset
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugCommitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedChangeset
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugCommitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugCommitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedChangeset
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedChangeset
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugComponentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedComponents
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugComponentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugComponentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Component
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAccounts
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDeployKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeployKeys
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDeployKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDeployKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugDeployKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployKey
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugDeployKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugDeployKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployKey
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeployKey
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentsForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeployments
}

// Status returns HTTPResponse.Status
func (r GetDeploymentsForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentsForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Deployment
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetDeploymentForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDeploymentVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDeploymentVariable
}

// Status returns HTTPResponse.Status
func (r GetDeploymentVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDeploymentVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDeploymentVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeploymentVariable
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreateDeploymentVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDeploymentVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDeploymentVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteDeploymentVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDeploymentVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDeploymentVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateDeploymentVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDeploymentVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDiffSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDiffSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDiffSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDiffstats
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDownloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDownloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDownloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugDownloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON403      *Error
	JSON406      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugDownloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugDownloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EffectiveRepoBranchingModel
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDefaultReviewerAndType
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentsForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedEnvironments
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentsForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentsForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DeploymentEnvironment
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeploymentEnvironment
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedFiles
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugForksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositories
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugForksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugForksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugForksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Repository
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugForksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugForksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWebhookSubscriptions
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookSubscription
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookSubscription
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookSubscription
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedIssues
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Issue
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *IssueJobStatus
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueJobStatus
	JSON202      *IssueJobStatus
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *IssueJobStatus
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issue
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issue
	JSON403      *Error
	JSON404      *Error
	JSON410      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Issue
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedIssueAttachments
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedLogEntries
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IssueChange
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueChange
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedIssueComments
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueComment
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IssueComment
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Commit
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugMilestonesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedMilestones
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugMilestonesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugMilestonesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Milestone
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryInheritanceState
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPatchSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPatchSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPatchSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryGroupPermissions
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryGroupPermission
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryGroupPermission
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryUserPermissions
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryUserPermission
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepositoryUserPermission
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelinesForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelines
}

// Status returns HTTPResponse.Status
func (r GetPipelinesForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelinesForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pipeline
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePipelineForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineCachesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineCachesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineCachesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineCachesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineCaches
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineCachesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineCachesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineCacheResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineCacheResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineCacheResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineCacheContentURIResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineCacheContentUri
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineCacheContentURIResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineCacheContentURIResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pipeline
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineStepsForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineSteps
}

// Status returns HTTPResponse.Status
func (r GetPipelineStepsForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineStepsForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineStepForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineStep
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineStepForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineStepForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineStepLogForRepositoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineStepLogForRepositoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineStepLogForRepositoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineContainerLogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPipelineContainerLogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineContainerLogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineTestReportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineTestReportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineTestReportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineTestReportTestCasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineTestReportTestCasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineTestReportTestCasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineTestReportTestCaseReasonsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineTestReportTestCaseReasonsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineTestReportTestCaseReasonsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopPipelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r StopPipelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopPipelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelinesConfig
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryPipelineConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelinesConfig
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryPipelineConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryPipelineConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryBuildNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineBuildNumber
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryBuildNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryBuildNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineSchedules
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRepositoryPipelineScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineSchedule
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r CreateRepositoryPipelineScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRepositoryPipelineScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineSchedule
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryPipelineScheduleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineSchedule
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryPipelineScheduleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryPipelineScheduleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineScheduleExecutionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineScheduleExecutions
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineScheduleExecutionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineScheduleExecutionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineSshKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineSshKeyPair
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineSshKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineSshKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryPipelineKeyPairResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineSshKeyPair
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryPipelineKeyPairResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryPipelineKeyPairResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineKnownHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineKnownHosts
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineKnownHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineKnownHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRepositoryPipelineKnownHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineKnownHost
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreateRepositoryPipelineKnownHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRepositoryPipelineKnownHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineKnownHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineKnownHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineKnownHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineKnownHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineKnownHost
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineKnownHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineKnownHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryPipelineKnownHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineKnownHost
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryPipelineKnownHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryPipelineKnownHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineVariablesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineVariables
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineVariablesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineVariablesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRepositoryPipelineVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineVariable
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreateRepositoryPipelineVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRepositoryPipelineVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryPipelineVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryPipelineVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryPipelineVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryPipelineVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoryPipelineVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryPipelineVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryPipelineVariableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryPipelineVariableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryPipelineVariableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoryHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoryHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoryHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoryHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationProperty
}

// Status returns HTTPResponse.Status
func (r GetRepositoryHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoryHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRepositoryHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateRepositoryHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRepositoryHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPullrequests
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Pullrequest
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pullrequest
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pullrequest
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Participant
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPullrequestComments
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PullrequestComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PullrequestComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PullrequestComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommentResolution
	JSON403      *Error
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pullrequest
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pullrequest
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Participant
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommitstatuses
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTasks
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PullrequestCommentTask
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PullrequestCommentTask
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PullrequestCommentTask
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePullRequestHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePullRequestHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePullRequestHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPullRequestHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationProperty
}

// Status returns HTTPResponse.Status
func (r GetPullRequestHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPullRequestHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePullRequestHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePullRequestHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePullRequestHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugRefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRefs
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugRefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugRefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBranches
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Branch
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Branch
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugRefsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTags
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugRefsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugRefsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugRefsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugRefsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugRefsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugSrcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTreeentries
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugSrcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugSrcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRepositoriesWorkspaceRepoSlugSrcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostRepositoriesWorkspaceRepoSlugSrcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRepositoriesWorkspaceRepoSlugSrcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedTreeentries
	JSON404      *Error
	JSON555      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedVersions
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRepositoriesWorkspaceRepoSlugWatchersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAccounts
}

// Status returns HTTPResponse.Status
func (r GetRepositoriesWorkspaceRepoSlugWatchersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRepositoriesWorkspaceRepoSlugWatchersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnippets
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSnippetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Snippet
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r PostSnippetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSnippetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnippets
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSnippetsWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Snippet
	JSON401      *Error
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r PostSnippetsWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSnippetsWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnippetsWorkspaceEncodedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSnippetsWorkspaceEncodedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnippetsWorkspaceEncodedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snippet
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON410      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnippetsWorkspaceEncodedIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snippet
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutSnippetsWorkspaceEncodedIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnippetsWorkspaceEncodedIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnippetComments
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSnippetsWorkspaceEncodedIdCommentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SnippetComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostSnippetsWorkspaceEncodedIdCommentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSnippetsWorkspaceEncodedIdCommentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnippetComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnippetComment
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdCommitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSnippetCommit
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdCommitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdCommitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnippetCommit
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdFilesPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdFilesPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdFilesPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnippetsWorkspaceEncodedIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSnippetsWorkspaceEncodedIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnippetsWorkspaceEncodedIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnippetsWorkspaceEncodedIdWatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutSnippetsWorkspaceEncodedIdWatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnippetsWorkspaceEncodedIdWatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdWatchersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedAccounts
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdWatchersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdWatchersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSnippetsWorkspaceEncodedIdNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteSnippetsWorkspaceEncodedIdNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSnippetsWorkspaceEncodedIdNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snippet
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSnippetsWorkspaceEncodedIdNodeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Snippet
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r PutSnippetsWorkspaceEncodedIdNodeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSnippetsWorkspaceEncodedIdNodeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdRevisionDiffResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdRevisionDiffResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdRevisionDiffResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetsWorkspaceEncodedIdRevisionPatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetSnippetsWorkspaceEncodedIdRevisionPatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetsWorkspaceEncodedIdRevisionPatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariablesForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineVariables
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariablesForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariablesForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineVariableForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineVariable
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePipelineVariableForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineVariableForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineVariableForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineVariableForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineVariableForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariableForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariableForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariableForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineVariableForTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineVariableForTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineVariableForTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResultPage
	JSON400      *Error
	JSON404      *Error
	JSON429      *Error
}

// Status returns HTTPResponse.Status
func (r SearchTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserEmailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserEmailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserEmailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserEmailsEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUserEmailsEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserEmailsEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryPermissions
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkspaceMemberships
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariablesForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineVariables
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariablesForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariablesForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineVariableForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineVariable
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePipelineVariableForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineVariableForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineVariableForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineVariableForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineVariableForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariableForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariableForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariableForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineVariableForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineVariableForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineVariableForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetrieveUserHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApplicationProperty
}

// Status returns HTTPResponse.Status
func (r RetrieveUserHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetrieveUserHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserHostedPropertyValueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdateUserHostedPropertyValueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserHostedPropertyValueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResultPage
	JSON400      *Error
	JSON404      *Error
	JSON429      *Error
}

// Status returns HTTPResponse.Status
func (r SearchAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersSelectedUserSshKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedSshUserKeys
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersSelectedUserSshKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersSelectedUserSshKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersSelectedUserSshKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SshAccountKey
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostUsersSelectedUserSshKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersSelectedUserSshKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersSelectedUserSshKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUsersSelectedUserSshKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersSelectedUserSshKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersSelectedUserSshKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SshAccountKey
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUsersSelectedUserSshKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersSelectedUserSshKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutUsersSelectedUserSshKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SshAccountKey
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutUsersSelectedUserSshKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutUsersSelectedUserSshKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkspaces
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workspace
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWebhookSubscriptions
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkspacesWorkspaceHooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WebhookSubscription
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostWorkspacesWorkspaceHooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkspacesWorkspaceHooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookSubscription
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceHooksUidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebhookSubscription
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceHooksUidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceHooksUidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkspaceMemberships
	JSON400      *Error
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceMembersMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceMembership
	JSON401      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceMembersMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceMembersMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspacePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedWorkspaceMemberships
	JSON401      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspacePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspacePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspacePermissionsRepositoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryPermissions
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspacePermissionsRepositoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspacePermissionsRepositoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRepositoryPermissions
	JSON403      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOIDCConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetOIDCConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOIDCConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOIDCKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetOIDCKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOIDCKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariablesForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPipelineVariables
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariablesForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariablesForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePipelineVariableForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PipelineVariable
	JSON404      *Error
	JSON409      *Error
}

// Status returns HTTPResponse.Status
func (r CreatePipelineVariableForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePipelineVariableForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePipelineVariableForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePipelineVariableForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePipelineVariableForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPipelineVariableForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPipelineVariableForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPipelineVariableForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePipelineVariableForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PipelineVariable
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePipelineVariableForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePipelineVariableForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjects
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkspacesWorkspaceProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Project
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostWorkspacesWorkspaceProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkspacesWorkspaceProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceProjectsProjectKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceProjectsProjectKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Project
	JSON201      *Project
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceProjectsProjectKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceProjectsProjectKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectBranchingModel
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchingModelSettings
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchingModelSettings
	JSON400      *Error
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedDefaultReviewerAndType
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectDeployKeys
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectDeployKey
	JSON400      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectDeployKey
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectGroupPermissions
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectGroupPermission
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectGroupPermission
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedProjectUserPermissions
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUserPermission
	JSON401      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUserPermission
	JSON400      *Error
	JSON401      *Error
	JSON402      *Error
	JSON403      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspacesWorkspacePullrequestsSelectedUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPullrequests
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetWorkspacesWorkspacePullrequestsSelectedUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspacesWorkspacePullrequestsSelectedUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResultPage
	JSON400      *Error
	JSON404      *Error
	JSON429      *Error
}

// Status returns HTTPResponse.Status
func (r SearchWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAddonWithResponse request returning *DeleteAddonResponse
func (c *ClientWithResponses) DeleteAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteAddonResponse, error) {
	rsp, err := c.DeleteAddon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddonResponse(rsp)
}

// PutAddonWithResponse request returning *PutAddonResponse
func (c *ClientWithResponses) PutAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PutAddonResponse, error) {
	rsp, err := c.PutAddon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAddonResponse(rsp)
}

// GetAddonLinkersWithResponse request returning *GetAddonLinkersResponse
func (c *ClientWithResponses) GetAddonLinkersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddonLinkersResponse, error) {
	rsp, err := c.GetAddonLinkers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonLinkersResponse(rsp)
}

// GetAddonLinkersLinkerKeyWithResponse request returning *GetAddonLinkersLinkerKeyResponse
func (c *ClientWithResponses) GetAddonLinkersLinkerKeyWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyResponse, error) {
	rsp, err := c.GetAddonLinkersLinkerKey(ctx, linkerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonLinkersLinkerKeyResponse(rsp)
}

// DeleteAddonLinkersLinkerKeyValuesWithResponse request returning *DeleteAddonLinkersLinkerKeyValuesResponse
func (c *ClientWithResponses) DeleteAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*DeleteAddonLinkersLinkerKeyValuesResponse, error) {
	rsp, err := c.DeleteAddonLinkersLinkerKeyValues(ctx, linkerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddonLinkersLinkerKeyValuesResponse(rsp)
}

// GetAddonLinkersLinkerKeyValuesWithResponse request returning *GetAddonLinkersLinkerKeyValuesResponse
func (c *ClientWithResponses) GetAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyValuesResponse, error) {
	rsp, err := c.GetAddonLinkersLinkerKeyValues(ctx, linkerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonLinkersLinkerKeyValuesResponse(rsp)
}

// PostAddonLinkersLinkerKeyValuesWithResponse request returning *PostAddonLinkersLinkerKeyValuesResponse
func (c *ClientWithResponses) PostAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*PostAddonLinkersLinkerKeyValuesResponse, error) {
	rsp, err := c.PostAddonLinkersLinkerKeyValues(ctx, linkerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAddonLinkersLinkerKeyValuesResponse(rsp)
}

// PutAddonLinkersLinkerKeyValuesWithResponse request returning *PutAddonLinkersLinkerKeyValuesResponse
func (c *ClientWithResponses) PutAddonLinkersLinkerKeyValuesWithResponse(ctx context.Context, linkerKey string, reqEditors ...RequestEditorFn) (*PutAddonLinkersLinkerKeyValuesResponse, error) {
	rsp, err := c.PutAddonLinkersLinkerKeyValues(ctx, linkerKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAddonLinkersLinkerKeyValuesResponse(rsp)
}

// DeleteAddonLinkersLinkerKeyValuesValueIdWithResponse request returning *DeleteAddonLinkersLinkerKeyValuesValueIdResponse
func (c *ClientWithResponses) DeleteAddonLinkersLinkerKeyValuesValueIdWithResponse(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*DeleteAddonLinkersLinkerKeyValuesValueIdResponse, error) {
	rsp, err := c.DeleteAddonLinkersLinkerKeyValuesValueId(ctx, linkerKey, valueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddonLinkersLinkerKeyValuesValueIdResponse(rsp)
}

// GetAddonLinkersLinkerKeyValuesValueIdWithResponse request returning *GetAddonLinkersLinkerKeyValuesValueIdResponse
func (c *ClientWithResponses) GetAddonLinkersLinkerKeyValuesValueIdWithResponse(ctx context.Context, linkerKey string, valueId int, reqEditors ...RequestEditorFn) (*GetAddonLinkersLinkerKeyValuesValueIdResponse, error) {
	rsp, err := c.GetAddonLinkersLinkerKeyValuesValueId(ctx, linkerKey, valueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddonLinkersLinkerKeyValuesValueIdResponse(rsp)
}

// GetHookEventsWithResponse request returning *GetHookEventsResponse
func (c *ClientWithResponses) GetHookEventsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHookEventsResponse, error) {
	rsp, err := c.GetHookEvents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHookEventsResponse(rsp)
}

// GetHookEventsSubjectTypeWithResponse request returning *GetHookEventsSubjectTypeResponse
func (c *ClientWithResponses) GetHookEventsSubjectTypeWithResponse(ctx context.Context, subjectType string, reqEditors ...RequestEditorFn) (*GetHookEventsSubjectTypeResponse, error) {
	rsp, err := c.GetHookEventsSubjectType(ctx, subjectType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHookEventsSubjectTypeResponse(rsp)
}

// GetPullrequestsSelectedUserWithResponse request returning *GetPullrequestsSelectedUserResponse
func (c *ClientWithResponses) GetPullrequestsSelectedUserWithResponse(ctx context.Context, selectedUser string, params *GetPullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*GetPullrequestsSelectedUserResponse, error) {
	rsp, err := c.GetPullrequestsSelectedUser(ctx, selectedUser, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPullrequestsSelectedUserResponse(rsp)
}

// GetRepositoriesWithResponse request returning *GetRepositoriesResponse
func (c *ClientWithResponses) GetRepositoriesWithResponse(ctx context.Context, params *GetRepositoriesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesResponse, error) {
	rsp, err := c.GetRepositories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesResponse(rsp)
}

// GetRepositoriesWorkspaceWithResponse request returning *GetRepositoriesWorkspaceResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceWithResponse(ctx context.Context, workspace string, params *GetRepositoriesWorkspaceParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceResponse, error) {
	rsp, err := c.GetRepositoriesWorkspace(ctx, workspace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoriesWorkspaceRepoSlugParams, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlug(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugWithResponse request returning *GetRepositoriesWorkspaceRepoSlugResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlug(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlug(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, body PutRepositoriesWorkspaceRepoSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlug(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugBranchRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugBranchRestrictions(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx, workspace, repoSlug, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx, workspace, repoSlug, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithBody(ctx, workspace, repoSlug, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse(ctx context.Context, workspace string, repoSlug string, id string, body PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugBranchRestrictionsId(ctx, workspace, repoSlug, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugBranchingModelWithResponse request returning *GetRepositoriesWorkspaceRepoSlugBranchingModelResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugBranchingModelWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchingModelResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugBranchingModel(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugBranchingModelResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse request returning *PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugBranchingModelSettings(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitCommitResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitCommit(ctx, workspace, repoSlug, commit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitCommitResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx, workspace, repoSlug, commit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse request returning *PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitCommitApprove(ctx, workspace, repoSlug, commit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx, workspace, repoSlug, commit, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithBody(ctx, workspace, repoSlug, commit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitCommitComments(ctx, workspace, repoSlug, commit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx, workspace, repoSlug, commit, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx, workspace, repoSlug, commit, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithBody(ctx, workspace, repoSlug, commit, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, commentId int, body PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentId(ctx, workspace, repoSlug, commit, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp)
}

// DeleteCommitHostedPropertyValueWithResponse request returning *DeleteCommitHostedPropertyValueResponse
func (c *ClientWithResponses) DeleteCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteCommitHostedPropertyValueResponse, error) {
	rsp, err := c.DeleteCommitHostedPropertyValue(ctx, workspace, repoSlug, commit, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCommitHostedPropertyValueResponse(rsp)
}

// GetCommitHostedPropertyValueWithResponse request returning *GetCommitHostedPropertyValueResponse
func (c *ClientWithResponses) GetCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetCommitHostedPropertyValueResponse, error) {
	rsp, err := c.GetCommitHostedPropertyValue(ctx, workspace, repoSlug, commit, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommitHostedPropertyValueResponse(rsp)
}

// UpdateCommitHostedPropertyValueWithBodyWithResponse request with arbitrary body returning *UpdateCommitHostedPropertyValueResponse
func (c *ClientWithResponses) UpdateCommitHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCommitHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateCommitHostedPropertyValueWithBody(ctx, workspace, repoSlug, commit, appKey, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommitHostedPropertyValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateCommitHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, appKey string, propertyName string, body UpdateCommitHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCommitHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateCommitHostedPropertyValue(ctx, workspace, repoSlug, commit, appKey, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCommitHostedPropertyValueResponse(rsp)
}

// GetPullrequestsForCommitWithResponse request returning *GetPullrequestsForCommitResponse
func (c *ClientWithResponses) GetPullrequestsForCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetPullrequestsForCommitParams, reqEditors ...RequestEditorFn) (*GetPullrequestsForCommitResponse, error) {
	rsp, err := c.GetPullrequestsForCommit(ctx, workspace, repoSlug, commit, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPullrequestsForCommitResponse(rsp)
}

// GetReportsForCommitWithResponse request returning *GetReportsForCommitResponse
func (c *ClientWithResponses) GetReportsForCommitWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reqEditors ...RequestEditorFn) (*GetReportsForCommitResponse, error) {
	rsp, err := c.GetReportsForCommit(ctx, workspace, repoSlug, commit, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportsForCommitResponse(rsp)
}

// DeleteReportWithResponse request returning *DeleteReportResponse
func (c *ClientWithResponses) DeleteReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*DeleteReportResponse, error) {
	rsp, err := c.DeleteReport(ctx, workspace, repoSlug, commit, reportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteReportResponse(rsp)
}

// GetReportWithResponse request returning *GetReportResponse
func (c *ClientWithResponses) GetReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*GetReportResponse, error) {
	rsp, err := c.GetReport(ctx, workspace, repoSlug, commit, reportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReportResponse(rsp)
}

// CreateOrUpdateReportWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateReportResponse
func (c *ClientWithResponses) CreateOrUpdateReportWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateReportResponse, error) {
	rsp, err := c.CreateOrUpdateReportWithBody(ctx, workspace, repoSlug, commit, reportId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateReportResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body CreateOrUpdateReportJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateReportResponse, error) {
	rsp, err := c.CreateOrUpdateReport(ctx, workspace, repoSlug, commit, reportId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateReportResponse(rsp)
}

// GetAnnotationsForReportWithResponse request returning *GetAnnotationsForReportResponse
func (c *ClientWithResponses) GetAnnotationsForReportWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, reqEditors ...RequestEditorFn) (*GetAnnotationsForReportResponse, error) {
	rsp, err := c.GetAnnotationsForReport(ctx, workspace, repoSlug, commit, reportId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnotationsForReportResponse(rsp)
}

// BulkCreateOrUpdateAnnotationsWithBodyWithResponse request with arbitrary body returning *BulkCreateOrUpdateAnnotationsResponse
func (c *ClientWithResponses) BulkCreateOrUpdateAnnotationsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkCreateOrUpdateAnnotationsResponse, error) {
	rsp, err := c.BulkCreateOrUpdateAnnotationsWithBody(ctx, workspace, repoSlug, commit, reportId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkCreateOrUpdateAnnotationsResponse(rsp)
}

func (c *ClientWithResponses) BulkCreateOrUpdateAnnotationsWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, body BulkCreateOrUpdateAnnotationsJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkCreateOrUpdateAnnotationsResponse, error) {
	rsp, err := c.BulkCreateOrUpdateAnnotations(ctx, workspace, repoSlug, commit, reportId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkCreateOrUpdateAnnotationsResponse(rsp)
}

// DeleteAnnotationWithResponse request returning *DeleteAnnotationResponse
func (c *ClientWithResponses) DeleteAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*DeleteAnnotationResponse, error) {
	rsp, err := c.DeleteAnnotation(ctx, workspace, repoSlug, commit, reportId, annotationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAnnotationResponse(rsp)
}

// GetAnnotationWithResponse request returning *GetAnnotationResponse
func (c *ClientWithResponses) GetAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, reqEditors ...RequestEditorFn) (*GetAnnotationResponse, error) {
	rsp, err := c.GetAnnotation(ctx, workspace, repoSlug, commit, reportId, annotationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAnnotationResponse(rsp)
}

// CreateOrUpdateAnnotationWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateAnnotationResponse
func (c *ClientWithResponses) CreateOrUpdateAnnotationWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateAnnotationResponse, error) {
	rsp, err := c.CreateOrUpdateAnnotationWithBody(ctx, workspace, repoSlug, commit, reportId, annotationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateAnnotationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateAnnotationWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, reportId string, annotationId string, body CreateOrUpdateAnnotationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateAnnotationResponse, error) {
	rsp, err := c.CreateOrUpdateAnnotation(ctx, workspace, repoSlug, commit, reportId, annotationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateAnnotationResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, params *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitCommitStatuses(ctx, workspace, repoSlug, commit, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithBody(ctx, workspace, repoSlug, commit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, body PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuild(ctx, workspace, repoSlug, commit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx, workspace, repoSlug, commit, key, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithBody(ctx, workspace, repoSlug, commit, key, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, key string, body PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKey(ctx, workspace, repoSlug, commit, key, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommits(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugCommitsWithResponse request returning *PostRepositoriesWorkspaceRepoSlugCommitsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommits(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse request returning *GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugCommitsRevision(ctx, workspace, repoSlug, revision, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse request returning *PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse(ctx context.Context, workspace string, repoSlug string, revision string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugCommitsRevision(ctx, workspace, repoSlug, revision, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugComponentsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugComponentsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugComponentsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugComponentsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugComponents(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugComponentsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugComponentsComponentIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugComponentsComponentIdWithResponse(ctx context.Context, workspace string, repoSlug string, componentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugComponentsComponentId(ctx, workspace, repoSlug, componentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDefaultReviewersWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDefaultReviewersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDefaultReviewers(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx, workspace, repoSlug, targetUsername, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx, workspace, repoSlug, targetUsername, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse request returning *PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse(ctx context.Context, workspace string, repoSlug string, targetUsername string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsername(ctx, workspace, repoSlug, targetUsername, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDeployKeysWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDeployKeysResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDeployKeysWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDeployKeysResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDeployKeys(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDeployKeysResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugDeployKeysWithResponse request returning *PostRepositoriesWorkspaceRepoSlugDeployKeysResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugDeployKeysWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugDeployKeysResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugDeployKeys(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugDeployKeysResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx, workspace, repoSlug, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx, workspace, repoSlug, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse request returning *PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, repoSlug string, keyId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugDeployKeysKeyId(ctx, workspace, repoSlug, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp)
}

// GetDeploymentsForRepositoryWithResponse request returning *GetDeploymentsForRepositoryResponse
func (c *ClientWithResponses) GetDeploymentsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetDeploymentsForRepositoryResponse, error) {
	rsp, err := c.GetDeploymentsForRepository(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentsForRepositoryResponse(rsp)
}

// GetDeploymentForRepositoryWithResponse request returning *GetDeploymentForRepositoryResponse
func (c *ClientWithResponses) GetDeploymentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, deploymentUuid string, reqEditors ...RequestEditorFn) (*GetDeploymentForRepositoryResponse, error) {
	rsp, err := c.GetDeploymentForRepository(ctx, workspace, repoSlug, deploymentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentForRepositoryResponse(rsp)
}

// GetDeploymentVariablesWithResponse request returning *GetDeploymentVariablesResponse
func (c *ClientWithResponses) GetDeploymentVariablesWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*GetDeploymentVariablesResponse, error) {
	rsp, err := c.GetDeploymentVariables(ctx, workspace, repoSlug, environmentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDeploymentVariablesResponse(rsp)
}

// CreateDeploymentVariableWithBodyWithResponse request with arbitrary body returning *CreateDeploymentVariableResponse
func (c *ClientWithResponses) CreateDeploymentVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDeploymentVariableResponse, error) {
	rsp, err := c.CreateDeploymentVariableWithBody(ctx, workspace, repoSlug, environmentUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentVariableResponse(rsp)
}

func (c *ClientWithResponses) CreateDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, body CreateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDeploymentVariableResponse, error) {
	rsp, err := c.CreateDeploymentVariable(ctx, workspace, repoSlug, environmentUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDeploymentVariableResponse(rsp)
}

// DeleteDeploymentVariableWithResponse request returning *DeleteDeploymentVariableResponse
func (c *ClientWithResponses) DeleteDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, reqEditors ...RequestEditorFn) (*DeleteDeploymentVariableResponse, error) {
	rsp, err := c.DeleteDeploymentVariable(ctx, workspace, repoSlug, environmentUuid, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDeploymentVariableResponse(rsp)
}

// UpdateDeploymentVariableWithBodyWithResponse request with arbitrary body returning *UpdateDeploymentVariableResponse
func (c *ClientWithResponses) UpdateDeploymentVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDeploymentVariableResponse, error) {
	rsp, err := c.UpdateDeploymentVariableWithBody(ctx, workspace, repoSlug, environmentUuid, variableUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentVariableResponse(rsp)
}

func (c *ClientWithResponses) UpdateDeploymentVariableWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, variableUuid string, body UpdateDeploymentVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDeploymentVariableResponse, error) {
	rsp, err := c.UpdateDeploymentVariable(ctx, workspace, repoSlug, environmentUuid, variableUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDeploymentVariableResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDiffSpecWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDiffSpecResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDiffSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffSpecParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDiffSpecResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDiffSpec(ctx, workspace, repoSlug, spec, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDiffSpecResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDiffstatSpecWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDiffstatSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, params *GetRepositoriesWorkspaceRepoSlugDiffstatSpecParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDiffstatSpec(ctx, workspace, repoSlug, spec, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDownloadsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDownloadsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDownloadsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDownloadsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDownloads(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDownloadsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugDownloadsWithResponse request returning *PostRepositoriesWorkspaceRepoSlugDownloadsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugDownloadsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugDownloadsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugDownloads(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugDownloadsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx, workspace, repoSlug, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse request returning *GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse(ctx context.Context, workspace string, repoSlug string, filename string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugDownloadsFilename(ctx, workspace, repoSlug, filename, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelWithResponse request returning *GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModel(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersWithResponse request returning *GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewers(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse(rsp)
}

// GetEnvironmentsForRepositoryWithResponse request returning *GetEnvironmentsForRepositoryResponse
func (c *ClientWithResponses) GetEnvironmentsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetEnvironmentsForRepositoryResponse, error) {
	rsp, err := c.GetEnvironmentsForRepository(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentsForRepositoryResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentForRepositoryWithResponse request returning *DeleteEnvironmentForRepositoryResponse
func (c *ClientWithResponses) DeleteEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentForRepositoryResponse, error) {
	rsp, err := c.DeleteEnvironmentForRepository(ctx, workspace, repoSlug, environmentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentForRepositoryResponse(rsp)
}

// GetEnvironmentForRepositoryWithResponse request returning *GetEnvironmentForRepositoryResponse
func (c *ClientWithResponses) GetEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*GetEnvironmentForRepositoryResponse, error) {
	rsp, err := c.GetEnvironmentForRepository(ctx, workspace, repoSlug, environmentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentForRepositoryResponse(rsp)
}

// UpdateEnvironmentForRepositoryWithResponse request returning *UpdateEnvironmentForRepositoryResponse
func (c *ClientWithResponses) UpdateEnvironmentForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, environmentUuid string, reqEditors ...RequestEditorFn) (*UpdateEnvironmentForRepositoryResponse, error) {
	rsp, err := c.UpdateEnvironmentForRepository(ctx, workspace, repoSlug, environmentUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentForRepositoryResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathWithResponse request returning *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPath(ctx, workspace, repoSlug, commit, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugForksWithResponse request returning *GetRepositoriesWorkspaceRepoSlugForksResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugForksWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugForksParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugForksResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugForks(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugForksResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugForksWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugForksResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugForksWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugForksResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugForksWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugForksResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugForksWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugForksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugForksResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugForks(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugForksResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugHooksWithResponse request returning *GetRepositoriesWorkspaceRepoSlugHooksResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugHooksWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugHooks(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugHooksResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugHooksWithResponse request returning *PostRepositoriesWorkspaceRepoSlugHooksResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugHooksWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugHooks(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugHooksResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugHooksUidWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugHooksUid(ctx, workspace, repoSlug, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugHooksUidWithResponse request returning *GetRepositoriesWorkspaceRepoSlugHooksUidResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugHooksUid(ctx, workspace, repoSlug, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugHooksUidWithResponse request returning *PutRepositoriesWorkspaceRepoSlugHooksUidResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugHooksUidWithResponse(ctx context.Context, workspace string, repoSlug string, uid string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugHooksUid(ctx, workspace, repoSlug, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssues(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugIssuesResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssues(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesExportWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugIssuesExportResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesExportWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesExportResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesExportWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesExportResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesExportWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugIssuesExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesExportResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesExport(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesExportResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipWithResponse(ctx context.Context, workspace string, repoSlug string, repoName string, taskId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZip(ctx, workspace, repoSlug, repoName, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesImportWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesImportResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesImportWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesImportResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesImport(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesImportResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesImportWithResponse request returning *PostRepositoriesWorkspaceRepoSlugIssuesImportResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesImportWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesImportResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesImport(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesImportResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse request returning *PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugIssuesIssueId(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse request returning *PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachments(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx, workspace, repoSlug, issueId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, path string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPath(ctx, workspace, repoSlug, issueId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx, workspace, repoSlug, issueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithBody(ctx, workspace, repoSlug, issueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChanges(ctx, workspace, repoSlug, issueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, changeId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeId(ctx, workspace, repoSlug, issueId, changeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, params *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx, workspace, repoSlug, issueId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithBody(ctx, workspace, repoSlug, issueId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, body PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugIssuesIssueIdComments(ctx, workspace, repoSlug, issueId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx, workspace, repoSlug, issueId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx, workspace, repoSlug, issueId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithBody(ctx, workspace, repoSlug, issueId, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, commentId int, body PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentId(ctx, workspace, repoSlug, issueId, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse request returning *PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVote(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request returning *GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse request returning *PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse(ctx context.Context, workspace string, repoSlug string, issueId string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatch(ctx, workspace, repoSlug, issueId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecWithResponse request returning *GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecWithResponse(ctx context.Context, workspace string, repoSlug string, revspec string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugMergeBaseRevspec(ctx, workspace, repoSlug, revspec, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugMilestonesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugMilestonesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugMilestonesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMilestonesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugMilestones(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugMilestonesResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdWithResponse(ctx context.Context, workspace string, repoSlug string, milestoneId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneId(ctx, workspace, repoSlug, milestoneId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugOverrideSettings(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse request returning *PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugOverrideSettings(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPatchSpecWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPatchSpecResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPatchSpecWithResponse(ctx context.Context, workspace string, repoSlug string, spec string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPatchSpecResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPatchSpec(ctx, workspace, repoSlug, spec, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPatchSpecResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroups(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx, workspace, repoSlug, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx, workspace, repoSlug, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithBody(ctx, workspace, repoSlug, groupSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, repoSlug string, groupSlug string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlug(ctx, workspace, repoSlug, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsers(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx, workspace, repoSlug, selectedUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx, workspace, repoSlug, selectedUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithBody(ctx, workspace, repoSlug, selectedUserId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, repoSlug string, selectedUserId string, body PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserId(ctx, workspace, repoSlug, selectedUserId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// GetPipelinesForRepositoryWithResponse request returning *GetPipelinesForRepositoryResponse
func (c *ClientWithResponses) GetPipelinesForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetPipelinesForRepositoryResponse, error) {
	rsp, err := c.GetPipelinesForRepository(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelinesForRepositoryResponse(rsp)
}

// CreatePipelineForRepositoryWithBodyWithResponse request with arbitrary body returning *CreatePipelineForRepositoryResponse
func (c *ClientWithResponses) CreatePipelineForRepositoryWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineForRepositoryResponse, error) {
	rsp, err := c.CreatePipelineForRepositoryWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineForRepositoryResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, body CreatePipelineForRepositoryJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineForRepositoryResponse, error) {
	rsp, err := c.CreatePipelineForRepository(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineForRepositoryResponse(rsp)
}

// DeleteRepositoryPipelineCachesWithResponse request returning *DeleteRepositoryPipelineCachesResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineCachesWithResponse(ctx context.Context, workspace string, repoSlug string, params *DeleteRepositoryPipelineCachesParams, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineCachesResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineCaches(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineCachesResponse(rsp)
}

// GetRepositoryPipelineCachesWithResponse request returning *GetRepositoryPipelineCachesResponse
func (c *ClientWithResponses) GetRepositoryPipelineCachesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineCachesResponse, error) {
	rsp, err := c.GetRepositoryPipelineCaches(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineCachesResponse(rsp)
}

// DeleteRepositoryPipelineCacheWithResponse request returning *DeleteRepositoryPipelineCacheResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineCacheWithResponse(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineCacheResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineCache(ctx, workspace, repoSlug, cacheUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineCacheResponse(rsp)
}

// GetRepositoryPipelineCacheContentURIWithResponse request returning *GetRepositoryPipelineCacheContentURIResponse
func (c *ClientWithResponses) GetRepositoryPipelineCacheContentURIWithResponse(ctx context.Context, workspace string, repoSlug string, cacheUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineCacheContentURIResponse, error) {
	rsp, err := c.GetRepositoryPipelineCacheContentURI(ctx, workspace, repoSlug, cacheUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineCacheContentURIResponse(rsp)
}

// GetPipelineForRepositoryWithResponse request returning *GetPipelineForRepositoryResponse
func (c *ClientWithResponses) GetPipelineForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*GetPipelineForRepositoryResponse, error) {
	rsp, err := c.GetPipelineForRepository(ctx, workspace, repoSlug, pipelineUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineForRepositoryResponse(rsp)
}

// GetPipelineStepsForRepositoryWithResponse request returning *GetPipelineStepsForRepositoryResponse
func (c *ClientWithResponses) GetPipelineStepsForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepsForRepositoryResponse, error) {
	rsp, err := c.GetPipelineStepsForRepository(ctx, workspace, repoSlug, pipelineUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineStepsForRepositoryResponse(rsp)
}

// GetPipelineStepForRepositoryWithResponse request returning *GetPipelineStepForRepositoryResponse
func (c *ClientWithResponses) GetPipelineStepForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepForRepositoryResponse, error) {
	rsp, err := c.GetPipelineStepForRepository(ctx, workspace, repoSlug, pipelineUuid, stepUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineStepForRepositoryResponse(rsp)
}

// GetPipelineStepLogForRepositoryWithResponse request returning *GetPipelineStepLogForRepositoryResponse
func (c *ClientWithResponses) GetPipelineStepLogForRepositoryWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineStepLogForRepositoryResponse, error) {
	rsp, err := c.GetPipelineStepLogForRepository(ctx, workspace, repoSlug, pipelineUuid, stepUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineStepLogForRepositoryResponse(rsp)
}

// GetPipelineContainerLogWithResponse request returning *GetPipelineContainerLogResponse
func (c *ClientWithResponses) GetPipelineContainerLogWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, logUuid string, reqEditors ...RequestEditorFn) (*GetPipelineContainerLogResponse, error) {
	rsp, err := c.GetPipelineContainerLog(ctx, workspace, repoSlug, pipelineUuid, stepUuid, logUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineContainerLogResponse(rsp)
}

// GetPipelineTestReportsWithResponse request returning *GetPipelineTestReportsResponse
func (c *ClientWithResponses) GetPipelineTestReportsWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportsResponse, error) {
	rsp, err := c.GetPipelineTestReports(ctx, workspace, repoSlug, pipelineUuid, stepUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineTestReportsResponse(rsp)
}

// GetPipelineTestReportTestCasesWithResponse request returning *GetPipelineTestReportTestCasesResponse
func (c *ClientWithResponses) GetPipelineTestReportTestCasesWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportTestCasesResponse, error) {
	rsp, err := c.GetPipelineTestReportTestCases(ctx, workspace, repoSlug, pipelineUuid, stepUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineTestReportTestCasesResponse(rsp)
}

// GetPipelineTestReportTestCaseReasonsWithResponse request returning *GetPipelineTestReportTestCaseReasonsResponse
func (c *ClientWithResponses) GetPipelineTestReportTestCaseReasonsWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, stepUuid string, testCaseUuid string, reqEditors ...RequestEditorFn) (*GetPipelineTestReportTestCaseReasonsResponse, error) {
	rsp, err := c.GetPipelineTestReportTestCaseReasons(ctx, workspace, repoSlug, pipelineUuid, stepUuid, testCaseUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineTestReportTestCaseReasonsResponse(rsp)
}

// StopPipelineWithResponse request returning *StopPipelineResponse
func (c *ClientWithResponses) StopPipelineWithResponse(ctx context.Context, workspace string, repoSlug string, pipelineUuid string, reqEditors ...RequestEditorFn) (*StopPipelineResponse, error) {
	rsp, err := c.StopPipeline(ctx, workspace, repoSlug, pipelineUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopPipelineResponse(rsp)
}

// GetRepositoryPipelineConfigWithResponse request returning *GetRepositoryPipelineConfigResponse
func (c *ClientWithResponses) GetRepositoryPipelineConfigWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineConfigResponse, error) {
	rsp, err := c.GetRepositoryPipelineConfig(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineConfigResponse(rsp)
}

// UpdateRepositoryPipelineConfigWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryPipelineConfigResponse
func (c *ClientWithResponses) UpdateRepositoryPipelineConfigWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineConfigResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineConfigWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryPipelineConfigWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineConfigResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineConfig(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineConfigResponse(rsp)
}

// UpdateRepositoryBuildNumberWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryBuildNumberResponse
func (c *ClientWithResponses) UpdateRepositoryBuildNumberWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryBuildNumberResponse, error) {
	rsp, err := c.UpdateRepositoryBuildNumberWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryBuildNumberResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryBuildNumberWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryBuildNumberJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryBuildNumberResponse, error) {
	rsp, err := c.UpdateRepositoryBuildNumber(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryBuildNumberResponse(rsp)
}

// GetRepositoryPipelineSchedulesWithResponse request returning *GetRepositoryPipelineSchedulesResponse
func (c *ClientWithResponses) GetRepositoryPipelineSchedulesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineSchedulesResponse, error) {
	rsp, err := c.GetRepositoryPipelineSchedules(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineSchedulesResponse(rsp)
}

// CreateRepositoryPipelineScheduleWithBodyWithResponse request with arbitrary body returning *CreateRepositoryPipelineScheduleResponse
func (c *ClientWithResponses) CreateRepositoryPipelineScheduleWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.CreateRepositoryPipelineScheduleWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineScheduleResponse(rsp)
}

func (c *ClientWithResponses) CreateRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.CreateRepositoryPipelineSchedule(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineScheduleResponse(rsp)
}

// DeleteRepositoryPipelineScheduleWithResponse request returning *DeleteRepositoryPipelineScheduleResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineSchedule(ctx, workspace, repoSlug, scheduleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineScheduleResponse(rsp)
}

// GetRepositoryPipelineScheduleWithResponse request returning *GetRepositoryPipelineScheduleResponse
func (c *ClientWithResponses) GetRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.GetRepositoryPipelineSchedule(ctx, workspace, repoSlug, scheduleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineScheduleResponse(rsp)
}

// UpdateRepositoryPipelineScheduleWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryPipelineScheduleResponse
func (c *ClientWithResponses) UpdateRepositoryPipelineScheduleWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineScheduleWithBody(ctx, workspace, repoSlug, scheduleUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineScheduleResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryPipelineScheduleWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, body UpdateRepositoryPipelineScheduleJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineScheduleResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineSchedule(ctx, workspace, repoSlug, scheduleUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineScheduleResponse(rsp)
}

// GetRepositoryPipelineScheduleExecutionsWithResponse request returning *GetRepositoryPipelineScheduleExecutionsResponse
func (c *ClientWithResponses) GetRepositoryPipelineScheduleExecutionsWithResponse(ctx context.Context, workspace string, repoSlug string, scheduleUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineScheduleExecutionsResponse, error) {
	rsp, err := c.GetRepositoryPipelineScheduleExecutions(ctx, workspace, repoSlug, scheduleUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineScheduleExecutionsResponse(rsp)
}

// DeleteRepositoryPipelineKeyPairWithResponse request returning *DeleteRepositoryPipelineKeyPairResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineKeyPairResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineKeyPair(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineKeyPairResponse(rsp)
}

// GetRepositoryPipelineSshKeyPairWithResponse request returning *GetRepositoryPipelineSshKeyPairResponse
func (c *ClientWithResponses) GetRepositoryPipelineSshKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineSshKeyPairResponse, error) {
	rsp, err := c.GetRepositoryPipelineSshKeyPair(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineSshKeyPairResponse(rsp)
}

// UpdateRepositoryPipelineKeyPairWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryPipelineKeyPairResponse
func (c *ClientWithResponses) UpdateRepositoryPipelineKeyPairWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKeyPairResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineKeyPairWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineKeyPairResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryPipelineKeyPairWithResponse(ctx context.Context, workspace string, repoSlug string, body UpdateRepositoryPipelineKeyPairJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKeyPairResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineKeyPair(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineKeyPairResponse(rsp)
}

// GetRepositoryPipelineKnownHostsWithResponse request returning *GetRepositoryPipelineKnownHostsResponse
func (c *ClientWithResponses) GetRepositoryPipelineKnownHostsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineKnownHostsResponse, error) {
	rsp, err := c.GetRepositoryPipelineKnownHosts(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineKnownHostsResponse(rsp)
}

// CreateRepositoryPipelineKnownHostWithBodyWithResponse request with arbitrary body returning *CreateRepositoryPipelineKnownHostResponse
func (c *ClientWithResponses) CreateRepositoryPipelineKnownHostWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.CreateRepositoryPipelineKnownHostWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineKnownHostResponse(rsp)
}

func (c *ClientWithResponses) CreateRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.CreateRepositoryPipelineKnownHost(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineKnownHostResponse(rsp)
}

// DeleteRepositoryPipelineKnownHostWithResponse request returning *DeleteRepositoryPipelineKnownHostResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineKnownHost(ctx, workspace, repoSlug, knownHostUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineKnownHostResponse(rsp)
}

// GetRepositoryPipelineKnownHostWithResponse request returning *GetRepositoryPipelineKnownHostResponse
func (c *ClientWithResponses) GetRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.GetRepositoryPipelineKnownHost(ctx, workspace, repoSlug, knownHostUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineKnownHostResponse(rsp)
}

// UpdateRepositoryPipelineKnownHostWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryPipelineKnownHostResponse
func (c *ClientWithResponses) UpdateRepositoryPipelineKnownHostWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineKnownHostWithBody(ctx, workspace, repoSlug, knownHostUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineKnownHostResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryPipelineKnownHostWithResponse(ctx context.Context, workspace string, repoSlug string, knownHostUuid string, body UpdateRepositoryPipelineKnownHostJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineKnownHostResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineKnownHost(ctx, workspace, repoSlug, knownHostUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineKnownHostResponse(rsp)
}

// GetRepositoryPipelineVariablesWithResponse request returning *GetRepositoryPipelineVariablesResponse
func (c *ClientWithResponses) GetRepositoryPipelineVariablesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineVariablesResponse, error) {
	rsp, err := c.GetRepositoryPipelineVariables(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineVariablesResponse(rsp)
}

// CreateRepositoryPipelineVariableWithBodyWithResponse request with arbitrary body returning *CreateRepositoryPipelineVariableResponse
func (c *ClientWithResponses) CreateRepositoryPipelineVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineVariableResponse, error) {
	rsp, err := c.CreateRepositoryPipelineVariableWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineVariableResponse(rsp)
}

func (c *ClientWithResponses) CreateRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, body CreateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRepositoryPipelineVariableResponse, error) {
	rsp, err := c.CreateRepositoryPipelineVariable(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRepositoryPipelineVariableResponse(rsp)
}

// DeleteRepositoryPipelineVariableWithResponse request returning *DeleteRepositoryPipelineVariableResponse
func (c *ClientWithResponses) DeleteRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*DeleteRepositoryPipelineVariableResponse, error) {
	rsp, err := c.DeleteRepositoryPipelineVariable(ctx, workspace, repoSlug, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryPipelineVariableResponse(rsp)
}

// GetRepositoryPipelineVariableWithResponse request returning *GetRepositoryPipelineVariableResponse
func (c *ClientWithResponses) GetRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, reqEditors ...RequestEditorFn) (*GetRepositoryPipelineVariableResponse, error) {
	rsp, err := c.GetRepositoryPipelineVariable(ctx, workspace, repoSlug, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryPipelineVariableResponse(rsp)
}

// UpdateRepositoryPipelineVariableWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryPipelineVariableResponse
func (c *ClientWithResponses) UpdateRepositoryPipelineVariableWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineVariableResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineVariableWithBody(ctx, workspace, repoSlug, variableUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineVariableResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryPipelineVariableWithResponse(ctx context.Context, workspace string, repoSlug string, variableUuid string, body UpdateRepositoryPipelineVariableJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryPipelineVariableResponse, error) {
	rsp, err := c.UpdateRepositoryPipelineVariable(ctx, workspace, repoSlug, variableUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryPipelineVariableResponse(rsp)
}

// DeleteRepositoryHostedPropertyValueWithResponse request returning *DeleteRepositoryHostedPropertyValueResponse
func (c *ClientWithResponses) DeleteRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteRepositoryHostedPropertyValueResponse, error) {
	rsp, err := c.DeleteRepositoryHostedPropertyValue(ctx, workspace, repoSlug, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoryHostedPropertyValueResponse(rsp)
}

// GetRepositoryHostedPropertyValueWithResponse request returning *GetRepositoryHostedPropertyValueResponse
func (c *ClientWithResponses) GetRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetRepositoryHostedPropertyValueResponse, error) {
	rsp, err := c.GetRepositoryHostedPropertyValue(ctx, workspace, repoSlug, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoryHostedPropertyValueResponse(rsp)
}

// UpdateRepositoryHostedPropertyValueWithBodyWithResponse request with arbitrary body returning *UpdateRepositoryHostedPropertyValueResponse
func (c *ClientWithResponses) UpdateRepositoryHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRepositoryHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateRepositoryHostedPropertyValueWithBody(ctx, workspace, repoSlug, appKey, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryHostedPropertyValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateRepositoryHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, appKey string, propertyName string, body UpdateRepositoryHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRepositoryHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateRepositoryHostedPropertyValue(ctx, workspace, repoSlug, appKey, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRepositoryHostedPropertyValueResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugPullrequestsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequests(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugPullrequestsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugPullrequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequests(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsActivityWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsActivityWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsActivity(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithBody(ctx, workspace, repoSlug, pullRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestId(ctx, workspace, repoSlug, pullRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivity(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse request returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApprove(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithBody(ctx, workspace, repoSlug, pullRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdComments(ctx, workspace, repoSlug, pullRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx, workspace, repoSlug, pullRequestId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx, workspace, repoSlug, pullRequestId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithBody(ctx, workspace, repoSlug, pullRequestId, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentId(ctx, workspace, repoSlug, pullRequestId, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx, workspace, repoSlug, pullRequestId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse request returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, commentId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolve(ctx, workspace, repoSlug, pullRequestId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommits(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineWithResponse request returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDecline(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiff(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstat(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithBody(ctx, workspace, repoSlug, pullRequestId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeParams, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMerge(ctx, workspace, repoSlug, pullRequestId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskId(ctx, workspace, repoSlug, pullRequestId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatch(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse request returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChanges(ctx, workspace, repoSlug, pullRequestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatuses(ctx, workspace, repoSlug, pullRequestId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, params *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx, workspace, repoSlug, pullRequestId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithBody(ctx, workspace, repoSlug, pullRequestId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, body PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasks(ctx, workspace, repoSlug, pullRequestId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx, workspace, repoSlug, pullRequestId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx, workspace, repoSlug, pullRequestId, taskId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp)
}

// PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBodyWithResponse request with arbitrary body returning *PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse
func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithBody(ctx, workspace, repoSlug, pullRequestId, taskId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp)
}

func (c *ClientWithResponses) PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse(ctx context.Context, workspace string, repoSlug string, pullRequestId int, taskId int, body PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	rsp, err := c.PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskId(ctx, workspace, repoSlug, pullRequestId, taskId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp)
}

// DeletePullRequestHostedPropertyValueWithResponse request returning *DeletePullRequestHostedPropertyValueResponse
func (c *ClientWithResponses) DeletePullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeletePullRequestHostedPropertyValueResponse, error) {
	rsp, err := c.DeletePullRequestHostedPropertyValue(ctx, workspace, repoSlug, pullrequestId, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePullRequestHostedPropertyValueResponse(rsp)
}

// GetPullRequestHostedPropertyValueWithResponse request returning *GetPullRequestHostedPropertyValueResponse
func (c *ClientWithResponses) GetPullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*GetPullRequestHostedPropertyValueResponse, error) {
	rsp, err := c.GetPullRequestHostedPropertyValue(ctx, workspace, repoSlug, pullrequestId, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPullRequestHostedPropertyValueResponse(rsp)
}

// UpdatePullRequestHostedPropertyValueWithBodyWithResponse request with arbitrary body returning *UpdatePullRequestHostedPropertyValueResponse
func (c *ClientWithResponses) UpdatePullRequestHostedPropertyValueWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePullRequestHostedPropertyValueResponse, error) {
	rsp, err := c.UpdatePullRequestHostedPropertyValueWithBody(ctx, workspace, repoSlug, pullrequestId, appKey, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePullRequestHostedPropertyValueResponse(rsp)
}

func (c *ClientWithResponses) UpdatePullRequestHostedPropertyValueWithResponse(ctx context.Context, workspace string, repoSlug string, pullrequestId string, appKey string, propertyName string, body UpdatePullRequestHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePullRequestHostedPropertyValueResponse, error) {
	rsp, err := c.UpdatePullRequestHostedPropertyValue(ctx, workspace, repoSlug, pullrequestId, appKey, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePullRequestHostedPropertyValueResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugRefsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugRefsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugRefsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugRefs(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugRefsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse request returning *GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsBranchesParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugRefsBranches(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse request returning *PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugRefsBranches(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugRefsBranchesResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx, workspace, repoSlug, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse request returning *GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugRefsBranchesName(ctx, workspace, repoSlug, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugRefsTagsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugRefsTagsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugRefsTagsWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugRefsTagsParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsTagsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugRefsTags(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugRefsTagsResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugRefsTagsWithBodyWithResponse request with arbitrary body returning *PostRepositoriesWorkspaceRepoSlugRefsTagsResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugRefsTagsWithBodyWithResponse(ctx context.Context, workspace string, repoSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsTagsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugRefsTagsWithBody(ctx, workspace, repoSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugRefsTagsResponse(rsp)
}

func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugRefsTagsWithResponse(ctx context.Context, workspace string, repoSlug string, body PostRepositoriesWorkspaceRepoSlugRefsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugRefsTagsResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugRefsTags(ctx, workspace, repoSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugRefsTagsResponse(rsp)
}

// DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse request returning *DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse
func (c *ClientWithResponses) DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error) {
	rsp, err := c.DeleteRepositoriesWorkspaceRepoSlugRefsTagsName(ctx, workspace, repoSlug, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse request returning *GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse(ctx context.Context, workspace string, repoSlug string, name string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugRefsTagsName(ctx, workspace, repoSlug, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugSrcWithResponse request returning *GetRepositoriesWorkspaceRepoSlugSrcResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugSrcWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugSrc(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugSrcResponse(rsp)
}

// PostRepositoriesWorkspaceRepoSlugSrcWithResponse request returning *PostRepositoriesWorkspaceRepoSlugSrcResponse
func (c *ClientWithResponses) PostRepositoriesWorkspaceRepoSlugSrcWithResponse(ctx context.Context, workspace string, repoSlug string, params *PostRepositoriesWorkspaceRepoSlugSrcParams, reqEditors ...RequestEditorFn) (*PostRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	rsp, err := c.PostRepositoriesWorkspaceRepoSlugSrc(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRepositoriesWorkspaceRepoSlugSrcResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugSrcCommitPathWithResponse request returning *GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugSrcCommitPathWithResponse(ctx context.Context, workspace string, repoSlug string, commit string, path string, params *GetRepositoriesWorkspaceRepoSlugSrcCommitPathParams, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugSrcCommitPath(ctx, workspace, repoSlug, commit, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugVersionsWithResponse request returning *GetRepositoriesWorkspaceRepoSlugVersionsResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugVersionsWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugVersionsResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugVersions(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugVersionsResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugVersionsVersionIdWithResponse request returning *GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugVersionsVersionIdWithResponse(ctx context.Context, workspace string, repoSlug string, versionId int, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugVersionsVersionId(ctx, workspace, repoSlug, versionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse(rsp)
}

// GetRepositoriesWorkspaceRepoSlugWatchersWithResponse request returning *GetRepositoriesWorkspaceRepoSlugWatchersResponse
func (c *ClientWithResponses) GetRepositoriesWorkspaceRepoSlugWatchersWithResponse(ctx context.Context, workspace string, repoSlug string, reqEditors ...RequestEditorFn) (*GetRepositoriesWorkspaceRepoSlugWatchersResponse, error) {
	rsp, err := c.GetRepositoriesWorkspaceRepoSlugWatchers(ctx, workspace, repoSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRepositoriesWorkspaceRepoSlugWatchersResponse(rsp)
}

// GetSnippetsWithResponse request returning *GetSnippetsResponse
func (c *ClientWithResponses) GetSnippetsWithResponse(ctx context.Context, params *GetSnippetsParams, reqEditors ...RequestEditorFn) (*GetSnippetsResponse, error) {
	rsp, err := c.GetSnippets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsResponse(rsp)
}

// PostSnippetsWithBodyWithResponse request with arbitrary body returning *PostSnippetsResponse
func (c *ClientWithResponses) PostSnippetsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsResponse, error) {
	rsp, err := c.PostSnippetsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsResponse(rsp)
}

func (c *ClientWithResponses) PostSnippetsWithResponse(ctx context.Context, body PostSnippetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsResponse, error) {
	rsp, err := c.PostSnippets(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsResponse(rsp)
}

// GetSnippetsWorkspaceWithResponse request returning *GetSnippetsWorkspaceResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceWithResponse(ctx context.Context, workspace string, params *GetSnippetsWorkspaceParams, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceResponse, error) {
	rsp, err := c.GetSnippetsWorkspace(ctx, workspace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceResponse(rsp)
}

// PostSnippetsWorkspaceWithBodyWithResponse request with arbitrary body returning *PostSnippetsWorkspaceResponse
func (c *ClientWithResponses) PostSnippetsWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceResponse, error) {
	rsp, err := c.PostSnippetsWorkspaceWithBody(ctx, workspace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) PostSnippetsWorkspaceWithResponse(ctx context.Context, workspace string, body PostSnippetsWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceResponse, error) {
	rsp, err := c.PostSnippetsWorkspace(ctx, workspace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsWorkspaceResponse(rsp)
}

// DeleteSnippetsWorkspaceEncodedIdWithResponse request returning *DeleteSnippetsWorkspaceEncodedIdResponse
func (c *ClientWithResponses) DeleteSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdResponse, error) {
	rsp, err := c.DeleteSnippetsWorkspaceEncodedId(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnippetsWorkspaceEncodedIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdWithResponse request returning *GetSnippetsWorkspaceEncodedIdResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedId(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdResponse(rsp)
}

// PutSnippetsWorkspaceEncodedIdWithResponse request returning *PutSnippetsWorkspaceEncodedIdResponse
func (c *ClientWithResponses) PutSnippetsWorkspaceEncodedIdWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdResponse, error) {
	rsp, err := c.PutSnippetsWorkspaceEncodedId(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnippetsWorkspaceEncodedIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdCommentsWithResponse request returning *GetSnippetsWorkspaceEncodedIdCommentsResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdCommentsWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommentsResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdComments(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdCommentsResponse(rsp)
}

// PostSnippetsWorkspaceEncodedIdCommentsWithBodyWithResponse request with arbitrary body returning *PostSnippetsWorkspaceEncodedIdCommentsResponse
func (c *ClientWithResponses) PostSnippetsWorkspaceEncodedIdCommentsWithBodyWithResponse(ctx context.Context, workspace string, encodedId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceEncodedIdCommentsResponse, error) {
	rsp, err := c.PostSnippetsWorkspaceEncodedIdCommentsWithBody(ctx, workspace, encodedId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsWorkspaceEncodedIdCommentsResponse(rsp)
}

func (c *ClientWithResponses) PostSnippetsWorkspaceEncodedIdCommentsWithResponse(ctx context.Context, workspace string, encodedId string, body PostSnippetsWorkspaceEncodedIdCommentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSnippetsWorkspaceEncodedIdCommentsResponse, error) {
	rsp, err := c.PostSnippetsWorkspaceEncodedIdComments(ctx, workspace, encodedId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSnippetsWorkspaceEncodedIdCommentsResponse(rsp)
}

// DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse request returning *DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse
func (c *ClientWithResponses) DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	rsp, err := c.DeleteSnippetsWorkspaceEncodedIdCommentsCommentId(ctx, workspace, encodedId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse request returning *GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdCommentsCommentId(ctx, workspace, encodedId, commentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp)
}

// PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBodyWithResponse request with arbitrary body returning *PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse
func (c *ClientWithResponses) PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBodyWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithBody(ctx, workspace, encodedId, commentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp)
}

func (c *ClientWithResponses) PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse(ctx context.Context, workspace string, encodedId string, commentId int, body PutSnippetsWorkspaceEncodedIdCommentsCommentIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	rsp, err := c.PutSnippetsWorkspaceEncodedIdCommentsCommentId(ctx, workspace, encodedId, commentId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdCommitsWithResponse request returning *GetSnippetsWorkspaceEncodedIdCommitsResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdCommitsWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommitsResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdCommits(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdCommitsResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdCommitsRevisionWithResponse request returning *GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdCommitsRevisionWithResponse(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdCommitsRevision(ctx, workspace, encodedId, revision, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdCommitsRevisionResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdFilesPathWithResponse request returning *GetSnippetsWorkspaceEncodedIdFilesPathResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdFilesPathWithResponse(ctx context.Context, workspace string, encodedId string, path string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdFilesPathResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdFilesPath(ctx, workspace, encodedId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdFilesPathResponse(rsp)
}

// DeleteSnippetsWorkspaceEncodedIdWatchWithResponse request returning *DeleteSnippetsWorkspaceEncodedIdWatchResponse
func (c *ClientWithResponses) DeleteSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdWatchResponse, error) {
	rsp, err := c.DeleteSnippetsWorkspaceEncodedIdWatch(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnippetsWorkspaceEncodedIdWatchResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdWatchWithResponse request returning *GetSnippetsWorkspaceEncodedIdWatchResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdWatchResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdWatch(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdWatchResponse(rsp)
}

// PutSnippetsWorkspaceEncodedIdWatchWithResponse request returning *PutSnippetsWorkspaceEncodedIdWatchResponse
func (c *ClientWithResponses) PutSnippetsWorkspaceEncodedIdWatchWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdWatchResponse, error) {
	rsp, err := c.PutSnippetsWorkspaceEncodedIdWatch(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnippetsWorkspaceEncodedIdWatchResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdWatchersWithResponse request returning *GetSnippetsWorkspaceEncodedIdWatchersResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdWatchersWithResponse(ctx context.Context, workspace string, encodedId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdWatchersResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdWatchers(ctx, workspace, encodedId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdWatchersResponse(rsp)
}

// DeleteSnippetsWorkspaceEncodedIdNodeIdWithResponse request returning *DeleteSnippetsWorkspaceEncodedIdNodeIdResponse
func (c *ClientWithResponses) DeleteSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*DeleteSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	rsp, err := c.DeleteSnippetsWorkspaceEncodedIdNodeId(ctx, workspace, encodedId, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSnippetsWorkspaceEncodedIdNodeIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdNodeIdWithResponse request returning *GetSnippetsWorkspaceEncodedIdNodeIdResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdNodeId(ctx, workspace, encodedId, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdNodeIdResponse(rsp)
}

// PutSnippetsWorkspaceEncodedIdNodeIdWithResponse request returning *PutSnippetsWorkspaceEncodedIdNodeIdResponse
func (c *ClientWithResponses) PutSnippetsWorkspaceEncodedIdNodeIdWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, reqEditors ...RequestEditorFn) (*PutSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	rsp, err := c.PutSnippetsWorkspaceEncodedIdNodeId(ctx, workspace, encodedId, nodeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSnippetsWorkspaceEncodedIdNodeIdResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdNodeIdFilesPathWithResponse request returning *GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdNodeIdFilesPathWithResponse(ctx context.Context, workspace string, encodedId string, nodeId string, path string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdNodeIdFilesPath(ctx, workspace, encodedId, nodeId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdRevisionDiffWithResponse request returning *GetSnippetsWorkspaceEncodedIdRevisionDiffResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdRevisionDiffWithResponse(ctx context.Context, workspace string, encodedId string, revision string, params *GetSnippetsWorkspaceEncodedIdRevisionDiffParams, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdRevisionDiffResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdRevisionDiff(ctx, workspace, encodedId, revision, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdRevisionDiffResponse(rsp)
}

// GetSnippetsWorkspaceEncodedIdRevisionPatchWithResponse request returning *GetSnippetsWorkspaceEncodedIdRevisionPatchResponse
func (c *ClientWithResponses) GetSnippetsWorkspaceEncodedIdRevisionPatchWithResponse(ctx context.Context, workspace string, encodedId string, revision string, reqEditors ...RequestEditorFn) (*GetSnippetsWorkspaceEncodedIdRevisionPatchResponse, error) {
	rsp, err := c.GetSnippetsWorkspaceEncodedIdRevisionPatch(ctx, workspace, encodedId, revision, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetsWorkspaceEncodedIdRevisionPatchResponse(rsp)
}

// GetPipelineVariablesForTeamWithResponse request returning *GetPipelineVariablesForTeamResponse
func (c *ClientWithResponses) GetPipelineVariablesForTeamWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForTeamResponse, error) {
	rsp, err := c.GetPipelineVariablesForTeam(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariablesForTeamResponse(rsp)
}

// CreatePipelineVariableForTeamWithBodyWithResponse request with arbitrary body returning *CreatePipelineVariableForTeamResponse
func (c *ClientWithResponses) CreatePipelineVariableForTeamWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForTeamResponse, error) {
	rsp, err := c.CreatePipelineVariableForTeamWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForTeamResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineVariableForTeamWithResponse(ctx context.Context, username string, body CreatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForTeamResponse, error) {
	rsp, err := c.CreatePipelineVariableForTeam(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForTeamResponse(rsp)
}

// DeletePipelineVariableForTeamWithResponse request returning *DeletePipelineVariableForTeamResponse
func (c *ClientWithResponses) DeletePipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForTeamResponse, error) {
	rsp, err := c.DeletePipelineVariableForTeam(ctx, username, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineVariableForTeamResponse(rsp)
}

// GetPipelineVariableForTeamWithResponse request returning *GetPipelineVariableForTeamResponse
func (c *ClientWithResponses) GetPipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForTeamResponse, error) {
	rsp, err := c.GetPipelineVariableForTeam(ctx, username, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariableForTeamResponse(rsp)
}

// UpdatePipelineVariableForTeamWithBodyWithResponse request with arbitrary body returning *UpdatePipelineVariableForTeamResponse
func (c *ClientWithResponses) UpdatePipelineVariableForTeamWithBodyWithResponse(ctx context.Context, username string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForTeamResponse, error) {
	rsp, err := c.UpdatePipelineVariableForTeamWithBody(ctx, username, variableUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdatePipelineVariableForTeamWithResponse(ctx context.Context, username string, variableUuid string, body UpdatePipelineVariableForTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForTeamResponse, error) {
	rsp, err := c.UpdatePipelineVariableForTeam(ctx, username, variableUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForTeamResponse(rsp)
}

// SearchTeamWithResponse request returning *SearchTeamResponse
func (c *ClientWithResponses) SearchTeamWithResponse(ctx context.Context, username string, params *SearchTeamParams, reqEditors ...RequestEditorFn) (*SearchTeamResponse, error) {
	rsp, err := c.SearchTeam(ctx, username, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchTeamResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetUserEmailsWithResponse request returning *GetUserEmailsResponse
func (c *ClientWithResponses) GetUserEmailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserEmailsResponse, error) {
	rsp, err := c.GetUserEmails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserEmailsResponse(rsp)
}

// GetUserEmailsEmailWithResponse request returning *GetUserEmailsEmailResponse
func (c *ClientWithResponses) GetUserEmailsEmailWithResponse(ctx context.Context, email string, reqEditors ...RequestEditorFn) (*GetUserEmailsEmailResponse, error) {
	rsp, err := c.GetUserEmailsEmail(ctx, email, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserEmailsEmailResponse(rsp)
}

// GetUserPermissionsRepositoriesWithResponse request returning *GetUserPermissionsRepositoriesResponse
func (c *ClientWithResponses) GetUserPermissionsRepositoriesWithResponse(ctx context.Context, params *GetUserPermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsRepositoriesResponse, error) {
	rsp, err := c.GetUserPermissionsRepositories(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsRepositoriesResponse(rsp)
}

// GetUserPermissionsWorkspacesWithResponse request returning *GetUserPermissionsWorkspacesResponse
func (c *ClientWithResponses) GetUserPermissionsWorkspacesWithResponse(ctx context.Context, params *GetUserPermissionsWorkspacesParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsWorkspacesResponse, error) {
	rsp, err := c.GetUserPermissionsWorkspaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserPermissionsWorkspacesResponse(rsp)
}

// GetUsersSelectedUserWithResponse request returning *GetUsersSelectedUserResponse
func (c *ClientWithResponses) GetUsersSelectedUserWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserResponse, error) {
	rsp, err := c.GetUsersSelectedUser(ctx, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersSelectedUserResponse(rsp)
}

// GetPipelineVariablesForUserWithResponse request returning *GetPipelineVariablesForUserResponse
func (c *ClientWithResponses) GetPipelineVariablesForUserWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForUserResponse, error) {
	rsp, err := c.GetPipelineVariablesForUser(ctx, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariablesForUserResponse(rsp)
}

// CreatePipelineVariableForUserWithBodyWithResponse request with arbitrary body returning *CreatePipelineVariableForUserResponse
func (c *ClientWithResponses) CreatePipelineVariableForUserWithBodyWithResponse(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForUserResponse, error) {
	rsp, err := c.CreatePipelineVariableForUserWithBody(ctx, selectedUser, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForUserResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, body CreatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForUserResponse, error) {
	rsp, err := c.CreatePipelineVariableForUser(ctx, selectedUser, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForUserResponse(rsp)
}

// DeletePipelineVariableForUserWithResponse request returning *DeletePipelineVariableForUserResponse
func (c *ClientWithResponses) DeletePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForUserResponse, error) {
	rsp, err := c.DeletePipelineVariableForUser(ctx, selectedUser, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineVariableForUserResponse(rsp)
}

// GetPipelineVariableForUserWithResponse request returning *GetPipelineVariableForUserResponse
func (c *ClientWithResponses) GetPipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForUserResponse, error) {
	rsp, err := c.GetPipelineVariableForUser(ctx, selectedUser, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariableForUserResponse(rsp)
}

// UpdatePipelineVariableForUserWithBodyWithResponse request with arbitrary body returning *UpdatePipelineVariableForUserResponse
func (c *ClientWithResponses) UpdatePipelineVariableForUserWithBodyWithResponse(ctx context.Context, selectedUser string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForUserResponse, error) {
	rsp, err := c.UpdatePipelineVariableForUserWithBody(ctx, selectedUser, variableUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForUserResponse(rsp)
}

func (c *ClientWithResponses) UpdatePipelineVariableForUserWithResponse(ctx context.Context, selectedUser string, variableUuid string, body UpdatePipelineVariableForUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForUserResponse, error) {
	rsp, err := c.UpdatePipelineVariableForUser(ctx, selectedUser, variableUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForUserResponse(rsp)
}

// DeleteUserHostedPropertyValueWithResponse request returning *DeleteUserHostedPropertyValueResponse
func (c *ClientWithResponses) DeleteUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*DeleteUserHostedPropertyValueResponse, error) {
	rsp, err := c.DeleteUserHostedPropertyValue(ctx, selectedUser, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserHostedPropertyValueResponse(rsp)
}

// RetrieveUserHostedPropertyValueWithResponse request returning *RetrieveUserHostedPropertyValueResponse
func (c *ClientWithResponses) RetrieveUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, reqEditors ...RequestEditorFn) (*RetrieveUserHostedPropertyValueResponse, error) {
	rsp, err := c.RetrieveUserHostedPropertyValue(ctx, selectedUser, appKey, propertyName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetrieveUserHostedPropertyValueResponse(rsp)
}

// UpdateUserHostedPropertyValueWithBodyWithResponse request with arbitrary body returning *UpdateUserHostedPropertyValueResponse
func (c *ClientWithResponses) UpdateUserHostedPropertyValueWithBodyWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateUserHostedPropertyValueWithBody(ctx, selectedUser, appKey, propertyName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserHostedPropertyValueResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserHostedPropertyValueWithResponse(ctx context.Context, selectedUser string, appKey string, propertyName string, body UpdateUserHostedPropertyValueJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserHostedPropertyValueResponse, error) {
	rsp, err := c.UpdateUserHostedPropertyValue(ctx, selectedUser, appKey, propertyName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserHostedPropertyValueResponse(rsp)
}

// SearchAccountWithResponse request returning *SearchAccountResponse
func (c *ClientWithResponses) SearchAccountWithResponse(ctx context.Context, selectedUser string, params *SearchAccountParams, reqEditors ...RequestEditorFn) (*SearchAccountResponse, error) {
	rsp, err := c.SearchAccount(ctx, selectedUser, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchAccountResponse(rsp)
}

// GetUsersSelectedUserSshKeysWithResponse request returning *GetUsersSelectedUserSshKeysResponse
func (c *ClientWithResponses) GetUsersSelectedUserSshKeysWithResponse(ctx context.Context, selectedUser string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserSshKeysResponse, error) {
	rsp, err := c.GetUsersSelectedUserSshKeys(ctx, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersSelectedUserSshKeysResponse(rsp)
}

// PostUsersSelectedUserSshKeysWithBodyWithResponse request with arbitrary body returning *PostUsersSelectedUserSshKeysResponse
func (c *ClientWithResponses) PostUsersSelectedUserSshKeysWithBodyWithResponse(ctx context.Context, selectedUser string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersSelectedUserSshKeysResponse, error) {
	rsp, err := c.PostUsersSelectedUserSshKeysWithBody(ctx, selectedUser, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersSelectedUserSshKeysResponse(rsp)
}

func (c *ClientWithResponses) PostUsersSelectedUserSshKeysWithResponse(ctx context.Context, selectedUser string, body PostUsersSelectedUserSshKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersSelectedUserSshKeysResponse, error) {
	rsp, err := c.PostUsersSelectedUserSshKeys(ctx, selectedUser, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersSelectedUserSshKeysResponse(rsp)
}

// DeleteUsersSelectedUserSshKeysKeyIdWithResponse request returning *DeleteUsersSelectedUserSshKeysKeyIdResponse
func (c *ClientWithResponses) DeleteUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*DeleteUsersSelectedUserSshKeysKeyIdResponse, error) {
	rsp, err := c.DeleteUsersSelectedUserSshKeysKeyId(ctx, selectedUser, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersSelectedUserSshKeysKeyIdResponse(rsp)
}

// GetUsersSelectedUserSshKeysKeyIdWithResponse request returning *GetUsersSelectedUserSshKeysKeyIdResponse
func (c *ClientWithResponses) GetUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, reqEditors ...RequestEditorFn) (*GetUsersSelectedUserSshKeysKeyIdResponse, error) {
	rsp, err := c.GetUsersSelectedUserSshKeysKeyId(ctx, selectedUser, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersSelectedUserSshKeysKeyIdResponse(rsp)
}

// PutUsersSelectedUserSshKeysKeyIdWithBodyWithResponse request with arbitrary body returning *PutUsersSelectedUserSshKeysKeyIdResponse
func (c *ClientWithResponses) PutUsersSelectedUserSshKeysKeyIdWithBodyWithResponse(ctx context.Context, selectedUser string, keyId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutUsersSelectedUserSshKeysKeyIdResponse, error) {
	rsp, err := c.PutUsersSelectedUserSshKeysKeyIdWithBody(ctx, selectedUser, keyId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersSelectedUserSshKeysKeyIdResponse(rsp)
}

func (c *ClientWithResponses) PutUsersSelectedUserSshKeysKeyIdWithResponse(ctx context.Context, selectedUser string, keyId string, body PutUsersSelectedUserSshKeysKeyIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutUsersSelectedUserSshKeysKeyIdResponse, error) {
	rsp, err := c.PutUsersSelectedUserSshKeysKeyId(ctx, selectedUser, keyId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutUsersSelectedUserSshKeysKeyIdResponse(rsp)
}

// GetWorkspacesWithResponse request returning *GetWorkspacesResponse
func (c *ClientWithResponses) GetWorkspacesWithResponse(ctx context.Context, params *GetWorkspacesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesResponse, error) {
	rsp, err := c.GetWorkspaces(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesResponse(rsp)
}

// GetWorkspacesWorkspaceWithResponse request returning *GetWorkspacesWorkspaceResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceResponse, error) {
	rsp, err := c.GetWorkspacesWorkspace(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceResponse(rsp)
}

// GetWorkspacesWorkspaceHooksWithResponse request returning *GetWorkspacesWorkspaceHooksResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceHooksWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceHooksResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceHooks(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceHooksResponse(rsp)
}

// PostWorkspacesWorkspaceHooksWithResponse request returning *PostWorkspacesWorkspaceHooksResponse
func (c *ClientWithResponses) PostWorkspacesWorkspaceHooksWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceHooksResponse, error) {
	rsp, err := c.PostWorkspacesWorkspaceHooks(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkspacesWorkspaceHooksResponse(rsp)
}

// DeleteWorkspacesWorkspaceHooksUidWithResponse request returning *DeleteWorkspacesWorkspaceHooksUidResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceHooksUidResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceHooksUid(ctx, workspace, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceHooksUidResponse(rsp)
}

// GetWorkspacesWorkspaceHooksUidWithResponse request returning *GetWorkspacesWorkspaceHooksUidResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceHooksUidResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceHooksUid(ctx, workspace, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceHooksUidResponse(rsp)
}

// PutWorkspacesWorkspaceHooksUidWithResponse request returning *PutWorkspacesWorkspaceHooksUidResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceHooksUidWithResponse(ctx context.Context, workspace string, uid string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceHooksUidResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceHooksUid(ctx, workspace, uid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceHooksUidResponse(rsp)
}

// GetWorkspacesWorkspaceMembersWithResponse request returning *GetWorkspacesWorkspaceMembersResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceMembersWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceMembersResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceMembers(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceMembersResponse(rsp)
}

// GetWorkspacesWorkspaceMembersMemberWithResponse request returning *GetWorkspacesWorkspaceMembersMemberResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceMembersMemberWithResponse(ctx context.Context, workspace string, member string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceMembersMemberResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceMembersMember(ctx, workspace, member, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceMembersMemberResponse(rsp)
}

// GetWorkspacesWorkspacePermissionsWithResponse request returning *GetWorkspacesWorkspacePermissionsResponse
func (c *ClientWithResponses) GetWorkspacesWorkspacePermissionsWithResponse(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsResponse, error) {
	rsp, err := c.GetWorkspacesWorkspacePermissions(ctx, workspace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspacePermissionsResponse(rsp)
}

// GetWorkspacesWorkspacePermissionsRepositoriesWithResponse request returning *GetWorkspacesWorkspacePermissionsRepositoriesResponse
func (c *ClientWithResponses) GetWorkspacesWorkspacePermissionsRepositoriesWithResponse(ctx context.Context, workspace string, params *GetWorkspacesWorkspacePermissionsRepositoriesParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsRepositoriesResponse, error) {
	rsp, err := c.GetWorkspacesWorkspacePermissionsRepositories(ctx, workspace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspacePermissionsRepositoriesResponse(rsp)
}

// GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugWithResponse request returning *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse
func (c *ClientWithResponses) GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugWithResponse(ctx context.Context, workspace string, repoSlug string, params *GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse, error) {
	rsp, err := c.GetWorkspacesWorkspacePermissionsRepositoriesRepoSlug(ctx, workspace, repoSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse(rsp)
}

// GetOIDCConfigurationWithResponse request returning *GetOIDCConfigurationResponse
func (c *ClientWithResponses) GetOIDCConfigurationWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetOIDCConfigurationResponse, error) {
	rsp, err := c.GetOIDCConfiguration(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOIDCConfigurationResponse(rsp)
}

// GetOIDCKeysWithResponse request returning *GetOIDCKeysResponse
func (c *ClientWithResponses) GetOIDCKeysWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetOIDCKeysResponse, error) {
	rsp, err := c.GetOIDCKeys(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOIDCKeysResponse(rsp)
}

// GetPipelineVariablesForWorkspaceWithResponse request returning *GetPipelineVariablesForWorkspaceResponse
func (c *ClientWithResponses) GetPipelineVariablesForWorkspaceWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetPipelineVariablesForWorkspaceResponse, error) {
	rsp, err := c.GetPipelineVariablesForWorkspace(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariablesForWorkspaceResponse(rsp)
}

// CreatePipelineVariableForWorkspaceWithBodyWithResponse request with arbitrary body returning *CreatePipelineVariableForWorkspaceResponse
func (c *ClientWithResponses) CreatePipelineVariableForWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.CreatePipelineVariableForWorkspaceWithBody(ctx, workspace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreatePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, body CreatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.CreatePipelineVariableForWorkspace(ctx, workspace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePipelineVariableForWorkspaceResponse(rsp)
}

// DeletePipelineVariableForWorkspaceWithResponse request returning *DeletePipelineVariableForWorkspaceResponse
func (c *ClientWithResponses) DeletePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*DeletePipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.DeletePipelineVariableForWorkspace(ctx, workspace, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePipelineVariableForWorkspaceResponse(rsp)
}

// GetPipelineVariableForWorkspaceWithResponse request returning *GetPipelineVariableForWorkspaceResponse
func (c *ClientWithResponses) GetPipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, reqEditors ...RequestEditorFn) (*GetPipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.GetPipelineVariableForWorkspace(ctx, workspace, variableUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPipelineVariableForWorkspaceResponse(rsp)
}

// UpdatePipelineVariableForWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdatePipelineVariableForWorkspaceResponse
func (c *ClientWithResponses) UpdatePipelineVariableForWorkspaceWithBodyWithResponse(ctx context.Context, workspace string, variableUuid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.UpdatePipelineVariableForWorkspaceWithBody(ctx, workspace, variableUuid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdatePipelineVariableForWorkspaceWithResponse(ctx context.Context, workspace string, variableUuid string, body UpdatePipelineVariableForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePipelineVariableForWorkspaceResponse, error) {
	rsp, err := c.UpdatePipelineVariableForWorkspace(ctx, workspace, variableUuid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePipelineVariableForWorkspaceResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsWithResponse request returning *GetWorkspacesWorkspaceProjectsResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsWithResponse(ctx context.Context, workspace string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjects(ctx, workspace, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsResponse(rsp)
}

// PostWorkspacesWorkspaceProjectsWithBodyWithResponse request with arbitrary body returning *PostWorkspacesWorkspaceProjectsResponse
func (c *ClientWithResponses) PostWorkspacesWorkspaceProjectsWithBodyWithResponse(ctx context.Context, workspace string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsResponse, error) {
	rsp, err := c.PostWorkspacesWorkspaceProjectsWithBody(ctx, workspace, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkspacesWorkspaceProjectsResponse(rsp)
}

func (c *ClientWithResponses) PostWorkspacesWorkspaceProjectsWithResponse(ctx context.Context, workspace string, body PostWorkspacesWorkspaceProjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsResponse, error) {
	rsp, err := c.PostWorkspacesWorkspaceProjects(ctx, workspace, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkspacesWorkspaceProjectsResponse(rsp)
}

// DeleteWorkspacesWorkspaceProjectsProjectKeyWithResponse request returning *DeleteWorkspacesWorkspaceProjectsProjectKeyResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceProjectsProjectKey(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceProjectsProjectKeyResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKey(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyResponse(rsp)
}

// PutWorkspacesWorkspaceProjectsProjectKeyWithBodyWithResponse request with arbitrary body returning *PutWorkspacesWorkspaceProjectsProjectKeyResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyWithBody(ctx, workspace, projectKey, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyResponse(rsp)
}

func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyWithResponse(ctx context.Context, workspace string, projectKey string, body PutWorkspacesWorkspaceProjectsProjectKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKey(ctx, workspace, projectKey, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyBranchingModel(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse(rsp)
}

// PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse request returning *PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettings(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewers(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse(rsp)
}

// DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request returning *DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx, workspace, projectKey, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx, workspace, projectKey, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp)
}

// PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse request returning *PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse(ctx context.Context, workspace string, projectKey string, selectedUser string, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUser(ctx, workspace, projectKey, selectedUser, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(rsp)
}

// PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse request returning *PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse
func (c *ClientWithResponses) PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error) {
	rsp, err := c.PostWorkspacesWorkspaceProjectsProjectKeyDeployKeys(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(rsp)
}

// DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse request returning *DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx, workspace, projectKey, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse(ctx context.Context, workspace string, projectKey string, keyId string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyId(ctx, workspace, projectKey, keyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroups(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse(rsp)
}

// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse request returning *DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx, workspace, projectKey, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx, workspace, projectKey, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBodyWithResponse request with arbitrary body returning *PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithBody(ctx, workspace, projectKey, groupSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp)
}

func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse(ctx context.Context, workspace string, projectKey string, groupSlug string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlug(ctx, workspace, projectKey, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersWithResponse(ctx context.Context, workspace string, projectKey string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsers(ctx, workspace, projectKey, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse(rsp)
}

// DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse request returning *DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx, workspace, projectKey, selectedUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse request returning *GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx, workspace, projectKey, selectedUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBodyWithResponse request with arbitrary body returning *PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse
func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBodyWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithBody(ctx, workspace, projectKey, selectedUserId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

func (c *ClientWithResponses) PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse(ctx context.Context, workspace string, projectKey string, selectedUserId string, body PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	rsp, err := c.PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserId(ctx, workspace, projectKey, selectedUserId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp)
}

// GetWorkspacesWorkspacePullrequestsSelectedUserWithResponse request returning *GetWorkspacesWorkspacePullrequestsSelectedUserResponse
func (c *ClientWithResponses) GetWorkspacesWorkspacePullrequestsSelectedUserWithResponse(ctx context.Context, workspace string, selectedUser string, params *GetWorkspacesWorkspacePullrequestsSelectedUserParams, reqEditors ...RequestEditorFn) (*GetWorkspacesWorkspacePullrequestsSelectedUserResponse, error) {
	rsp, err := c.GetWorkspacesWorkspacePullrequestsSelectedUser(ctx, workspace, selectedUser, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspacesWorkspacePullrequestsSelectedUserResponse(rsp)
}

// SearchWorkspaceWithResponse request returning *SearchWorkspaceResponse
func (c *ClientWithResponses) SearchWorkspaceWithResponse(ctx context.Context, workspace string, params *SearchWorkspaceParams, reqEditors ...RequestEditorFn) (*SearchWorkspaceResponse, error) {
	rsp, err := c.SearchWorkspace(ctx, workspace, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchWorkspaceResponse(rsp)
}

// ParseDeleteAddonResponse parses an HTTP response from a DeleteAddonWithResponse call
func ParseDeleteAddonResponse(rsp *http.Response) (*DeleteAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePutAddonResponse parses an HTTP response from a PutAddonWithResponse call
func ParsePutAddonResponse(rsp *http.Response) (*PutAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetAddonLinkersResponse parses an HTTP response from a GetAddonLinkersWithResponse call
func ParseGetAddonLinkersResponse(rsp *http.Response) (*GetAddonLinkersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonLinkersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetAddonLinkersLinkerKeyResponse parses an HTTP response from a GetAddonLinkersLinkerKeyWithResponse call
func ParseGetAddonLinkersLinkerKeyResponse(rsp *http.Response) (*GetAddonLinkersLinkerKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonLinkersLinkerKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteAddonLinkersLinkerKeyValuesResponse parses an HTTP response from a DeleteAddonLinkersLinkerKeyValuesWithResponse call
func ParseDeleteAddonLinkersLinkerKeyValuesResponse(rsp *http.Response) (*DeleteAddonLinkersLinkerKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddonLinkersLinkerKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAddonLinkersLinkerKeyValuesResponse parses an HTTP response from a GetAddonLinkersLinkerKeyValuesWithResponse call
func ParseGetAddonLinkersLinkerKeyValuesResponse(rsp *http.Response) (*GetAddonLinkersLinkerKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonLinkersLinkerKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostAddonLinkersLinkerKeyValuesResponse parses an HTTP response from a PostAddonLinkersLinkerKeyValuesWithResponse call
func ParsePostAddonLinkersLinkerKeyValuesResponse(rsp *http.Response) (*PostAddonLinkersLinkerKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAddonLinkersLinkerKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePutAddonLinkersLinkerKeyValuesResponse parses an HTTP response from a PutAddonLinkersLinkerKeyValuesWithResponse call
func ParsePutAddonLinkersLinkerKeyValuesResponse(rsp *http.Response) (*PutAddonLinkersLinkerKeyValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAddonLinkersLinkerKeyValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteAddonLinkersLinkerKeyValuesValueIdResponse parses an HTTP response from a DeleteAddonLinkersLinkerKeyValuesValueIdWithResponse call
func ParseDeleteAddonLinkersLinkerKeyValuesValueIdResponse(rsp *http.Response) (*DeleteAddonLinkersLinkerKeyValuesValueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddonLinkersLinkerKeyValuesValueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetAddonLinkersLinkerKeyValuesValueIdResponse parses an HTTP response from a GetAddonLinkersLinkerKeyValuesValueIdWithResponse call
func ParseGetAddonLinkersLinkerKeyValuesValueIdResponse(rsp *http.Response) (*GetAddonLinkersLinkerKeyValuesValueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddonLinkersLinkerKeyValuesValueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetHookEventsResponse parses an HTTP response from a GetHookEventsWithResponse call
func ParseGetHookEventsResponse(rsp *http.Response) (*GetHookEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHookEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubjectTypes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHookEventsSubjectTypeResponse parses an HTTP response from a GetHookEventsSubjectTypeWithResponse call
func ParseGetHookEventsSubjectTypeResponse(rsp *http.Response) (*GetHookEventsSubjectTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHookEventsSubjectTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedHookEvents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPullrequestsSelectedUserResponse parses an HTTP response from a GetPullrequestsSelectedUserWithResponse call
func ParseGetPullrequestsSelectedUserResponse(rsp *http.Response) (*GetPullrequestsSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPullrequestsSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPullrequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesResponse parses an HTTP response from a GetRepositoriesWithResponse call
func ParseGetRepositoriesResponse(rsp *http.Response) (*GetRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceResponse parses an HTTP response from a GetRepositoriesWorkspaceWithResponse call
func ParseGetRepositoriesWorkspaceResponse(rsp *http.Response) (*GetRepositoriesWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBranchrestrictions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugBranchRestrictionsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugBranchRestrictionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Branchrestriction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Branchrestriction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugBranchRestrictionsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Branchrestriction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugBranchingModelResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugBranchingModelWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugBranchingModelResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugBranchingModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugBranchingModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchingModelSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugBranchingModelSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchingModelSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitCommitResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitCommitWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitCommitResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitCommitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Commit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugCommitCommitApproveWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugCommitCommitApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Participant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommitComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugCommitCommitCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommitComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugCommitCommitCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCommitHostedPropertyValueResponse parses an HTTP response from a DeleteCommitHostedPropertyValueWithResponse call
func ParseDeleteCommitHostedPropertyValueResponse(rsp *http.Response) (*DeleteCommitHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCommitHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCommitHostedPropertyValueResponse parses an HTTP response from a GetCommitHostedPropertyValueWithResponse call
func ParseGetCommitHostedPropertyValueResponse(rsp *http.Response) (*GetCommitHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommitHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCommitHostedPropertyValueResponse parses an HTTP response from a UpdateCommitHostedPropertyValueWithResponse call
func ParseUpdateCommitHostedPropertyValueResponse(rsp *http.Response) (*UpdateCommitHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCommitHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPullrequestsForCommitResponse parses an HTTP response from a GetPullrequestsForCommitWithResponse call
func ParseGetPullrequestsForCommitResponse(rsp *http.Response) (*GetPullrequestsForCommitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPullrequestsForCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPullrequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PaginatedPullrequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetReportsForCommitResponse parses an HTTP response from a GetReportsForCommitWithResponse call
func ParseGetReportsForCommitResponse(rsp *http.Response) (*GetReportsForCommitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportsForCommitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedReports
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteReportResponse parses an HTTP response from a DeleteReportWithResponse call
func ParseDeleteReportResponse(rsp *http.Response) (*DeleteReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetReportResponse parses an HTTP response from a GetReportWithResponse call
func ParseGetReportResponse(rsp *http.Response) (*GetReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateReportResponse parses an HTTP response from a CreateOrUpdateReportWithResponse call
func ParseCreateOrUpdateReportResponse(rsp *http.Response) (*CreateOrUpdateReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Report
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetAnnotationsForReportResponse parses an HTTP response from a GetAnnotationsForReportWithResponse call
func ParseGetAnnotationsForReportResponse(rsp *http.Response) (*GetAnnotationsForReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnotationsForReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAnnotations
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBulkCreateOrUpdateAnnotationsResponse parses an HTTP response from a BulkCreateOrUpdateAnnotationsWithResponse call
func ParseBulkCreateOrUpdateAnnotationsResponse(rsp *http.Response) (*BulkCreateOrUpdateAnnotationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkCreateOrUpdateAnnotationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ReportAnnotation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAnnotationResponse parses an HTTP response from a DeleteAnnotationWithResponse call
func ParseDeleteAnnotationResponse(rsp *http.Response) (*DeleteAnnotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAnnotationResponse parses an HTTP response from a GetAnnotationWithResponse call
func ParseGetAnnotationResponse(rsp *http.Response) (*GetAnnotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportAnnotation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateAnnotationResponse parses an HTTP response from a CreateOrUpdateAnnotationWithResponse call
func ParseCreateOrUpdateAnnotationResponse(rsp *http.Response) (*CreateOrUpdateAnnotationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateAnnotationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReportAnnotation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommitstatuses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Commitstatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Commitstatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugCommitCommitStatusesBuildKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Commitstatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedChangeset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugCommitsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugCommitsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugCommitsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugCommitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugCommitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedChangeset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugCommitsRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedChangeset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugCommitsRevisionWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugCommitsRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedChangeset
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugComponentsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugComponentsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugComponentsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugComponentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugComponentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedComponents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugComponentsComponentIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugComponentsComponentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Component
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDefaultReviewersWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDefaultReviewersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugDefaultReviewersTargetUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDeployKeysResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDeployKeysWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDeployKeysResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDeployKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDeployKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeployKeys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugDeployKeysResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugDeployKeysWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugDeployKeysResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugDeployKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugDeployKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugDeployKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeployKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDeploymentsForRepositoryResponse parses an HTTP response from a GetDeploymentsForRepositoryWithResponse call
func ParseGetDeploymentsForRepositoryResponse(rsp *http.Response) (*GetDeploymentsForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentsForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeployments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDeploymentForRepositoryResponse parses an HTTP response from a GetDeploymentForRepositoryWithResponse call
func ParseGetDeploymentForRepositoryResponse(rsp *http.Response) (*GetDeploymentForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Deployment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetDeploymentVariablesResponse parses an HTTP response from a GetDeploymentVariablesWithResponse call
func ParseGetDeploymentVariablesResponse(rsp *http.Response) (*GetDeploymentVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDeploymentVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDeploymentVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateDeploymentVariableResponse parses an HTTP response from a CreateDeploymentVariableWithResponse call
func ParseCreateDeploymentVariableResponse(rsp *http.Response) (*CreateDeploymentVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDeploymentVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeploymentVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteDeploymentVariableResponse parses an HTTP response from a DeleteDeploymentVariableWithResponse call
func ParseDeleteDeploymentVariableResponse(rsp *http.Response) (*DeleteDeploymentVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDeploymentVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateDeploymentVariableResponse parses an HTTP response from a UpdateDeploymentVariableWithResponse call
func ParseUpdateDeploymentVariableResponse(rsp *http.Response) (*UpdateDeploymentVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDeploymentVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDiffSpecResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDiffSpecWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDiffSpecResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDiffSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDiffSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDiffstatSpecWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDiffstatSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDiffstats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDownloadsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDownloadsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDownloadsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDownloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDownloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugDownloadsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugDownloadsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugDownloadsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugDownloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugDownloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugDownloadsFilenameWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugDownloadsFilenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugEffectiveBranchingModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EffectiveRepoBranchingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugEffectiveDefaultReviewersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDefaultReviewerAndType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentsForRepositoryResponse parses an HTTP response from a GetEnvironmentsForRepositoryWithResponse call
func ParseGetEnvironmentsForRepositoryResponse(rsp *http.Response) (*GetEnvironmentsForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentsForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedEnvironments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DeploymentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteEnvironmentForRepositoryResponse parses an HTTP response from a DeleteEnvironmentForRepositoryWithResponse call
func ParseDeleteEnvironmentForRepositoryResponse(rsp *http.Response) (*DeleteEnvironmentForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentForRepositoryResponse parses an HTTP response from a GetEnvironmentForRepositoryWithResponse call
func ParseGetEnvironmentForRepositoryResponse(rsp *http.Response) (*GetEnvironmentForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeploymentEnvironment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateEnvironmentForRepositoryResponse parses an HTTP response from a UpdateEnvironmentForRepositoryWithResponse call
func ParseUpdateEnvironmentForRepositoryResponse(rsp *http.Response) (*UpdateEnvironmentForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugFilehistoryCommitPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedFiles
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugForksResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugForksWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugForksResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugForksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugForksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositories
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugForksResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugForksWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugForksResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugForksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugForksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Repository
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugHooksResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugHooksWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugHooksResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWebhookSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugHooksResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugHooksWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugHooksResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugHooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugHooksUidResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugHooksUidWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugHooksUidResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugHooksUidWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugHooksUidResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugHooksUidWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugHooksUidResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedIssues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesExportResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesExportWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesExportResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesExportRepoNameIssuesTaskIdZipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest IssueJobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesImportResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesImportWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesImportResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueJobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest IssueJobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesImportResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesImportWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesImportResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest IssueJobStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugIssuesIssueIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Issue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedIssueAttachments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdAttachmentsPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedLogEntries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IssueChange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdChangesChangeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueChange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedIssueComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugIssuesIssueIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IssueComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugIssuesIssueIdVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugIssuesIssueIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugMergeBaseRevspecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Commit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugMilestonesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugMilestonesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugMilestonesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugMilestonesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugMilestonesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedMilestones
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugMilestonesMilestoneIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Milestone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugOverrideSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryInheritanceState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugOverrideSettingsWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugOverrideSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPatchSpecResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPatchSpecWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPatchSpecResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPatchSpecResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPatchSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryGroupPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryGroupPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryGroupPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryUserPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryUserPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepositoryUserPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelinesForRepositoryResponse parses an HTTP response from a GetPipelinesForRepositoryWithResponse call
func ParseGetPipelinesForRepositoryResponse(rsp *http.Response) (*GetPipelinesForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelinesForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelines
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePipelineForRepositoryResponse parses an HTTP response from a CreatePipelineForRepositoryWithResponse call
func ParseCreatePipelineForRepositoryResponse(rsp *http.Response) (*CreatePipelineForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineCachesResponse parses an HTTP response from a DeleteRepositoryPipelineCachesWithResponse call
func ParseDeleteRepositoryPipelineCachesResponse(rsp *http.Response) (*DeleteRepositoryPipelineCachesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineCachesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineCachesResponse parses an HTTP response from a GetRepositoryPipelineCachesWithResponse call
func ParseGetRepositoryPipelineCachesResponse(rsp *http.Response) (*GetRepositoryPipelineCachesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineCachesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineCaches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineCacheResponse parses an HTTP response from a DeleteRepositoryPipelineCacheWithResponse call
func ParseDeleteRepositoryPipelineCacheResponse(rsp *http.Response) (*DeleteRepositoryPipelineCacheResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineCacheResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineCacheContentURIResponse parses an HTTP response from a GetRepositoryPipelineCacheContentURIWithResponse call
func ParseGetRepositoryPipelineCacheContentURIResponse(rsp *http.Response) (*GetRepositoryPipelineCacheContentURIResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineCacheContentURIResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineCacheContentUri
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineForRepositoryResponse parses an HTTP response from a GetPipelineForRepositoryWithResponse call
func ParseGetPipelineForRepositoryResponse(rsp *http.Response) (*GetPipelineForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pipeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineStepsForRepositoryResponse parses an HTTP response from a GetPipelineStepsForRepositoryWithResponse call
func ParseGetPipelineStepsForRepositoryResponse(rsp *http.Response) (*GetPipelineStepsForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineStepsForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineSteps
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPipelineStepForRepositoryResponse parses an HTTP response from a GetPipelineStepForRepositoryWithResponse call
func ParseGetPipelineStepForRepositoryResponse(rsp *http.Response) (*GetPipelineStepForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineStepForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineStep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineStepLogForRepositoryResponse parses an HTTP response from a GetPipelineStepLogForRepositoryWithResponse call
func ParseGetPipelineStepLogForRepositoryResponse(rsp *http.Response) (*GetPipelineStepLogForRepositoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineStepLogForRepositoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineContainerLogResponse parses an HTTP response from a GetPipelineContainerLogWithResponse call
func ParseGetPipelineContainerLogResponse(rsp *http.Response) (*GetPipelineContainerLogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineContainerLogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPipelineTestReportsResponse parses an HTTP response from a GetPipelineTestReportsWithResponse call
func ParseGetPipelineTestReportsResponse(rsp *http.Response) (*GetPipelineTestReportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineTestReportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineTestReportTestCasesResponse parses an HTTP response from a GetPipelineTestReportTestCasesWithResponse call
func ParseGetPipelineTestReportTestCasesResponse(rsp *http.Response) (*GetPipelineTestReportTestCasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineTestReportTestCasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineTestReportTestCaseReasonsResponse parses an HTTP response from a GetPipelineTestReportTestCaseReasonsWithResponse call
func ParseGetPipelineTestReportTestCaseReasonsResponse(rsp *http.Response) (*GetPipelineTestReportTestCaseReasonsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineTestReportTestCaseReasonsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseStopPipelineResponse parses an HTTP response from a StopPipelineWithResponse call
func ParseStopPipelineResponse(rsp *http.Response) (*StopPipelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopPipelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineConfigResponse parses an HTTP response from a GetRepositoryPipelineConfigWithResponse call
func ParseGetRepositoryPipelineConfigResponse(rsp *http.Response) (*GetRepositoryPipelineConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelinesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryPipelineConfigResponse parses an HTTP response from a UpdateRepositoryPipelineConfigWithResponse call
func ParseUpdateRepositoryPipelineConfigResponse(rsp *http.Response) (*UpdateRepositoryPipelineConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryPipelineConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelinesConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryBuildNumberResponse parses an HTTP response from a UpdateRepositoryBuildNumberWithResponse call
func ParseUpdateRepositoryBuildNumberResponse(rsp *http.Response) (*UpdateRepositoryBuildNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryBuildNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineBuildNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineSchedulesResponse parses an HTTP response from a GetRepositoryPipelineSchedulesWithResponse call
func ParseGetRepositoryPipelineSchedulesResponse(rsp *http.Response) (*GetRepositoryPipelineSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineSchedules
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateRepositoryPipelineScheduleResponse parses an HTTP response from a CreateRepositoryPipelineScheduleWithResponse call
func ParseCreateRepositoryPipelineScheduleResponse(rsp *http.Response) (*CreateRepositoryPipelineScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRepositoryPipelineScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineScheduleResponse parses an HTTP response from a DeleteRepositoryPipelineScheduleWithResponse call
func ParseDeleteRepositoryPipelineScheduleResponse(rsp *http.Response) (*DeleteRepositoryPipelineScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineScheduleResponse parses an HTTP response from a GetRepositoryPipelineScheduleWithResponse call
func ParseGetRepositoryPipelineScheduleResponse(rsp *http.Response) (*GetRepositoryPipelineScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryPipelineScheduleResponse parses an HTTP response from a UpdateRepositoryPipelineScheduleWithResponse call
func ParseUpdateRepositoryPipelineScheduleResponse(rsp *http.Response) (*UpdateRepositoryPipelineScheduleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryPipelineScheduleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineScheduleExecutionsResponse parses an HTTP response from a GetRepositoryPipelineScheduleExecutionsWithResponse call
func ParseGetRepositoryPipelineScheduleExecutionsResponse(rsp *http.Response) (*GetRepositoryPipelineScheduleExecutionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineScheduleExecutionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineScheduleExecutions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineKeyPairResponse parses an HTTP response from a DeleteRepositoryPipelineKeyPairWithResponse call
func ParseDeleteRepositoryPipelineKeyPairResponse(rsp *http.Response) (*DeleteRepositoryPipelineKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineSshKeyPairResponse parses an HTTP response from a GetRepositoryPipelineSshKeyPairWithResponse call
func ParseGetRepositoryPipelineSshKeyPairResponse(rsp *http.Response) (*GetRepositoryPipelineSshKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineSshKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineSshKeyPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryPipelineKeyPairResponse parses an HTTP response from a UpdateRepositoryPipelineKeyPairWithResponse call
func ParseUpdateRepositoryPipelineKeyPairResponse(rsp *http.Response) (*UpdateRepositoryPipelineKeyPairResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryPipelineKeyPairResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineSshKeyPair
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineKnownHostsResponse parses an HTTP response from a GetRepositoryPipelineKnownHostsWithResponse call
func ParseGetRepositoryPipelineKnownHostsResponse(rsp *http.Response) (*GetRepositoryPipelineKnownHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineKnownHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineKnownHosts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRepositoryPipelineKnownHostResponse parses an HTTP response from a CreateRepositoryPipelineKnownHostWithResponse call
func ParseCreateRepositoryPipelineKnownHostResponse(rsp *http.Response) (*CreateRepositoryPipelineKnownHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRepositoryPipelineKnownHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineKnownHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineKnownHostResponse parses an HTTP response from a DeleteRepositoryPipelineKnownHostWithResponse call
func ParseDeleteRepositoryPipelineKnownHostResponse(rsp *http.Response) (*DeleteRepositoryPipelineKnownHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineKnownHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineKnownHostResponse parses an HTTP response from a GetRepositoryPipelineKnownHostWithResponse call
func ParseGetRepositoryPipelineKnownHostResponse(rsp *http.Response) (*GetRepositoryPipelineKnownHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineKnownHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineKnownHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryPipelineKnownHostResponse parses an HTTP response from a UpdateRepositoryPipelineKnownHostWithResponse call
func ParseUpdateRepositoryPipelineKnownHostResponse(rsp *http.Response) (*UpdateRepositoryPipelineKnownHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryPipelineKnownHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineKnownHost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineVariablesResponse parses an HTTP response from a GetRepositoryPipelineVariablesWithResponse call
func ParseGetRepositoryPipelineVariablesResponse(rsp *http.Response) (*GetRepositoryPipelineVariablesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineVariablesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineVariables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateRepositoryPipelineVariableResponse parses an HTTP response from a CreateRepositoryPipelineVariableWithResponse call
func ParseCreateRepositoryPipelineVariableResponse(rsp *http.Response) (*CreateRepositoryPipelineVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRepositoryPipelineVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryPipelineVariableResponse parses an HTTP response from a DeleteRepositoryPipelineVariableWithResponse call
func ParseDeleteRepositoryPipelineVariableResponse(rsp *http.Response) (*DeleteRepositoryPipelineVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryPipelineVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoryPipelineVariableResponse parses an HTTP response from a GetRepositoryPipelineVariableWithResponse call
func ParseGetRepositoryPipelineVariableResponse(rsp *http.Response) (*GetRepositoryPipelineVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryPipelineVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryPipelineVariableResponse parses an HTTP response from a UpdateRepositoryPipelineVariableWithResponse call
func ParseUpdateRepositoryPipelineVariableResponse(rsp *http.Response) (*UpdateRepositoryPipelineVariableResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryPipelineVariableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoryHostedPropertyValueResponse parses an HTTP response from a DeleteRepositoryHostedPropertyValueWithResponse call
func ParseDeleteRepositoryHostedPropertyValueResponse(rsp *http.Response) (*DeleteRepositoryHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoryHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoryHostedPropertyValueResponse parses an HTTP response from a GetRepositoryHostedPropertyValueWithResponse call
func ParseGetRepositoryHostedPropertyValueResponse(rsp *http.Response) (*GetRepositoryHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoryHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateRepositoryHostedPropertyValueResponse parses an HTTP response from a UpdateRepositoryHostedPropertyValueWithResponse call
func ParseUpdateRepositoryHostedPropertyValueResponse(rsp *http.Response) (*UpdateRepositoryHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRepositoryHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPullrequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Pullrequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsActivityWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pullrequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pullrequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdActivityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Participant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPullrequestComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PullrequestComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PullrequestComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PullrequestComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommentsCommentIdResolveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommentResolution
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdCommitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pullrequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdDiffstatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pullrequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdMergeTaskStatusTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdRequestChangesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Participant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommitstatuses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTasks
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PullrequestCommentTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PullrequestCommentTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse parses an HTTP response from a PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdWithResponse call
func ParsePutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse(rsp *http.Response) (*PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRepositoriesWorkspaceRepoSlugPullrequestsPullRequestIdTasksTaskIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PullrequestCommentTask
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePullRequestHostedPropertyValueResponse parses an HTTP response from a DeletePullRequestHostedPropertyValueWithResponse call
func ParseDeletePullRequestHostedPropertyValueResponse(rsp *http.Response) (*DeletePullRequestHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePullRequestHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPullRequestHostedPropertyValueResponse parses an HTTP response from a GetPullRequestHostedPropertyValueWithResponse call
func ParseGetPullRequestHostedPropertyValueResponse(rsp *http.Response) (*GetPullRequestHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPullRequestHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePullRequestHostedPropertyValueResponse parses an HTTP response from a UpdatePullRequestHostedPropertyValueWithResponse call
func ParseUpdatePullRequestHostedPropertyValueResponse(rsp *http.Response) (*UpdatePullRequestHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePullRequestHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugRefsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugRefsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugRefsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugRefsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugRefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRefs
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugRefsBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBranches
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugRefsBranchesResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugRefsBranchesWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugRefsBranchesResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugRefsBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Branch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugRefsBranchesNameWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugRefsBranchesNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Branch
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugRefsTagsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugRefsTagsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugRefsTagsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugRefsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugRefsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugRefsTagsResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugRefsTagsWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugRefsTagsResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugRefsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugRefsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse parses an HTTP response from a DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse call
func ParseDeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse(rsp *http.Response) (*DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRepositoriesWorkspaceRepoSlugRefsTagsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugRefsTagsNameWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugRefsTagsNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugSrcResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugSrcWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugSrcResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugSrcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTreeentries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRepositoriesWorkspaceRepoSlugSrcResponse parses an HTTP response from a PostRepositoriesWorkspaceRepoSlugSrcWithResponse call
func ParsePostRepositoriesWorkspaceRepoSlugSrcResponse(rsp *http.Response) (*PostRepositoriesWorkspaceRepoSlugSrcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRepositoriesWorkspaceRepoSlugSrcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugSrcCommitPathWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugSrcCommitPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedTreeentries
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 555:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON555 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugVersionsResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugVersionsWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugVersionsResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedVersions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugVersionsVersionIdWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugVersionsVersionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRepositoriesWorkspaceRepoSlugWatchersResponse parses an HTTP response from a GetRepositoriesWorkspaceRepoSlugWatchersWithResponse call
func ParseGetRepositoriesWorkspaceRepoSlugWatchersResponse(rsp *http.Response) (*GetRepositoriesWorkspaceRepoSlugWatchersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRepositoriesWorkspaceRepoSlugWatchersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSnippetsResponse parses an HTTP response from a GetSnippetsWithResponse call
func ParseGetSnippetsResponse(rsp *http.Response) (*GetSnippetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnippets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSnippetsResponse parses an HTTP response from a PostSnippetsWithResponse call
func ParsePostSnippetsResponse(rsp *http.Response) (*PostSnippetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSnippetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceResponse parses an HTTP response from a GetSnippetsWorkspaceWithResponse call
func ParseGetSnippetsWorkspaceResponse(rsp *http.Response) (*GetSnippetsWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnippets
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSnippetsWorkspaceResponse parses an HTTP response from a PostSnippetsWorkspaceWithResponse call
func ParsePostSnippetsWorkspaceResponse(rsp *http.Response) (*PostSnippetsWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSnippetsWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseDeleteSnippetsWorkspaceEncodedIdResponse parses an HTTP response from a DeleteSnippetsWorkspaceEncodedIdWithResponse call
func ParseDeleteSnippetsWorkspaceEncodedIdResponse(rsp *http.Response) (*DeleteSnippetsWorkspaceEncodedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnippetsWorkspaceEncodedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON410 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 401:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 410:
		// Content-type (multipart/related) unsupported

	}

	return response, nil
}

// ParsePutSnippetsWorkspaceEncodedIdResponse parses an HTTP response from a PutSnippetsWorkspaceEncodedIdWithResponse call
func ParsePutSnippetsWorkspaceEncodedIdResponse(rsp *http.Response) (*PutSnippetsWorkspaceEncodedIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSnippetsWorkspaceEncodedIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 401:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 404:
		// Content-type (multipart/related) unsupported

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdCommentsResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdCommentsWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdCommentsResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnippetComments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostSnippetsWorkspaceEncodedIdCommentsResponse parses an HTTP response from a PostSnippetsWorkspaceEncodedIdCommentsWithResponse call
func ParsePostSnippetsWorkspaceEncodedIdCommentsResponse(rsp *http.Response) (*PostSnippetsWorkspaceEncodedIdCommentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSnippetsWorkspaceEncodedIdCommentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SnippetComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse parses an HTTP response from a DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse call
func ParseDeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp *http.Response) (*DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnippetsWorkspaceEncodedIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnippetComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse parses an HTTP response from a PutSnippetsWorkspaceEncodedIdCommentsCommentIdWithResponse call
func ParsePutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse(rsp *http.Response) (*PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSnippetsWorkspaceEncodedIdCommentsCommentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnippetComment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdCommitsResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdCommitsWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdCommitsResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdCommitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdCommitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSnippetCommit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdCommitsRevisionResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdCommitsRevisionWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdCommitsRevisionResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdCommitsRevisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnippetCommit
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdFilesPathResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdFilesPathWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdFilesPathResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdFilesPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdFilesPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSnippetsWorkspaceEncodedIdWatchResponse parses an HTTP response from a DeleteSnippetsWorkspaceEncodedIdWatchWithResponse call
func ParseDeleteSnippetsWorkspaceEncodedIdWatchResponse(rsp *http.Response) (*DeleteSnippetsWorkspaceEncodedIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnippetsWorkspaceEncodedIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdWatchResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdWatchWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdWatchResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutSnippetsWorkspaceEncodedIdWatchResponse parses an HTTP response from a PutSnippetsWorkspaceEncodedIdWatchWithResponse call
func ParsePutSnippetsWorkspaceEncodedIdWatchResponse(rsp *http.Response) (*PutSnippetsWorkspaceEncodedIdWatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSnippetsWorkspaceEncodedIdWatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdWatchersResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdWatchersWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdWatchersResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdWatchersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdWatchersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedAccounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteSnippetsWorkspaceEncodedIdNodeIdResponse parses an HTTP response from a DeleteSnippetsWorkspaceEncodedIdNodeIdWithResponse call
func ParseDeleteSnippetsWorkspaceEncodedIdNodeIdResponse(rsp *http.Response) (*DeleteSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSnippetsWorkspaceEncodedIdNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdNodeIdResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdNodeIdWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdNodeIdResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 401:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 404:
		// Content-type (multipart/related) unsupported

	}

	return response, nil
}

// ParsePutSnippetsWorkspaceEncodedIdNodeIdResponse parses an HTTP response from a PutSnippetsWorkspaceEncodedIdNodeIdWithResponse call
func ParsePutSnippetsWorkspaceEncodedIdNodeIdResponse(rsp *http.Response) (*PutSnippetsWorkspaceEncodedIdNodeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSnippetsWorkspaceEncodedIdNodeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Snippet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case rsp.StatusCode == 200:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 401:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 403:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 404:
	// Content-type (multipart/related) unsupported

	case rsp.StatusCode == 405:
		// Content-type (multipart/related) unsupported

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdNodeIdFilesPathWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdNodeIdFilesPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdRevisionDiffResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdRevisionDiffWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdRevisionDiffResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdRevisionDiffResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdRevisionDiffResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetSnippetsWorkspaceEncodedIdRevisionPatchResponse parses an HTTP response from a GetSnippetsWorkspaceEncodedIdRevisionPatchWithResponse call
func ParseGetSnippetsWorkspaceEncodedIdRevisionPatchResponse(rsp *http.Response) (*GetSnippetsWorkspaceEncodedIdRevisionPatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetsWorkspaceEncodedIdRevisionPatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariablesForTeamResponse parses an HTTP response from a GetPipelineVariablesForTeamWithResponse call
func ParseGetPipelineVariablesForTeamResponse(rsp *http.Response) (*GetPipelineVariablesForTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariablesForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineVariables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePipelineVariableForTeamResponse parses an HTTP response from a CreatePipelineVariableForTeamWithResponse call
func ParseCreatePipelineVariableForTeamResponse(rsp *http.Response) (*CreatePipelineVariableForTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineVariableForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineVariableForTeamResponse parses an HTTP response from a DeletePipelineVariableForTeamWithResponse call
func ParseDeletePipelineVariableForTeamResponse(rsp *http.Response) (*DeletePipelineVariableForTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineVariableForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariableForTeamResponse parses an HTTP response from a GetPipelineVariableForTeamWithResponse call
func ParseGetPipelineVariableForTeamResponse(rsp *http.Response) (*GetPipelineVariableForTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariableForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePipelineVariableForTeamResponse parses an HTTP response from a UpdatePipelineVariableForTeamWithResponse call
func ParseUpdatePipelineVariableForTeamResponse(rsp *http.Response) (*UpdatePipelineVariableForTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineVariableForTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchTeamResponse parses an HTTP response from a SearchTeamWithResponse call
func ParseSearchTeamResponse(rsp *http.Response) (*SearchTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUserEmailsResponse parses an HTTP response from a GetUserEmailsWithResponse call
func ParseGetUserEmailsResponse(rsp *http.Response) (*GetUserEmailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserEmailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserEmailsEmailResponse parses an HTTP response from a GetUserEmailsEmailWithResponse call
func ParseGetUserEmailsEmailResponse(rsp *http.Response) (*GetUserEmailsEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserEmailsEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetUserPermissionsRepositoriesResponse parses an HTTP response from a GetUserPermissionsRepositoriesWithResponse call
func ParseGetUserPermissionsRepositoriesResponse(rsp *http.Response) (*GetUserPermissionsRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserPermissionsWorkspacesResponse parses an HTTP response from a GetUserPermissionsWorkspacesWithResponse call
func ParseGetUserPermissionsWorkspacesResponse(rsp *http.Response) (*GetUserPermissionsWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkspaceMemberships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetUsersSelectedUserResponse parses an HTTP response from a GetUsersSelectedUserWithResponse call
func ParseGetUsersSelectedUserResponse(rsp *http.Response) (*GetUsersSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariablesForUserResponse parses an HTTP response from a GetPipelineVariablesForUserWithResponse call
func ParseGetPipelineVariablesForUserResponse(rsp *http.Response) (*GetPipelineVariablesForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariablesForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineVariables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePipelineVariableForUserResponse parses an HTTP response from a CreatePipelineVariableForUserWithResponse call
func ParseCreatePipelineVariableForUserResponse(rsp *http.Response) (*CreatePipelineVariableForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineVariableForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineVariableForUserResponse parses an HTTP response from a DeletePipelineVariableForUserWithResponse call
func ParseDeletePipelineVariableForUserResponse(rsp *http.Response) (*DeletePipelineVariableForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineVariableForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariableForUserResponse parses an HTTP response from a GetPipelineVariableForUserWithResponse call
func ParseGetPipelineVariableForUserResponse(rsp *http.Response) (*GetPipelineVariableForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariableForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePipelineVariableForUserResponse parses an HTTP response from a UpdatePipelineVariableForUserWithResponse call
func ParseUpdatePipelineVariableForUserResponse(rsp *http.Response) (*UpdatePipelineVariableForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineVariableForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteUserHostedPropertyValueResponse parses an HTTP response from a DeleteUserHostedPropertyValueWithResponse call
func ParseDeleteUserHostedPropertyValueResponse(rsp *http.Response) (*DeleteUserHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRetrieveUserHostedPropertyValueResponse parses an HTTP response from a RetrieveUserHostedPropertyValueWithResponse call
func ParseRetrieveUserHostedPropertyValueResponse(rsp *http.Response) (*RetrieveUserHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetrieveUserHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApplicationProperty
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUserHostedPropertyValueResponse parses an HTTP response from a UpdateUserHostedPropertyValueWithResponse call
func ParseUpdateUserHostedPropertyValueResponse(rsp *http.Response) (*UpdateUserHostedPropertyValueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserHostedPropertyValueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSearchAccountResponse parses an HTTP response from a SearchAccountWithResponse call
func ParseSearchAccountResponse(rsp *http.Response) (*SearchAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}

// ParseGetUsersSelectedUserSshKeysResponse parses an HTTP response from a GetUsersSelectedUserSshKeysWithResponse call
func ParseGetUsersSelectedUserSshKeysResponse(rsp *http.Response) (*GetUsersSelectedUserSshKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersSelectedUserSshKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedSshUserKeys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostUsersSelectedUserSshKeysResponse parses an HTTP response from a PostUsersSelectedUserSshKeysWithResponse call
func ParsePostUsersSelectedUserSshKeysResponse(rsp *http.Response) (*PostUsersSelectedUserSshKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersSelectedUserSshKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SshAccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteUsersSelectedUserSshKeysKeyIdResponse parses an HTTP response from a DeleteUsersSelectedUserSshKeysKeyIdWithResponse call
func ParseDeleteUsersSelectedUserSshKeysKeyIdResponse(rsp *http.Response) (*DeleteUsersSelectedUserSshKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersSelectedUserSshKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersSelectedUserSshKeysKeyIdResponse parses an HTTP response from a GetUsersSelectedUserSshKeysKeyIdWithResponse call
func ParseGetUsersSelectedUserSshKeysKeyIdResponse(rsp *http.Response) (*GetUsersSelectedUserSshKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersSelectedUserSshKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SshAccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutUsersSelectedUserSshKeysKeyIdResponse parses an HTTP response from a PutUsersSelectedUserSshKeysKeyIdWithResponse call
func ParsePutUsersSelectedUserSshKeysKeyIdResponse(rsp *http.Response) (*PutUsersSelectedUserSshKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutUsersSelectedUserSshKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SshAccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesResponse parses an HTTP response from a GetWorkspacesWithResponse call
func ParseGetWorkspacesResponse(rsp *http.Response) (*GetWorkspacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkspaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceResponse parses an HTTP response from a GetWorkspacesWorkspaceWithResponse call
func ParseGetWorkspacesWorkspaceResponse(rsp *http.Response) (*GetWorkspacesWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workspace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceHooksResponse parses an HTTP response from a GetWorkspacesWorkspaceHooksWithResponse call
func ParseGetWorkspacesWorkspaceHooksResponse(rsp *http.Response) (*GetWorkspacesWorkspaceHooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWebhookSubscriptions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostWorkspacesWorkspaceHooksResponse parses an HTTP response from a PostWorkspacesWorkspaceHooksWithResponse call
func ParsePostWorkspacesWorkspaceHooksResponse(rsp *http.Response) (*PostWorkspacesWorkspaceHooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkspacesWorkspaceHooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceHooksUidResponse parses an HTTP response from a DeleteWorkspacesWorkspaceHooksUidWithResponse call
func ParseDeleteWorkspacesWorkspaceHooksUidResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceHooksUidResponse parses an HTTP response from a GetWorkspacesWorkspaceHooksUidWithResponse call
func ParseGetWorkspacesWorkspaceHooksUidResponse(rsp *http.Response) (*GetWorkspacesWorkspaceHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceHooksUidResponse parses an HTTP response from a PutWorkspacesWorkspaceHooksUidWithResponse call
func ParsePutWorkspacesWorkspaceHooksUidResponse(rsp *http.Response) (*PutWorkspacesWorkspaceHooksUidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceHooksUidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebhookSubscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceMembersResponse parses an HTTP response from a GetWorkspacesWorkspaceMembersWithResponse call
func ParseGetWorkspacesWorkspaceMembersResponse(rsp *http.Response) (*GetWorkspacesWorkspaceMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkspaceMemberships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceMembersMemberResponse parses an HTTP response from a GetWorkspacesWorkspaceMembersMemberWithResponse call
func ParseGetWorkspacesWorkspaceMembersMemberResponse(rsp *http.Response) (*GetWorkspacesWorkspaceMembersMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceMembersMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceMembership
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspacePermissionsResponse parses an HTTP response from a GetWorkspacesWorkspacePermissionsWithResponse call
func ParseGetWorkspacesWorkspacePermissionsResponse(rsp *http.Response) (*GetWorkspacesWorkspacePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspacePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedWorkspaceMemberships
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspacePermissionsRepositoriesResponse parses an HTTP response from a GetWorkspacesWorkspacePermissionsRepositoriesWithResponse call
func ParseGetWorkspacesWorkspacePermissionsRepositoriesResponse(rsp *http.Response) (*GetWorkspacesWorkspacePermissionsRepositoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspacePermissionsRepositoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse parses an HTTP response from a GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugWithResponse call
func ParseGetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse(rsp *http.Response) (*GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspacePermissionsRepositoriesRepoSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRepositoryPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetOIDCConfigurationResponse parses an HTTP response from a GetOIDCConfigurationWithResponse call
func ParseGetOIDCConfigurationResponse(rsp *http.Response) (*GetOIDCConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOIDCConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOIDCKeysResponse parses an HTTP response from a GetOIDCKeysWithResponse call
func ParseGetOIDCKeysResponse(rsp *http.Response) (*GetOIDCKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOIDCKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariablesForWorkspaceResponse parses an HTTP response from a GetPipelineVariablesForWorkspaceWithResponse call
func ParseGetPipelineVariablesForWorkspaceResponse(rsp *http.Response) (*GetPipelineVariablesForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariablesForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPipelineVariables
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePipelineVariableForWorkspaceResponse parses an HTTP response from a CreatePipelineVariableForWorkspaceWithResponse call
func ParseCreatePipelineVariableForWorkspaceResponse(rsp *http.Response) (*CreatePipelineVariableForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePipelineVariableForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeletePipelineVariableForWorkspaceResponse parses an HTTP response from a DeletePipelineVariableForWorkspaceWithResponse call
func ParseDeletePipelineVariableForWorkspaceResponse(rsp *http.Response) (*DeletePipelineVariableForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePipelineVariableForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetPipelineVariableForWorkspaceResponse parses an HTTP response from a GetPipelineVariableForWorkspaceWithResponse call
func ParseGetPipelineVariableForWorkspaceResponse(rsp *http.Response) (*GetPipelineVariableForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPipelineVariableForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePipelineVariableForWorkspaceResponse parses an HTTP response from a UpdatePipelineVariableForWorkspaceWithResponse call
func ParseUpdatePipelineVariableForWorkspaceResponse(rsp *http.Response) (*UpdatePipelineVariableForWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePipelineVariableForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PipelineVariable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsWithResponse call
func ParseGetWorkspacesWorkspaceProjectsResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjects
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostWorkspacesWorkspaceProjectsResponse parses an HTTP response from a PostWorkspacesWorkspaceProjectsWithResponse call
func ParsePostWorkspacesWorkspaceProjectsResponse(rsp *http.Response) (*PostWorkspacesWorkspaceProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkspacesWorkspaceProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceProjectsProjectKeyResponse parses an HTTP response from a DeleteWorkspacesWorkspaceProjectsProjectKeyWithResponse call
func ParseDeleteWorkspacesWorkspaceProjectsProjectKeyResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceProjectsProjectKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceProjectsProjectKeyResponse parses an HTTP response from a PutWorkspacesWorkspaceProjectsProjectKeyWithResponse call
func ParsePutWorkspacesWorkspaceProjectsProjectKeyResponse(rsp *http.Response) (*PutWorkspacesWorkspaceProjectsProjectKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceProjectsProjectKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Project
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectBranchingModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchingModelSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse parses an HTTP response from a PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsWithResponse call
func ParsePutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse(rsp *http.Response) (*PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceProjectsProjectKeyBranchingModelSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchingModelSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedDefaultReviewerAndType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse parses an HTTP response from a DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse call
func ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse parses an HTTP response from a PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserWithResponse call
func ParsePutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse(rsp *http.Response) (*PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceProjectsProjectKeyDefaultReviewersSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectDeployKeys
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse parses an HTTP response from a PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysWithResponse call
func ParsePostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse(rsp *http.Response) (*PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkspacesWorkspaceProjectsProjectKeyDeployKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectDeployKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse parses an HTTP response from a DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse call
func ParseDeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyDeployKeysKeyIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectDeployKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectGroupPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse call
func ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectGroupPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse parses an HTTP response from a PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugWithResponse call
func ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse(rsp *http.Response) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigGroupsGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectGroupPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedProjectUserPermissions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse call
func ParseDeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse call
func ParseGetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUserPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse parses an HTTP response from a PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdWithResponse call
func ParsePutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse(rsp *http.Response) (*PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkspacesWorkspaceProjectsProjectKeyPermissionsConfigUsersSelectedUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUserPermission
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 402:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON402 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetWorkspacesWorkspacePullrequestsSelectedUserResponse parses an HTTP response from a GetWorkspacesWorkspacePullrequestsSelectedUserWithResponse call
func ParseGetWorkspacesWorkspacePullrequestsSelectedUserResponse(rsp *http.Response) (*GetWorkspacesWorkspacePullrequestsSelectedUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspacesWorkspacePullrequestsSelectedUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPullrequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchWorkspaceResponse parses an HTTP response from a SearchWorkspaceWithResponse call
func ParseSearchWorkspaceResponse(rsp *http.Response) (*SearchWorkspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResultPage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	}

	return response, nil
}
