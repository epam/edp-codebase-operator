apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-ci-default
  labels:
      {{- include "codebase-operator.labels" . | nindent 4 }}
data:
  .gitlab-ci.yml: |
    # ============================================================================
    # GITLAB CI/CD COMPONENT LIBRARY - ORCHESTRATION FILE
    # ============================================================================
    # This file orchestrates the conditional inclusion of review and build pipelines
    # based on the pipeline trigger source (merge request vs protected branch)
    #
    # AUTO-GENERATED: This configuration was automatically injected by KubeRocketCI
    # Project: {{.CodebaseName}}

    # ============================================================================
    # WORKFLOW RULES - STANDARD ACROSS ALL TECH STACKS
    # ============================================================================
    # Controls when pipelines are triggered
    workflow:
      rules:
        # Run pipeline for merge request events
        - if: $CI_PIPELINE_SOURCE == "merge_request_event"

        # Run pipeline for pushes to protected branches (main, master, etc.)
        - if: $CI_COMMIT_REF_PROTECTED == "true"

        # Run pipeline for semantic version tags (e.g., 1.0.0, 2.1.3)
        - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/

    # ============================================================================
    # GLOBAL VARIABLES - CUSTOMIZE FOR YOUR PROJECT
    # ============================================================================
    variables:
      # Project identification
      CODEBASE_NAME: "{{.CodebaseName}}"

      # Container image for build/test jobs - Generic Alpine Linux
      # CUSTOMIZE: Update to your tech stack's container image
      # Examples:
      #   Go:         golang:1.24-bookworm
      #   Python:     python:3.13-slim
      #   Node.js:    node:20-alpine
      #   Java:       maven:3.9-eclipse-temurin-17
      #   .NET:       mcr.microsoft.com/dotnet/sdk:8.0
      CONTAINER_IMAGE: "alpine:latest"

      # Container registry for Docker images
      # CUSTOMIZE: Set your registry URL with tenant/organization
      IMAGE_REGISTRY: "docker.io/myorg"

      # SonarQube organization (optional)
      # When set, project key becomes: ${SONAR_ORG}_${CODEBASE_NAME}
      # When empty, project key equals: ${CODEBASE_NAME}
      SONAR_ORG: "myorg"

      # Helm chart directory
      CHART_DIR: "deploy-templates"

    # ============================================================================
    # COMPONENT INCLUSION - CONDITIONAL PIPELINE EXECUTION
    # ============================================================================
    include:
      # REVIEW COMPONENT - Merge Request Validation Pipeline
      # Runs: test → build → verify (NO publishing)
      # Stages: prepare, test, build, verify
      - component: $CI_SERVER_FQDN/kuberocketci/ci-template/review@0.1.0
        inputs:
          stage_prepare: prepare
          stage_test: test
          stage_build: build
          stage_verify: verify
          codebase_name: ${CODEBASE_NAME}
          container_image: ${CONTAINER_IMAGE}
          chart_dir: ${CHART_DIR}
        rules:
          # Only run for merge request events
          - if: $CI_PIPELINE_SOURCE == "merge_request_event"

      # BUILD COMPONENT - Main Branch Build and Publish Pipeline
      # Runs: test → build → package → publish
      # Stages: prepare, test, build, package, publish
      - component: $CI_SERVER_FQDN/kuberocketci/ci-template/build@0.1.0
        inputs:
          stage_prepare: prepare
          stage_test: test
          stage_build: build
          stage_package: package
          stage_publish: publish
          codebase_name: ${CODEBASE_NAME}
          container_image: ${CONTAINER_IMAGE}
          image_registry: ${IMAGE_REGISTRY}
          chart_dir: ${CHART_DIR}
        rules:
          # Run for main/master branch OR any protected branch
          - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_REF_PROTECTED == "true"

    # ============================================================================
    # STANDARDIZED STAGE FLOW - MANDATORY 7-STAGE ARCHITECTURE
    # ============================================================================
    # All component libraries MUST follow this stage sequence
    stages: [prepare, test, build, verify, package, publish, release]

    # ============================================================================
    # VISIBLE JOB (NEVER RUN) - FOR GITLAB UI VISIBILITY
    # ============================================================================
    # This job makes the pipeline visible in GitLab UI but never actually runs
    visible-job-lint-fix:
      stage: .pre
      rules: [when: never]
      script: [echo "This is a visible job (but never run)"]

    # ============================================================================
    # RELEASE JOB - SEMANTIC VERSION TAG RELEASE
    # ============================================================================
    # Creates a GitLab release when a semantic version tag is pushed
    # Requires: Git tag matching pattern ^\d+\.\d+\.\d+$ (e.g., 1.0.0, 2.1.3)
    create-release:
      stage: release
      image: registry.gitlab.com/gitlab-org/release-cli:latest
      rules:
        - if: $CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/
      script: echo "Creating release $CI_COMMIT_TAG"
      release:
        tag_name: $CI_COMMIT_TAG
        description: "Release $CI_COMMIT_TAG of components repository $CI_PROJECT_PATH"

    # ============================================================================
    # REQUIRED CI/CD VARIABLES - CONFIGURE IN GITLAB SETTINGS
    # ============================================================================
    # Navigate to: Settings > CI/CD > Variables
    # Add the following variables as needed:
    #
    # SONARQUBE INTEGRATION:
    #   - SONAR_HOST_URL:        SonarQube/SonarCloud server URL
    #   - SONAR_TOKEN:           SonarQube authentication token (protected)
    #
    # DOCKER REGISTRY:
    #   - DOCKERHUB_USERNAME:    Docker Hub username
    #   - DOCKERHUB_PASSWORD:    Docker Hub password or access token (protected, masked)
    #
    # GIT TAGGING:
    #   - GITLAB_ACCESS_TOKEN:   GitLab personal/project access token (protected, masked)
    #
    # GIT USER IDENTITY (optional):
    #   - GITLAB_USER_EMAIL:     Email for Git commits/tags (default: ci-bot@example.com)
    #   - GITLAB_USER_NAME:      Name for Git commits/tags (default: GitLab CI)

    # ============================================================================
    # CUSTOMIZATION GUIDE
    # ============================================================================
    # 1. Update CONTAINER_IMAGE to your tech stack's base image
    # 2. Set IMAGE_REGISTRY to your container registry
    # 3. Configure SONAR_ORG for SonarQube organization
    # 4. Replace ci-template component references with tech-specific ones:
    #    - ci-golang for Go projects
    #    - ci-java17-mvn for Java Maven projects
    #    - ci-python for Python projects
    #    - ci-nodejs for Node.js projects
    # 5. Add tech-specific CI/CD variables as needed
